[
  {
    "objectID": "Portfolios.html",
    "href": "Portfolios.html",
    "title": "Portfolio",
    "section": "",
    "text": "Project link: Click Here Full Analysis: Click Here Documentation: Click Here Viz : Tableau, PowerBI\n\nGoal: To Analyze food price variations across different regions and time periods\n\nDescription: The main objectives include comparing average prices of the same food item across regions within a given year, examining historical price trends of specific food items within a region, and identifying regional price variations for different food items. Additionally, the project aims to develop predictive models to forecast future food prices based on historical data. Through these analyses, the project seeks to provide insights into regional pricing patterns and potential future trends in food costs.\n\nSkills: Data scraping/mining, Data Cleaning, Data Analysis, correlation matrices, hypothesis testing, Machine learning, Automation\n\nTechnologies: python, Pandas, Numpy, Scipy, Seaborn, Plotly, Pmdarima, Airflow\n\nResults: The analysis revealed significant regional price differences, historical trends, and future projections of food prices, providing insights into market dynamics.\n\n## Investigating Netflx Movies Project link: Click Here Full Analysis: Click Here Documentation: Click Here\n\nGoal: to determine whether movie lengths are actually getting shorter and explain some of the contributing factors.\n\nDescription: Given the large number of movies and series available on the platform, It’s a perfect opportunity for me to flex my exploratory data analysis skills and dive into the entertainment industry. I’ve also been brushing up on my Python skills and have taken an initial look at a CSV file containing Netflix data. I believe that the average duration of movies has been declining. Using my initial research, I’ll delve into the Netflix data to determine whether movie lengths are actually getting shorter and explain some of the contributing factors, if any.\n\nSkills: Data Cleaning, Data Analysis\n\nTechnologies: python, Pandas, Matplotlib\n\nResults: The result of the analysis is uncertain.\n\n3.\nGoal:\nDescription:\nSkills:\nTechnologies:\nResults:\n\n\n\nGoal:\nDescription:\nSkills:\nTechnologies:\nResults:\n\n\n\nGoal:\nDescription:\nSkills:\nTechnologies:\nResults:\n\n\n\nGoal:\nDescription:\nSkills:\nTechnologies:\nResults:\n\n\n\nGoal:\nDescription:\nSkills:\nTechnologies:\nResults:\n\n\n\nGoal:\nDescription:\nSkills:\nTechnologies:\nResults:\n\n\n\nGoal:\nDescription:\nSkills:\nTechnologies:\nResults:"
  },
  {
    "objectID": "Portfolios.html#philippine-food-price-analysis-and-visualization",
    "href": "Portfolios.html#philippine-food-price-analysis-and-visualization",
    "title": "Portfolio",
    "section": "",
    "text": "Project link: Click Here Full Analysis: Click Here Documentation: Click Here Viz : Tableau, PowerBI\n\nGoal: To Analyze food price variations across different regions and time periods\n\nDescription: The main objectives include comparing average prices of the same food item across regions within a given year, examining historical price trends of specific food items within a region, and identifying regional price variations for different food items. Additionally, the project aims to develop predictive models to forecast future food prices based on historical data. Through these analyses, the project seeks to provide insights into regional pricing patterns and potential future trends in food costs.\n\nSkills: Data scraping/mining, Data Cleaning, Data Analysis, correlation matrices, hypothesis testing, Machine learning, Automation\n\nTechnologies: python, Pandas, Numpy, Scipy, Seaborn, Plotly, Pmdarima, Airflow\n\nResults: The analysis revealed significant regional price differences, historical trends, and future projections of food prices, providing insights into market dynamics.\n\n## Investigating Netflx Movies Project link: Click Here Full Analysis: Click Here Documentation: Click Here\n\nGoal: to determine whether movie lengths are actually getting shorter and explain some of the contributing factors.\n\nDescription: Given the large number of movies and series available on the platform, It’s a perfect opportunity for me to flex my exploratory data analysis skills and dive into the entertainment industry. I’ve also been brushing up on my Python skills and have taken an initial look at a CSV file containing Netflix data. I believe that the average duration of movies has been declining. Using my initial research, I’ll delve into the Netflix data to determine whether movie lengths are actually getting shorter and explain some of the contributing factors, if any.\n\nSkills: Data Cleaning, Data Analysis\n\nTechnologies: python, Pandas, Matplotlib\n\nResults: The result of the analysis is uncertain.\n\n3.\nGoal:\nDescription:\nSkills:\nTechnologies:\nResults:\n\n\n\nGoal:\nDescription:\nSkills:\nTechnologies:\nResults:\n\n\n\nGoal:\nDescription:\nSkills:\nTechnologies:\nResults:\n\n\n\nGoal:\nDescription:\nSkills:\nTechnologies:\nResults:\n\n\n\nGoal:\nDescription:\nSkills:\nTechnologies:\nResults:\n\n\n\nGoal:\nDescription:\nSkills:\nTechnologies:\nResults:\n\n\n\nGoal:\nDescription:\nSkills:\nTechnologies:\nResults:"
  },
  {
    "objectID": "Philippine_food_price_Analysis_and_Visualization/Reports/forecast.html",
    "href": "Philippine_food_price_Analysis_and_Visualization/Reports/forecast.html",
    "title": "N. V. Decio",
    "section": "",
    "text": "import pandas as pd\nimport warnings\nfrom pmdarima import auto_arima\nfrom datetime import datetime, timedelta\nimport json\n\n\nfile_path = \"../Data/Interim/cleaned_food_prices.csv\"\ndf_range = pd.read_csv(file_path)\n\n#dropping columns related to food price index\ndf_nofpi_range = df_range.drop(columns=['o_food_price_index', 'h_food_price_index', 'l_food_price_index', 'c_food_price_index', 'inflation_food_price_index', 'trust_food_price_index'])\n\n# Convert 'Date' column to datetime format\ndf_nofpi_range['Date'] = pd.to_datetime(df_nofpi_range['Date'])\n\n#dropping columns related to inflation\ndf_noinf_range = df_nofpi_range.drop(columns=['inflation_beans','inflation_cabbage', 'inflation_carrots', 'inflation_eggs', 'inflation_garlic', 'inflation_meat_beef_chops', 'inflation_meat_chicken_whole', 'inflation_meat_pork', 'inflation_onions', 'inflation_potatoes', 'inflation_rice', 'inflation_tomatoes'])\n\n#dropping columns related to trust scores\ndf_cleaned_range = df_noinf_range.drop(columns=['trust_beans','trust_cabbage', 'trust_carrots', 'trust_eggs', 'trust_garlic', 'trust_meat_beef_chops', 'trust_meat_chicken_whole', 'trust_meat_pork', 'trust_onions', 'trust_potatoes', 'trust_rice', 'trust_tomatoes'])\n\n#dropping uneeded columns\ndf_unneeded_range = df_cleaned_range.drop(columns=['country', 'City', 'lat', 'lon', 'Province', 'year', 'month'])\n\n# Reshaping from wide to long format (including year and month as part of the identifier)\ndf_range = df_unneeded_range.melt(id_vars=['Region', 'Date'], var_name='Food_Items', value_name='Price')\n\ndf_range_filtered = df_range[df_range['Food_Items'].str.startswith('c_')]\n\ndf_range_filtered.loc[:, 'Food_Items'] = df_range_filtered['Food_Items'].str.replace('c_', '', regex=True)\n\n# Sort by date\ndfml = df_range_filtered.sort_values(by=['Region', 'Date'])\n\n\n# Suppress warnings\nwarnings.filterwarnings(\"ignore\")\n\ndef preprocess_data(df, region, item):\n    \"\"\"Preprocess data for a specific region and item.\"\"\"\n    region_df = df[(df['Region'] == region) & (df['Food_Items'] == item)]\n    region_df = (\n        region_df.groupby('Date', as_index=False)['Price']\n        .mean()  # Aggregate duplicate dates by averaging\n    )\n    region_df = region_df.set_index('Date').asfreq('MS')  # Ensure monthly frequency\n    region_df['Price'] = region_df['Price'].interpolate()  # Fill missing values\n    return region_df\n\ndef generate_forecast_with_params(df, region, item):\n    \"\"\"Generate forecast with extended parameter search.\"\"\"\n    region_df = preprocess_data(df, region, item)\n    \n    if len(region_df) &lt; 12:\n        return None\n    \n    try:\n        # Fit ARIMA model with extended parameter search\n        model = auto_arima(region_df['Price'],\n                          start_p=0, max_p=10,\n                          start_d=0, max_d=10,\n                          start_q=0, max_q=10,\n                          seasonal=True,\n                          m=12,\n                          stepwise=False,  # Use complete grid search\n                          trace=True,\n                          n_jobs=-1,\n                          error_action='ignore',\n                          suppress_warnings=True)\n        \n        # Generate forecast\n        forecast = model.predict(n_periods=36)\n        \n        # Get model order\n        order = model.order\n        seasonal_order = model.seasonal_order\n        \n        # Create future dates\n        last_date = region_df.index[-1]\n        future_dates = pd.date_range(start=last_date + pd.DateOffset(months=1), \n                                   periods=36, freq='MS')\n        \n        # Create results dictionary\n        results = {\n            'region': region,\n            'item': item,\n            'historical_dates': region_df.index.strftime('%Y-%m-%d').tolist(),\n            'historical_values': region_df['Price'].tolist(),\n            'forecast_dates': future_dates.strftime('%Y-%m-%d').tolist(),\n            'forecast_values': forecast.tolist(),\n            'p': order[0],\n            'd': order[1],\n            'q': order[2],\n            'P': seasonal_order[0],\n            'D': seasonal_order[1],\n            'Q': seasonal_order[2],\n            'aic': model.aic()\n        }\n        \n        return results\n    \n    except Exception as e:\n        print(f\"Error generating forecast for {region} - {item}: {str(e)}\")\n        return None\n\ndef save_forecasts(df, output_file='forecasts.csv'):\n    \"\"\"Generate and save forecasts for all combinations.\"\"\"\n    regions = sorted(df['Region'].unique())\n    items = sorted(df['Food_Items'].unique())\n    \n    all_forecasts = []\n    \n    for region in regions:\n        for item in items:\n            print(f\"Processing {region} - {item}\")\n            forecast = generate_forecast_with_params(df, region, item)\n            \n            if forecast:\n                # Flatten the forecast data for CSV storage\n                forecast_row = {\n                    'region': region,\n                    'item': item,\n                    'historical_dates': json.dumps(forecast['historical_dates']),\n                    'historical_values': json.dumps(forecast['historical_values']),\n                    'forecast_dates': json.dumps(forecast['forecast_dates']),\n                    'forecast_values': json.dumps(forecast['forecast_values']),\n                    'p': forecast['p'],\n                    'd': forecast['d'],\n                    'q': forecast['q'],\n                    'P': forecast['P'],\n                    'D': forecast['D'],\n                    'Q': forecast['Q'],\n                    'aic': forecast['aic']\n                }\n                all_forecasts.append(forecast_row)\n    \n    # Convert to DataFrame and save\n    forecasts_df = pd.DataFrame(all_forecasts)\n    forecasts_df.to_csv(output_file, index=False)\n    print(f\"Forecasts saved to {output_file}\")\n\n# Example usage:\nif __name__ == \"__main__\":\n    \n     save_forecasts(dfml, 'forecasts.csv')\n\nProcessing Autonomous region in Muslim Mindanao - beans\n\nBest model:  ARIMA(2,1,3)(0,0,0)[12] intercept\nTotal fit time: 7.399 seconds\nProcessing Autonomous region in Muslim Mindanao - cabbage\n\nBest model:  ARIMA(0,1,2)(0,0,0)[12] intercept\nTotal fit time: 5.164 seconds\nProcessing Autonomous region in Muslim Mindanao - carrots\n\n\n\n---------------------------------------------------------------------------\nKeyboardInterrupt                         Traceback (most recent call last)\nCell In[8], line 110\n    107 # Example usage:\n    108 if __name__ == \"__main__\":\n--&gt; 110      save_forecasts(dfml, 'forecasts.csv')\n\nCell In[8], line 81, in save_forecasts(df, output_file)\n     79 for item in items:\n     80     print(f\"Processing {region} - {item}\")\n---&gt; 81     forecast = generate_forecast_with_params(df, region, item)\n     83     if forecast:\n     84         # Flatten the forecast data for CSV storage\n     85         forecast_row = {\n     86             'region': region,\n     87             'item': item,\n   (...)\n     98             'aic': forecast['aic']\n     99         }\n\nCell In[8], line 24, in generate_forecast_with_params(df, region, item)\n     20     return None\n     22 try:\n     23     # Fit ARIMA model with extended parameter search\n---&gt; 24     model = auto_arima(region_df['Price'],\n     25                       start_p=0, max_p=10,\n     26                       start_d=0, max_d=10,\n     27                       start_q=0, max_q=10,\n     28                       seasonal=True,\n     29                       m=12,\n     30                       stepwise=False,  # Use complete grid search\n     31                       trace=True,\n     32                       n_jobs=-1,\n     33                       error_action='ignore',\n     34                       suppress_warnings=True)\n     36     # Generate forecast\n     37     forecast = model.predict(n_periods=36)\n\nFile c:\\Users\\Admin\\Desktop\\personal_projects\\Data_Analysis\\.venv\\Lib\\site-packages\\pmdarima\\arima\\auto.py:701, in auto_arima(y, X, start_p, d, start_q, max_p, max_d, max_q, start_P, D, start_Q, max_P, max_D, max_Q, max_order, m, seasonal, stationary, information_criterion, alpha, test, seasonal_test, stepwise, n_jobs, start_params, trend, method, maxiter, offset_test_args, seasonal_test_args, suppress_warnings, error_action, trace, random, random_state, n_fits, return_valid_fits, out_of_sample_size, scoring, scoring_args, with_intercept, sarimax_kwargs, **fit_args)\n    669     # init the stepwise model wrapper\n    670     search = solvers._StepwiseFitWrapper(\n    671         y,\n    672         X=X,\n   (...)\n    698         **sarimax_kwargs,\n    699     )\n--&gt; 701 sorted_res = search.solve()\n    702 return _return_wrapper(sorted_res, return_valid_fits, start, trace)\n\nFile c:\\Users\\Admin\\Desktop\\personal_projects\\Data_Analysis\\.venv\\Lib\\site-packages\\pmdarima\\arima\\_auto_solvers.py:127, in _RandomFitWrapper.solve(self)\n    124 gen = self.gen\n    126 # get results in parallel\n--&gt; 127 all_res = Parallel(n_jobs=n_jobs)(\n    128     delayed(fit_partial)(\n    129         order=order,\n    130         seasonal_order=seasonal_order,\n    131     )\n    132     for order, seasonal_order in gen\n    133 )\n    135 sorted_fits = _sort_and_filter_fits(all_res)\n    136 if self.trace and sorted_fits:\n\nFile c:\\Users\\Admin\\Desktop\\personal_projects\\Data_Analysis\\.venv\\Lib\\site-packages\\joblib\\parallel.py:2007, in Parallel.__call__(self, iterable)\n   2001 # The first item from the output is blank, but it makes the interpreter\n   2002 # progress until it enters the Try/Except block of the generator and\n   2003 # reaches the first `yield` statement. This starts the asynchronous\n   2004 # dispatch of the tasks to the workers.\n   2005 next(output)\n-&gt; 2007 return output if self.return_generator else list(output)\n\nFile c:\\Users\\Admin\\Desktop\\personal_projects\\Data_Analysis\\.venv\\Lib\\site-packages\\joblib\\parallel.py:1650, in Parallel._get_outputs(self, iterator, pre_dispatch)\n   1647     yield\n   1649     with self._backend.retrieval_context():\n-&gt; 1650         yield from self._retrieve()\n   1652 except GeneratorExit:\n   1653     # The generator has been garbage collected before being fully\n   1654     # consumed. This aborts the remaining tasks if possible and warn\n   1655     # the user if necessary.\n   1656     self._exception = True\n\nFile c:\\Users\\Admin\\Desktop\\personal_projects\\Data_Analysis\\.venv\\Lib\\site-packages\\joblib\\parallel.py:1762, in Parallel._retrieve(self)\n   1757 # If the next job is not ready for retrieval yet, we just wait for\n   1758 # async callbacks to progress.\n   1759 if ((len(self._jobs) == 0) or\n   1760     (self._jobs[0].get_status(\n   1761         timeout=self.timeout) == TASK_PENDING)):\n-&gt; 1762     time.sleep(0.01)\n   1763     continue\n   1765 # We need to be careful: the job list can be filling up as\n   1766 # we empty it and Python list are not thread-safe by\n   1767 # default hence the use of the lock\n\nKeyboardInterrupt: \n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "Philippine_food_price_Analysis_and_Visualization/Data/Processed/EDA.html",
    "href": "Philippine_food_price_Analysis_and_Visualization/Data/Processed/EDA.html",
    "title": "Start of analysis",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nfrom scipy.stats import mode\n\n\n# Load dataset\nfile_path = \"../Interim/cleaned_food_prices.csv\"\ndf = pd.read_csv(file_path)\n\n\n# View the first few rows of the dataset\nprint(df.head())\n\n       country                            Region Province  City        lat  \\\n0  Philippines  Cordillera Administrative region     Abra  Abra  17.600651   \n1  Philippines  Cordillera Administrative region     Abra  Abra  17.600651   \n2  Philippines  Cordillera Administrative region     Abra  Abra  17.600651   \n3  Philippines  Cordillera Administrative region     Abra  Abra  17.600651   \n4  Philippines  Cordillera Administrative region     Abra  Abra  17.600651   \n\n          lon        Date  year  month  beans  ...  l_tomatoes  c_tomatoes  \\\n0  120.619362  2007-01-01  2007      1    NaN  ...       26.03       27.84   \n1  120.619362  2007-02-01  2007      2    NaN  ...       26.31       26.82   \n2  120.619362  2007-03-01  2007      3    NaN  ...       24.95       26.21   \n3  120.619362  2007-04-01  2007      4    NaN  ...       24.93       26.74   \n4  120.619362  2007-05-01  2007      5    NaN  ...       26.30       27.19   \n\n   inflation_tomatoes  trust_tomatoes  o_food_price_index  h_food_price_index  \\\n0                 NaN             8.0                0.68                0.69   \n1                 NaN             8.0                0.68                0.69   \n2                 NaN             8.0                0.66                0.67   \n3                 NaN             8.0                0.66                0.67   \n4                 NaN             8.0                0.67                0.68   \n\n   l_food_price_index  c_food_price_index  inflation_food_price_index  \\\n0                0.67                0.68                         NaN   \n1                0.67                0.67                         NaN   \n2                0.65                0.66                         NaN   \n3                0.65                0.66                         NaN   \n4                0.66                0.67                         NaN   \n\n   trust_food_price_index  \n0                     9.4  \n1                     9.4  \n2                     9.4  \n3                     9.4  \n4                     9.4  \n\n[5 rows x 99 columns]\n\n\n\n# Check the structure and datatypes\nprint(df.info())\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 23653 entries, 0 to 23652\nData columns (total 99 columns):\n #   Column                        Non-Null Count  Dtype  \n---  ------                        --------------  -----  \n 0   country                       23653 non-null  object \n 1   Region                        23653 non-null  object \n 2   Province                      23653 non-null  object \n 3   City                          23653 non-null  object \n 4   lat                           23436 non-null  float64\n 5   lon                           23436 non-null  float64\n 6   Date                          23653 non-null  object \n 7   year                          23653 non-null  int64  \n 8   month                         23653 non-null  int64  \n 9   beans                         2384 non-null   float64\n 10  cabbage                       3696 non-null   float64\n 11  carrots                       3747 non-null   float64\n 12  eggs                          5391 non-null   float64\n 13  garlic                        3020 non-null   float64\n 14  meat_beef_chops               2702 non-null   float64\n 15  meat_chicken_whole            2601 non-null   float64\n 16  meat_pork                     2944 non-null   float64\n 17  onions                        5548 non-null   float64\n 18  potatoes                      3113 non-null   float64\n 19  rice                          6554 non-null   float64\n 20  tomatoes                      2399 non-null   float64\n 21  o_beans                       23653 non-null  float64\n 22  h_beans                       23653 non-null  float64\n 23  l_beans                       23653 non-null  float64\n 24  c_beans                       23653 non-null  float64\n 25  inflation_beans               22345 non-null  float64\n 26  trust_beans                   23653 non-null  float64\n 27  o_cabbage                     23653 non-null  float64\n 28  h_cabbage                     23653 non-null  float64\n 29  l_cabbage                     23653 non-null  float64\n 30  c_cabbage                     23653 non-null  float64\n 31  inflation_cabbage             22345 non-null  float64\n 32  trust_cabbage                 23653 non-null  float64\n 33  o_carrots                     23653 non-null  float64\n 34  h_carrots                     23653 non-null  float64\n 35  l_carrots                     23653 non-null  float64\n 36  c_carrots                     23653 non-null  float64\n 37  inflation_carrots             22345 non-null  float64\n 38  trust_carrots                 23653 non-null  float64\n 39  o_eggs                        23653 non-null  float64\n 40  h_eggs                        23653 non-null  float64\n 41  l_eggs                        23653 non-null  float64\n 42  c_eggs                        23653 non-null  float64\n 43  inflation_eggs                22345 non-null  float64\n 44  trust_eggs                    23653 non-null  float64\n 45  o_garlic                      23653 non-null  float64\n 46  h_garlic                      23653 non-null  float64\n 47  l_garlic                      23653 non-null  float64\n 48  c_garlic                      23653 non-null  float64\n 49  inflation_garlic              22345 non-null  float64\n 50  trust_garlic                  23653 non-null  float64\n 51  o_meat_beef_chops             23653 non-null  float64\n 52  h_meat_beef_chops             23653 non-null  float64\n 53  l_meat_beef_chops             23653 non-null  float64\n 54  c_meat_beef_chops             23653 non-null  float64\n 55  inflation_meat_beef_chops     22345 non-null  float64\n 56  trust_meat_beef_chops         23653 non-null  float64\n 57  o_meat_chicken_whole          23653 non-null  float64\n 58  h_meat_chicken_whole          23653 non-null  float64\n 59  l_meat_chicken_whole          23653 non-null  float64\n 60  c_meat_chicken_whole          23653 non-null  float64\n 61  inflation_meat_chicken_whole  22345 non-null  float64\n 62  trust_meat_chicken_whole      23653 non-null  float64\n 63  o_meat_pork                   23653 non-null  float64\n 64  h_meat_pork                   23653 non-null  float64\n 65  l_meat_pork                   23653 non-null  float64\n 66  c_meat_pork                   23653 non-null  float64\n 67  inflation_meat_pork           22345 non-null  float64\n 68  trust_meat_pork               23653 non-null  float64\n 69  o_onions                      23653 non-null  float64\n 70  h_onions                      23653 non-null  float64\n 71  l_onions                      23653 non-null  float64\n 72  c_onions                      23653 non-null  float64\n 73  inflation_onions              22345 non-null  float64\n 74  trust_onions                  23653 non-null  float64\n 75  o_potatoes                    23653 non-null  float64\n 76  h_potatoes                    23653 non-null  float64\n 77  l_potatoes                    23653 non-null  float64\n 78  c_potatoes                    23653 non-null  float64\n 79  inflation_potatoes            22345 non-null  float64\n 80  trust_potatoes                23653 non-null  float64\n 81  o_rice                        23653 non-null  float64\n 82  h_rice                        23653 non-null  float64\n 83  l_rice                        23653 non-null  float64\n 84  c_rice                        23653 non-null  float64\n 85  inflation_rice                22345 non-null  float64\n 86  trust_rice                    23653 non-null  float64\n 87  o_tomatoes                    23653 non-null  float64\n 88  h_tomatoes                    23653 non-null  float64\n 89  l_tomatoes                    23653 non-null  float64\n 90  c_tomatoes                    23653 non-null  float64\n 91  inflation_tomatoes            22345 non-null  float64\n 92  trust_tomatoes                23653 non-null  float64\n 93  o_food_price_index            23653 non-null  float64\n 94  h_food_price_index            23653 non-null  float64\n 95  l_food_price_index            23653 non-null  float64\n 96  c_food_price_index            23653 non-null  float64\n 97  inflation_food_price_index    22345 non-null  float64\n 98  trust_food_price_index        23653 non-null  float64\ndtypes: float64(92), int64(2), object(5)\nmemory usage: 17.9+ MB\nNone\n\n\n\n# Get summary statistics of numerical columns\nprint(df.describe())\n\n                lat           lon          year         month        beans  \\\ncount  23436.000000  23436.000000  23653.000000  23653.000000  2384.000000   \nmean      11.709358    122.876852   2015.543779      6.474654    98.049673   \nstd        3.640368      1.949177      5.216106      3.464248    15.231500   \nmin        5.029099    118.735278   2007.000000      1.000000    55.490000   \n25%        8.481003    121.086142   2011.000000      3.000000    87.162500   \n50%       11.570265    122.851105   2016.000000      6.000000    98.190000   \n75%       14.716339    124.667869   2020.000000      9.000000   107.500000   \nmax       18.194082    126.207645   2025.000000     12.000000   229.540000   \n\n          cabbage      carrots         eggs       garlic  meat_beef_chops  \\\ncount  3696.00000  3747.000000  5391.000000  3020.000000      2702.000000   \nmean     72.09049    91.267086     7.008577   169.917825       274.926121   \nstd      32.25439    37.874833     1.511605    60.216075        70.702813   \nmin       7.52000    14.200000     3.990000    80.910000       125.330000   \n25%      46.88000    62.395000     6.000000   131.250000       208.497500   \n50%      69.50000    85.670000     7.000000   150.600000       281.250000   \n75%      91.67500   115.660000     8.130000   187.805000       333.750000   \nmax     250.00000   236.250000    25.000000   594.440000       430.000000   \n\n       ...    l_tomatoes    c_tomatoes  inflation_tomatoes  trust_tomatoes  \\\ncount  ...  23653.000000  23653.000000        22345.000000    23653.000000   \nmean   ...     44.823604     47.712646            7.055514        8.519456   \nstd    ...     17.002781     19.381362           22.006638        0.824231   \nmin    ...      7.050000      7.830000          -75.960000        8.000000   \n25%    ...     34.000000     35.440000           -3.250000        8.000000   \n50%    ...     39.720000     41.240000            2.930000        8.000000   \n75%    ...     50.320000     53.540000           14.070000        9.100000   \nmax    ...    161.290000    209.830000          331.740000       10.000000   \n\n       o_food_price_index  h_food_price_index  l_food_price_index  \\\ncount        23653.000000        23653.000000        23653.000000   \nmean             0.976953            0.994561            0.959457   \nstd              0.221319            0.228211            0.215228   \nmin              0.640000            0.650000            0.610000   \n25%              0.820000            0.830000            0.800000   \n50%              0.910000            0.920000            0.890000   \n75%              1.070000            1.090000            1.050000   \nmax              1.810000            1.850000            1.740000   \n\n       c_food_price_index  inflation_food_price_index  trust_food_price_index  \ncount        23653.000000                22345.000000            23653.000000  \nmean             0.977137                    4.042098                9.521046  \nstd              0.223137                    6.929498                0.183176  \nmin              0.640000                  -17.670000                9.400000  \n25%              0.810000                   -0.720000                9.400000  \n50%              0.900000                    3.180000                9.400000  \n75%              1.070000                    7.570000                9.700000  \nmax              1.810000                   44.990000                9.900000  \n\n[8 rows x 94 columns]\n\n\n\n#dropping columns related to food price index\ndf_nofpi = df.drop(columns=['o_food_price_index', 'h_food_price_index', 'l_food_price_index', 'c_food_price_index', 'inflation_food_price_index', 'trust_food_price_index'])\n\n\n# Convert 'Date' column to datetime format\ndf_nofpi['Date'] = pd.to_datetime(df_nofpi['Date'])\n\n\n# Check the unique values of the 'Date' column (like ranges)\nprint(df_nofpi['Date'].min(), df_nofpi['Date'].max())\n\n2007-01-01 00:00:00 2025-01-01 00:00:00\n\n\n\n#dropping columns related to inflation\ndf_noinf = df_nofpi.drop(columns=['inflation_beans','inflation_cabbage', 'inflation_carrots', 'inflation_eggs', 'inflation_garlic', 'inflation_meat_beef_chops', 'inflation_meat_chicken_whole', 'inflation_meat_pork', 'inflation_onions', 'inflation_potatoes', 'inflation_rice', 'inflation_tomatoes'])\n\n\n#dropping columns related to trust scores\ndf_cleaned = df_noinf.drop(columns=['trust_beans','trust_cabbage', 'trust_carrots', 'trust_eggs', 'trust_garlic', 'trust_meat_beef_chops', 'trust_meat_chicken_whole', 'trust_meat_pork', 'trust_onions', 'trust_potatoes', 'trust_rice', 'trust_tomatoes'])\n\n\n# View the dataset after dropping columns\nprint(df_cleaned.head())\n\n       country                            Region Province  City        lat  \\\n0  Philippines  Cordillera Administrative region     Abra  Abra  17.600651   \n1  Philippines  Cordillera Administrative region     Abra  Abra  17.600651   \n2  Philippines  Cordillera Administrative region     Abra  Abra  17.600651   \n3  Philippines  Cordillera Administrative region     Abra  Abra  17.600651   \n4  Philippines  Cordillera Administrative region     Abra  Abra  17.600651   \n\n          lon       Date  year  month  beans  ...  l_potatoes  c_potatoes  \\\n0  120.619362 2007-01-01  2007      1    NaN  ...       34.28       35.26   \n1  120.619362 2007-02-01  2007      2    NaN  ...       34.21       34.21   \n2  120.619362 2007-03-01  2007      3    NaN  ...       33.13       33.83   \n3  120.619362 2007-04-01  2007      4    NaN  ...       33.09       33.85   \n4  120.619362 2007-05-01  2007      5    NaN  ...       33.44       34.56   \n\n   o_rice  h_rice  l_rice  c_rice  o_tomatoes  h_tomatoes  l_tomatoes  \\\n0   19.88   20.21   19.71   19.95       27.54       29.29       26.03   \n1   20.03   20.28   19.78   20.24       27.96       29.60       26.31   \n2   20.39   20.67   20.15   20.67       26.33       27.72       24.95   \n3   20.86   21.12   20.61   20.90       26.05       27.17       24.93   \n4   21.03   21.25   20.80   21.20       27.31       28.31       26.30   \n\n   c_tomatoes  \n0       27.84  \n1       26.82  \n2       26.21  \n3       26.74  \n4       27.19  \n\n[5 rows x 69 columns]\n\n\n\n#dropping uneeded columns\ndf_unneeded = df_cleaned.drop(columns=['country', 'City', 'lat', 'lon'])\n\n# Reshaping from wide to long format (including year and month as part of the identifier)\ndf_melted = df_unneeded.melt(id_vars=['Region', 'Province', 'Date', 'year', 'month'], var_name='Food_Items', value_name='Price')\n\n\n# View the dataset after reshaping\nprint(df_melted.head())\n\n                             Region Province       Date  year  month  \\\n0  Cordillera Administrative region     Abra 2007-01-01  2007      1   \n1  Cordillera Administrative region     Abra 2007-02-01  2007      2   \n2  Cordillera Administrative region     Abra 2007-03-01  2007      3   \n3  Cordillera Administrative region     Abra 2007-04-01  2007      4   \n4  Cordillera Administrative region     Abra 2007-05-01  2007      5   \n\n  Food_Items  Price  \n0      beans    NaN  \n1      beans    NaN  \n2      beans    NaN  \n3      beans    NaN  \n4      beans    NaN  \n\n\n\n1.Exploratory Data Analysis\n\nprint(df_melted['Region'].unique())\nprint(df_melted['Province'].unique())\nprint(df_melted['Food_Items'].unique())\n\n['Cordillera Administrative region' 'Region XIII' 'Region VI' 'Region V'\n 'Region III' 'Autonomous region in Muslim Mindanao' 'Region IV-A'\n 'Region VIII' 'Region VII' 'Region X' 'Region II' 'Region IV-B'\n 'Region XII' 'Region XI' 'Region I' 'National Capital region' 'Region IX'\n 'Market Average']\n['Abra' 'Agusan del Norte' 'Agusan del Sur' 'Aklan' 'Albay' 'Antique'\n 'Apayao' 'Aurora' 'Benguet' 'Basilan' 'Bataan' 'Batangas' 'Biliran'\n 'Bohol' 'Bukidnon' 'Bulacan' 'Nueva Ecija' 'Cagayan' 'Misamis Oriental'\n 'Oriental Mindoro' 'Camarines Norte' 'Masbate' 'Camiguin' 'Capiz'\n 'Catanduanes' 'Southern Leyte' 'Cavite' 'Cebu' 'North Cotabato'\n 'Maguindanao' 'Davao del Sur' 'Compostela Valley' 'Davao del Norte'\n 'Davao Oriental' 'Dinagat Islands' 'Eastern Samar' 'Guimaras' 'Ifugao'\n 'Ilocos Norte' 'Ilocos Sur' 'Iloilo' 'Isabela' 'Kalinga' 'South Cotabato'\n 'La Union' 'Laguna' 'Lanao del Norte' 'Lanao del Sur' 'Leyte'\n 'Pangasinan' 'Marinduque' 'Metropolitan Manila' 'Misamis Occidental'\n 'Mountain Province' 'Camarines Sur' 'Negros Occidental' 'Negros Oriental'\n 'Northern Samar' 'Nueva Vizcaya' 'Occidental Mindoro' 'Palawan' 'Quezon'\n 'Quirino' 'Rizal' 'Romblon' 'Samar' 'Sarangani' 'Siquijor' 'Sorsogon'\n 'Sultan Kudarat' 'Sulu' 'Surigao del Norte' 'Surigao del Sur' 'Tarlac'\n 'Tawi-Tawi' 'Zambales' 'Zamboanga del Sur' 'Zamboanga del Norte'\n 'Zamboanga Sibugay' 'Market Average']\n['beans' 'cabbage' 'carrots' 'eggs' 'garlic' 'meat_beef_chops'\n 'meat_chicken_whole' 'meat_pork' 'onions' 'potatoes' 'rice' 'tomatoes'\n 'o_beans' 'h_beans' 'l_beans' 'c_beans' 'o_cabbage' 'h_cabbage'\n 'l_cabbage' 'c_cabbage' 'o_carrots' 'h_carrots' 'l_carrots' 'c_carrots'\n 'o_eggs' 'h_eggs' 'l_eggs' 'c_eggs' 'o_garlic' 'h_garlic' 'l_garlic'\n 'c_garlic' 'o_meat_beef_chops' 'h_meat_beef_chops' 'l_meat_beef_chops'\n 'c_meat_beef_chops' 'o_meat_chicken_whole' 'h_meat_chicken_whole'\n 'l_meat_chicken_whole' 'c_meat_chicken_whole' 'o_meat_pork' 'h_meat_pork'\n 'l_meat_pork' 'c_meat_pork' 'o_onions' 'h_onions' 'l_onions' 'c_onions'\n 'o_potatoes' 'h_potatoes' 'l_potatoes' 'c_potatoes' 'o_rice' 'h_rice'\n 'l_rice' 'c_rice' 'o_tomatoes' 'h_tomatoes' 'l_tomatoes' 'c_tomatoes']\n\n\n\nMeasures of Central Tendency\n\ngrouped = df_melted.groupby(['Region', 'Province', 'Food_Items', 'year'])\nprint(grouped)\n\n&lt;pandas.core.groupby.generic.DataFrameGroupBy object at 0x000001CD933A4BF0&gt;\n\n\n\nmean and median\n\ncentral_tendency = grouped['Price'].agg(['mean', 'median']).reset_index()\nprint(central_tendency)\n\n                                     Region         Province Food_Items  year  \\\n0      Autonomous region in Muslim Mindanao          Basilan      beans  2007   \n1      Autonomous region in Muslim Mindanao          Basilan      beans  2008   \n2      Autonomous region in Muslim Mindanao          Basilan      beans  2009   \n3      Autonomous region in Muslim Mindanao          Basilan      beans  2010   \n4      Autonomous region in Muslim Mindanao          Basilan      beans  2011   \n...                                     ...              ...        ...   ...   \n91195                           Region XIII  Surigao del Sur   tomatoes  2021   \n91196                           Region XIII  Surigao del Sur   tomatoes  2022   \n91197                           Region XIII  Surigao del Sur   tomatoes  2023   \n91198                           Region XIII  Surigao del Sur   tomatoes  2024   \n91199                           Region XIII  Surigao del Sur   tomatoes  2025   \n\n          mean  median  \n0          NaN     NaN  \n1          NaN     NaN  \n2          NaN     NaN  \n3          NaN     NaN  \n4          NaN     NaN  \n...        ...     ...  \n91195  55.4925  55.545  \n91196  64.5000  60.000  \n91197  73.5000  77.500  \n91198  61.7200  61.250  \n91199      NaN     NaN  \n\n[91200 rows x 6 columns]\n\n\n\n\nmode\n\n#calculate mode\ndef calculate_mode(series):\n    # Drop NaN values\n    valid_values = series.dropna()\n    \n    if valid_values.empty:  # If no valid values, return NaN\n        return np.nan\n    \n    # Compute the mode\n    result = mode(valid_values)\n    \n    # Handle cases where result.mode might be scalar\n    if isinstance(result.mode, np.ndarray) and len(result.mode) &gt; 0:\n        return result.mode[0]\n    elif np.isscalar(result.mode):  # For scalar mode\n        return result.mode\n    else:\n        return np.nan\n\ncentral_tendency['Mode'] = grouped['Price'].transform(calculate_mode)\n\n\nprint(central_tendency)\n\n                                     Region         Province Food_Items  year  \\\n0      Autonomous region in Muslim Mindanao          Basilan      beans  2007   \n1      Autonomous region in Muslim Mindanao          Basilan      beans  2008   \n2      Autonomous region in Muslim Mindanao          Basilan      beans  2009   \n3      Autonomous region in Muslim Mindanao          Basilan      beans  2010   \n4      Autonomous region in Muslim Mindanao          Basilan      beans  2011   \n...                                     ...              ...        ...   ...   \n91195                           Region XIII  Surigao del Sur   tomatoes  2021   \n91196                           Region XIII  Surigao del Sur   tomatoes  2022   \n91197                           Region XIII  Surigao del Sur   tomatoes  2023   \n91198                           Region XIII  Surigao del Sur   tomatoes  2024   \n91199                           Region XIII  Surigao del Sur   tomatoes  2025   \n\n          mean  median  Mode  \n0          NaN     NaN   NaN  \n1          NaN     NaN   NaN  \n2          NaN     NaN   NaN  \n3          NaN     NaN   NaN  \n4          NaN     NaN   NaN  \n...        ...     ...   ...  \n91195  55.4925  55.545   NaN  \n91196  64.5000  60.000   NaN  \n91197  73.5000  77.500   NaN  \n91198  61.7200  61.250   NaN  \n91199      NaN     NaN   NaN  \n\n[91200 rows x 7 columns]\n\n\n\n\n\nMeasures of Dispersion\n\nRange\n\n#dropping uneeded columns\ndf_unneeded = df_cleaned.drop(columns=['country', 'City', 'lat', 'lon', 'Region', 'Province', 'Date', 'month'])\n\n# Reshaping from wide to long format (including year and month as part of the identifier)\ndf_melted = df_unneeded.melt(id_vars=['year'], var_name='Food_Items', value_name='Price')\n\ngrouped_range = df_melted.groupby(['Food_Items', 'year'])\nrange_df = grouped_range['Price'].agg(lambda x: x.max() - x.min()).reset_index()\nrange_df.rename(columns={'Price': 'Range'}, inplace=True)\n\n\n# Save cleaned data to a CSV file\nrange_df.to_csv(\"range_results.csv\", index=False)\n\n\n\nVariance and Standard Deviation\n\ndispersion_df = grouped['Price'].agg(['var', 'std']).reset_index()\ndispersion_df.rename(columns={'var': 'Variance', 'std': 'Standard Deviation'}, inplace=True)\n\n\n\nInterquartile Range\n\ndef compute_iqr(series):\n    q1 = series.quantile(0.25)\n    q3 = series.quantile(0.75)\n    return q3 - q1\n\niqr_df = grouped['Price'].agg(compute_iqr).reset_index()\niqr_df.rename(columns={'Price': 'IQR'}, inplace=True)\n\n\n\ncombine all into one DataFrame\n\ndispersion_merge_df = pd.merge(central_tendency, dispersion_df, on=['Region', 'Province', 'Food_Items', 'year'])\nfinal_eda_df = pd.merge(dispersion_merge_df, iqr_df, on=['Region', 'Province', 'Food_Items', 'year'])\n\n\nprint(final_eda_df)\n\n                                     Region         Province Food_Items  year  \\\n0      Autonomous region in Muslim Mindanao          Basilan      beans  2007   \n1      Autonomous region in Muslim Mindanao          Basilan      beans  2008   \n2      Autonomous region in Muslim Mindanao          Basilan      beans  2009   \n3      Autonomous region in Muslim Mindanao          Basilan      beans  2010   \n4      Autonomous region in Muslim Mindanao          Basilan      beans  2011   \n...                                     ...              ...        ...   ...   \n91195                           Region XIII  Surigao del Sur   tomatoes  2021   \n91196                           Region XIII  Surigao del Sur   tomatoes  2022   \n91197                           Region XIII  Surigao del Sur   tomatoes  2023   \n91198                           Region XIII  Surigao del Sur   tomatoes  2024   \n91199                           Region XIII  Surigao del Sur   tomatoes  2025   \n\n          mean  median  Mode    Variance  Standard Deviation      IQR  \n0          NaN     NaN   NaN         NaN                 NaN      NaN  \n1          NaN     NaN   NaN         NaN                 NaN      NaN  \n2          NaN     NaN   NaN         NaN                 NaN      NaN  \n3          NaN     NaN   NaN         NaN                 NaN      NaN  \n4          NaN     NaN   NaN         NaN                 NaN      NaN  \n...        ...     ...   ...         ...                 ...      ...  \n91195  55.4925  55.545   NaN  112.334092           10.598778  15.7225  \n91196  64.5000  60.000   NaN   73.906250            8.596874   8.7500  \n91197  73.5000  77.500   NaN  202.656250           14.235738  17.5000  \n91198  61.7200  61.250   NaN  183.125267           13.532378  20.1550  \n91199      NaN     NaN   NaN         NaN                 NaN      NaN  \n\n[91200 rows x 10 columns]\n\n\n\n# Save cleaned data to a CSV file\nfinal_eda_df.to_csv(\"eda_results.csv\", index=False)\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "Philippine_food_price_Analysis_and_Visualization/Data/External/updater.html",
    "href": "Philippine_food_price_Analysis_and_Visualization/Data/External/updater.html",
    "title": "N. V. Decio",
    "section": "",
    "text": "import pandas as pd\nimport requests\n\n\ncsv_file = 'full_dataset.csv'\njson_url = 'https://microdata.worldbank.org/index.php/api/tables/data/fcv/wld_2021_rtfp_v02_m'\nlimit = 99\ncountry = 'Philippines'\n\n\ndef update_csv_from_json(csv_file, json_url, limit, country):\n    # Load CSV data\n    try:\n        df_csv = pd.read_csv(csv_file)\n    except FileNotFoundError:\n        print(f\"CSV file '{csv_file}' not found.\")\n        return\n\n    # Calculate offset (based on the current length of the CSV)\n    offset = len(df_csv)\n    \n    # Fetch new JSON data from the web using offset and limit\n    try:\n        response = requests.get(json_url, params={'limit': limit, 'offset': offset, 'country': country})\n        response.raise_for_status()  # Check if the request was successful\n        json_data = response.json()\n    except requests.exceptions.RequestException as e:\n        print(f\"Error fetching JSON data: {e}\")\n        return\n    \n    # Extract the metadata and data from the JSON response\n    found = json_data.get('metadata', {}).get('found', 0)\n    data = json_data.get('data', [])\n\n    # Check if there is new data to add\n    if len(data) &gt; 0:\n        df_json = pd.json_normalize(data)\n        df_csv = pd.concat([df_csv, df_json], ignore_index=True)\n\n        # Save updated CSV file\n        df_csv.to_csv(csv_file, index=False)\n        print(f\"CSV file updated with {len(df_json)} new rows. Total records: {found}\")\n    else:\n        print(\"No new data to add.\")\n\n\nupdate_csv_from_json(csv_file, json_url, limit, country)\n\nNo new data to add.\n\n\n\ndf_csv = pd.read_csv(csv_file)\nprint(len(df_csv))\n\n23653\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "Investigating Netflix Movies/notebook.html",
    "href": "Investigating Netflix Movies/notebook.html",
    "title": "Netflix Movies Investigation",
    "section": "",
    "text": "Code\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom itables import init_notebook_mode\n\n\n\n\n\nMovie popcorn on red background\n\n\nNetflix! What started in 1997 as a DVD rental service has since exploded into one of the largest entertainment and media companies.\nGiven the large number of movies and series available on the platform, It’s a perfect opportunity for me to flex my exploratory data analysis skills and dive into the entertainment industry. I’ve also been brushing up on my Python skills and have taken an initial look at a CSV file containing Netflix data. I believe that the average duration of movies has been declining. Using my initial research, I’ll delve into the Netflix data to determine whether movie lengths are actually getting shorter and explain some of the contributing factors, if any.\nThis dataset netflix_data.csv , has the following table detailing the column names and descriptions:\n\nThe data\n\nnetflix_data.csv\n\n\n\nColumn\nDescription\n\n\n\n\nshow_id\nThe ID of the show\n\n\ntype\nType of show\n\n\ntitle\nTitle of the show\n\n\ndirector\nDirector of the show\n\n\ncast\nCast of the show\n\n\ncountry\nCountry of origin\n\n\ndate_added\nDate added to Netflix\n\n\nrelease_year\nYear of Netflix release\n\n\nduration\nDuration of the show in minutes\n\n\ndescription\nDescription of the show\n\n\ngenre\nShow genre\n\n\n\n\n\n\nData Overview\n\n\nCode\ninit_notebook_mode(all_interactive=True)\n\n\n\n\n\n\n\n\n\n\n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\nThis is the init_notebook_mode cell from ITables v2.2.4\n(you should not see this message - is your notebook trusted?)\n\n\n\n\n\n\nCode\nnetflix_df = pd.read_csv(\"netflix_data.csv\")\n\n\n\n\nCode\nnetflix_df.head(5)\n\n\n\n\n    \n      \n      show_id\n      type\n      title\n      director\n      cast\n      country\n      date_added\n      release_year\n      duration\n      description\n      genre\n    \n  \n\n\n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\nLoading ITables v2.2.4 from the init_notebook_mode cell...\n(need help?)\n\n\n\n\n\n\n\nCode\nnetflix_df.tail(5)\n\n\n\n\n    \n      \n      show_id\n      type\n      title\n      director\n      cast\n      country\n      date_added\n      release_year\n      duration\n      description\n      genre\n    \n  \n\n\n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\nLoading ITables v2.2.4 from the init_notebook_mode cell...\n(need help?)\n\n\n\n\n\n\n\nCode\nnetflix_df.info()\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 7787 entries, 0 to 7786\nData columns (total 11 columns):\n #   Column        Non-Null Count  Dtype \n---  ------        --------------  ----- \n 0   show_id       7787 non-null   object\n 1   type          7787 non-null   object\n 2   title         7787 non-null   object\n 3   director      5398 non-null   object\n 4   cast          7069 non-null   object\n 5   country       7280 non-null   object\n 6   date_added    7777 non-null   object\n 7   release_year  7787 non-null   int64 \n 8   duration      7787 non-null   int64 \n 9   description   7787 non-null   object\n 10  genre         7787 non-null   object\ndtypes: int64(2), object(9)\nmemory usage: 669.3+ KB\n\n\n\n\nCode\nnetflix_df.describe()\n\n\n\n\n    \n      \n      release_year\n      duration\n    \n  \n\n\n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\nLoading ITables v2.2.4 from the init_notebook_mode cell...\n(need help?)\n\n\n\n\n\n\n\nCode\nnetflix_df.shape\n\n\n(7787, 11)\n\n\n\n\nCode\nnetflix_df['release_year'].agg(['min', 'max'])\n\n\n\n\n    \n      \n      release_year\n    \n  \n\n\n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\nLoading ITables v2.2.4 from the init_notebook_mode cell...\n(need help?)\n\n\n\n\n\n\n\nCode\ndata_null=netflix_df.isna().sum()\ndata_null[data_null&gt;0]\n\n\n\n\n    \n      \n      0\n    \n  \n\n\n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\nLoading ITables v2.2.4 from the init_notebook_mode cell...\n(need help?)\n\n\n\n\n\n\n\nCode\nnull_percent=round(netflix_df.isna().sum()/netflix_df.shape[0]*100, 2)\nnull_percent[null_percent&gt;0]\n\n\n\n\n\n    \n      \n      0\n    \n  \n\n\n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\nLoading ITables v2.2.4 from the init_notebook_mode cell...\n(need help?)\n\n\n\n\n\ndirector: 30.68% are missing in the “director” column. This may be due to tv show and movies having more than one director or maybe multiple directors are not defined clearly in this dataset. cast: 9.22% are missing. This could be due to shows and movies not listing all cast members or maybe the cast have limited role. country: 6.51% of the entries in this column are missing, indicating that some tv shows and movie are produced multinationally, making country assignment difficult. date_added: 0.13% are missing. Missing dates might occur if the data was scraped before the official release or if it pertains to older content.\n\n\nCode\n# filter data to remove movies\nserials_count = (netflix_df[\"type\"] == \"TV Show\").sum()\nmovies_count = (netflix_df[\"type\"] == \"Movie\").sum()\n\nprint(f\"Serials: {serials_count}, Movies: {movies_count}\")\n\n\nSerials: 2410, Movies: 5377\n\n\n\n\nCode\nserials_percent = serials_count / (serials_count + movies_count) * 100\nmovies_percent = movies_count / (serials_count + movies_count) * 100\n\nprint(f\"Serials: {serials_percent:.2f}%, Movies: {movies_percent:.2f}%\")\n\n\nSerials: 30.95%, Movies: 69.05%\n\n\n\nData breakdown\nTotal TV Shows : 2,410 Total Movies : 5,377 Total Entries: 7,787\nPercentage:\nTV Shows: 30.95% Movies: 69.05%\n\nThis indicates that nearly 70% of Netflix content consists of movies, while TV shows account for about 30%.\n\n\nInterpretation\n\nNetflix’s catalog appears to be movie-heavy, with more than twice as many movies as TV shows. This suggests that Netflix may prioritize standalone films over long-running TV shows. This will be made more clear if Netflix user preference can be analyzed.\n\n\nCode\n# filter data to remove tv shows\nnetflix_subset = netflix_df[netflix_df[\"type\"] == \"Movie\"]\n# selecting only the column of interest about netflix movie data\nnetflix_movies = netflix_subset[[\"title\", \"country\", \"genre\", \"release_year\", \"duration\"]]\n# filter for movie durations shorter than 60 minutes\nshort_movies = netflix_movies[netflix_movies.duration &lt; 60]\n\n# Define genre-to-color mapping\ncolor_map = {\n    \"Children\": \"red\",\n    \"Documentaries\": \"green\",\n    \"Stand-Up\": \"yellow\"\n}\n\n# Assign colors based on genre using .map()\ncolors = netflix_movies[\"genre\"].map(color_map).fillna(\"black\") \n\n# Plot\nplt.style.use('default')\nfig, ax = plt.subplots(figsize=(10,6))\nax.scatter(netflix_movies.release_year, netflix_movies.duration, c=colors, alpha=0.7)\n\n# Labels and title\nax.set_title(\"Movie Duration by Year of Release\")\nax.set_xlabel(\"Release Year\")\nax.set_ylabel(\"Duration (min)\")\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\nAre we certain that movies are getting shorter?\nanswer = “maybe”\n\n\n\n\n Back to top"
  },
  {
    "objectID": "DataCamp data analyst asociate practical exam/DA_Assoc_Practical_Exam.html",
    "href": "DataCamp data analyst asociate practical exam/DA_Assoc_Practical_Exam.html",
    "title": "Practical Exam: Grocery Store Sales",
    "section": "",
    "text": "FoodYum is a grocery store chain that is based in the United States.\nFood Yum sells items such as produce, meat, dairy, baked goods, snacks, and other household food staples.\nAs food costs rise, FoodYum wants to make sure it keeps stocking products in all categories that cover a range of prices to ensure they have stock for a broad range of customers."
  },
  {
    "objectID": "DataCamp data analyst asociate practical exam/DA_Assoc_Practical_Exam.html#data",
    "href": "DataCamp data analyst asociate practical exam/DA_Assoc_Practical_Exam.html#data",
    "title": "Practical Exam: Grocery Store Sales",
    "section": "Data",
    "text": "Data\nThe data is available in the table products.\nThe dataset contains records of customers for their last full year of the loyalty program.\n\n\n\n\n\n\n\nColumn Name\nCriteria\n\n\n\n\nproduct_id\nNominal. The unique identifier of the product. Missing values are not possible due to the database structure.\n\n\nproduct_type\nNominal. The product category type of the product, one of 5 values (Produce, Meat, Dairy, Bakery, Snacks). Missing values should be replaced with “Unknown”.\n\n\nbrand\nNominal. The brand of the product. One of 7 possible values. Missing values should be replaced with “Unknown”.\n\n\nweight\nContinuous. The weight of the product in grams. This can be any positive value, rounded to 2 decimal places. Missing values should be replaced with the overall median weight.\n\n\nprice\nContinuous. The price the product is sold at, in US dollars. This can be any positive value, rounded to 2 decimal places. Missing values should be replaced with the overall median price.\n\n\naverage_units_sold\nDiscrete. The average number of units sold each month. This can be any positive integer value. Missing values should be replaced with 0.\n\n\nyear_added\nNominal. The year the product was first added to FoodYum stock.Missing values should be replaced with 2022.\n\n\nstock_location\nNominal. The location that stock originates. This can be one of four warehouse locations, A, B, C or D Missing values should be replaced with “Unknown”."
  },
  {
    "objectID": "Analyzing Motorcycle parts sale/notebook.html",
    "href": "Analyzing Motorcycle parts sale/notebook.html",
    "title": "N. V. Decio",
    "section": "",
    "text": "Parked motorcycle\nYou’re working for a company that sells motorcycle parts, and they’ve asked for some help in analyzing their sales data!\nThey operate three warehouses in the area, selling both retail and wholesale. They offer a variety of parts and accept credit cards, cash, and bank transfer as payment methods. However, each payment type incurs a different fee.\nThe board of directors wants to gain a better understanding of wholesale revenue by product line, and how this varies month-to-month and across warehouses. You have been tasked with calculating net revenue for each product line and grouping results by month and warehouse. The results should be filtered so that only \"Wholesale\" orders are included.\nThey have provided you with access to their database, which contains the following table called sales:"
  },
  {
    "objectID": "Analyzing Motorcycle parts sale/notebook.html#sales",
    "href": "Analyzing Motorcycle parts sale/notebook.html#sales",
    "title": "N. V. Decio",
    "section": "Sales",
    "text": "Sales\n\n\n\n\n\n\n\n\nColumn\nData type\nDescription\n\n\n\n\norder_number\nVARCHAR\nUnique order number.\n\n\ndate\nDATE\nDate of the order, from June to August 2021.\n\n\nwarehouse\nVARCHAR\nThe warehouse that the order was made from— North, Central, or West.\n\n\nclient_type\nVARCHAR\nWhether the order was Retail or Wholesale.\n\n\nproduct_line\nVARCHAR\nType of product ordered.\n\n\nquantity\nINT\nNumber of products ordered.\n\n\nunit_price\nFLOAT\nPrice per product (dollars).\n\n\ntotal\nFLOAT\nTotal price of the order (dollars).\n\n\npayment\nVARCHAR\nPayment method—Credit card, Transfer, or Cash.\n\n\npayment_fee\nFLOAT\nPercentage of total charged as a result of the payment method.\n\n\n\nYour query output should be presented in the following format:\n\n\n\n\n\n\n\n\n\nproduct_line\nmonth\nwarehouse\nnet_revenue\n\n\n\n\nproduct_one\n—\n—\n—\n\n\nproduct_one\n—\n—\n—\n\n\nproduct_one\n—\n—\n—\n\n\nproduct_one\n—\n—\n—\n\n\nproduct_one\n—\n—\n—\n\n\nproduct_one\n—\n—\n—\n\n\nproduct_two\n—\n—\n—\n\n\n…\n…\n…\n…\n\n\n\n::: {#ff58f388 .cell customType=‘sql’ dataFrameVariableName=‘revenue_by_product_line’ executionCancelledAt=‘null’ executionTime=‘842’ initial=‘false’ integrationId=‘89e17161-a224-4a8a-846b-0adc0fe7a4b1’ lastExecutedAt=‘1703148380931’ lastScheduledRunId=‘null’ lastSuccessfullyExecutedCode=’– Start coding here\nSELECT * FROM sales;’ execution_count=8}\nSELECT *\nFROM sales;\n\n\n\n\n\n\n\n\norder_number\ndate\nwarehouse\nclient_type\nproduct_line\nquantity\nunit_price\ntotal\npayment\npayment_fee\n\n\n\n\n0\nN1\n2021-06-01 00:00:00+00:00\nNorth\nRetail\nBreaking system\n9\n19.29\n173.61\nCash\n0.00\n\n\n1\nN2\n2021-06-01 00:00:00+00:00\nNorth\nRetail\nSuspension & traction\n8\n32.93\n263.45\nCredit card\n0.03\n\n\n2\nN3\n2021-06-01 00:00:00+00:00\nNorth\nWholesale\nFrame & body\n16\n37.84\n605.44\nTransfer\n0.01\n\n\n3\nN4\n2021-06-01 00:00:00+00:00\nNorth\nWholesale\nSuspension & traction\n40\n37.37\n1494.80\nTransfer\n0.01\n\n\n4\nN5\n2021-06-01 00:00:00+00:00\nNorth\nRetail\nFrame & body\n6\n45.44\n272.61\nCredit card\n0.03\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n995\nW176\n2021-08-27 00:00:00+00:00\nWest\nRetail\nElectrical system\n4\n21.47\n85.89\nCredit card\n0.03\n\n\n996\nW177\n2021-08-28 00:00:00+00:00\nWest\nWholesale\nMiscellaneous\n32\n25.42\n813.44\nTransfer\n0.01\n\n\n997\nW178\n2021-08-28 00:00:00+00:00\nWest\nRetail\nElectrical system\n6\n28.37\n170.21\nCredit card\n0.03\n\n\n998\nW179\n2021-08-28 00:00:00+00:00\nWest\nWholesale\nBreaking system\n32\n10.03\n320.96\nTransfer\n0.01\n\n\n999\nW180\n2021-08-28 00:00:00+00:00\nWest\nWholesale\nElectrical system\n12\n32.80\n393.64\nTransfer\n0.01\n\n\n\n\n1000 rows × 10 columns\n\n\n:::\n\nSELECT product_line,\n       CASE WHEN EXTRACT('month' from date) = 6 THEN 'June'\n       WHEN EXTRACT('month' from date) = 7 THEN 'July'\n       WHEN EXTRACT('month' from date) = 8 THEN 'August'\n       END AS month,\n       warehouse,\n       ROUND(SUM(total * (1 - payment_fee))::numeric, 2) AS net_revenue\nFROM sales\nWHERE client_type = 'Wholesale'\nGROUP BY product_line, warehouse, month\nORDER BY product_line ASC, month ASC, net_revenue DESC;\n\n\n\n\n\n\n\n\nproduct_line\nmonth\nwarehouse\nnet_revenue\n\n\n\n\n0\nBreaking system\nAugust\nCentral\n3009.10\n\n\n1\nBreaking system\nAugust\nWest\n2475.71\n\n\n2\nBreaking system\nAugust\nNorth\n1753.19\n\n\n3\nBreaking system\nJuly\nCentral\n3740.94\n\n\n4\nBreaking system\nJuly\nWest\n3030.39\n\n\n5\nBreaking system\nJuly\nNorth\n2568.55\n\n\n6\nBreaking system\nJune\nCentral\n3648.14\n\n\n7\nBreaking system\nJune\nNorth\n1472.93\n\n\n8\nBreaking system\nJune\nWest\n1200.64\n\n\n9\nElectrical system\nAugust\nNorth\n4673.99\n\n\n10\nElectrical system\nAugust\nCentral\n3095.22\n\n\n11\nElectrical system\nAugust\nWest\n1229.45\n\n\n12\nElectrical system\nJuly\nCentral\n5521.94\n\n\n13\nElectrical system\nJuly\nNorth\n1693.06\n\n\n14\nElectrical system\nJuly\nWest\n444.98\n\n\n15\nElectrical system\nJune\nCentral\n2875.93\n\n\n16\nElectrical system\nJune\nNorth\n2002.30\n\n\n17\nEngine\nAugust\nCentral\n9433.48\n\n\n18\nEngine\nAugust\nNorth\n2300.96\n\n\n19\nEngine\nJuly\nCentral\n1808.77\n\n\n20\nEngine\nJuly\nNorth\n997.08\n\n\n21\nEngine\nJune\nCentral\n6483.40\n\n\n22\nFrame & body\nAugust\nCentral\n8571.50\n\n\n23\nFrame & body\nAugust\nNorth\n7819.95\n\n\n24\nFrame & body\nAugust\nWest\n821.40\n\n\n25\nFrame & body\nJuly\nNorth\n6093.11\n\n\n26\nFrame & body\nJuly\nCentral\n3103.82\n\n\n27\nFrame & body\nJune\nCentral\n5060.29\n\n\n28\nFrame & body\nJune\nNorth\n4861.08\n\n\n29\nFrame & body\nJune\nWest\n2751.96\n\n\n30\nMiscellaneous\nAugust\nNorth\n1823.03\n\n\n31\nMiscellaneous\nAugust\nCentral\n1722.40\n\n\n32\nMiscellaneous\nAugust\nWest\n805.31\n\n\n33\nMiscellaneous\nJuly\nCentral\n3087.31\n\n\n34\nMiscellaneous\nJuly\nNorth\n2380.63\n\n\n35\nMiscellaneous\nJuly\nWest\n1145.26\n\n\n36\nMiscellaneous\nJune\nWest\n2258.20\n\n\n37\nMiscellaneous\nJune\nCentral\n1859.34\n\n\n38\nMiscellaneous\nJune\nNorth\n508.86\n\n\n39\nSuspension & traction\nAugust\nCentral\n5362.59\n\n\n40\nSuspension & traction\nAugust\nNorth\n4874.51\n\n\n41\nSuspension & traction\nAugust\nWest\n1069.99\n\n\n42\nSuspension & traction\nJuly\nCentral\n6392.23\n\n\n43\nSuspension & traction\nJuly\nNorth\n3677.21\n\n\n44\nSuspension & traction\nJuly\nWest\n2909.98\n\n\n45\nSuspension & traction\nJune\nNorth\n7985.17\n\n\n46\nSuspension & traction\nJune\nCentral\n3291.80\n\n\n47\nSuspension & traction\nJune\nWest\n2348.83"
  },
  {
    "objectID": "Analyzing Carbon Footprints/notebook.html",
    "href": "Analyzing Carbon Footprints/notebook.html",
    "title": "Analyzing Carbon Footprints in SQL",
    "section": "",
    "text": "Greenhouse gas emissions attributable to products—from food to sneakers to appliances—make up more than 75% of global emissions.\nCite: The Carbon Catalogue\nThe dataset, which is publicly availably on nature.com, stores product carbon footprints (PCFs) for various companies. PCFs are the greenhouse gas emissions attributable to a given product, measured in CO2e (carbon dioxide equivalent)."
  },
  {
    "objectID": "Analyzing Carbon Footprints/notebook.html#coca-colas-emissions",
    "href": "Analyzing Carbon Footprints/notebook.html#coca-colas-emissions",
    "title": "Analyzing Carbon Footprints in SQL",
    "section": "1: Coca-Cola’s emissions",
    "text": "1: Coca-Cola’s emissions\nFirst, let’s look at a small subset of the data: emissions reported by Coca-Cola. Coke is actually made up of multiple companies around the globe, so we’ll make sure our query returns data for any company name that starts with “Coca-Cola”. Coke used to report for every single different product it has, so we will limit the results to six.\n\nSelect all fields from the product_emissions table where the company name begins with “Coca-Cola”, limiting to the first six results.\n\n\n-- Select all fields where the company name is Coca-Cola, limiting to the first six results\nSELECT *\nFROM product_emissions\nWHERE company LIKE 'Coca-Cola%'\nLIMIT 6;\n\n\n\n\n\n\n\n\nid\nyear\nproduct_name\ncompany\ncountry\nindustry_group\nweight_kg\ncarbon_footprint_pcf\nupstream_percent_total_pcf\noperations_percent_total_pcf\ndownstream_percent_total_pcf\n\n\n\n\n0\n22710-1-2014\n2014\nCoca-Cola (all packaging and sizes)\nCoca-Cola HBC AG\nSwitzerland\nFood, Beverage & Tobacco\n1.093\n0.1673\n84.28%\n11.12%\n4.60%\n\n\n1\n22710-1-2015\n2015\nCoca-Cola (all packaging and sizes)\nCoca-Cola HBC AG\nSwitzerland\nFood & Beverage Processing\n1.093\n0.1580\n38.37%\n12.71%\n48.93%\n\n\n2\n22710-1-2016\n2016\nCoca-Cola (all packaging and sizes)\nCoca-Cola HBC AG\nSwitzerland\nFood, Beverage & Tobacco\n1.093\n0.1470\n42.17%\n10.98%\n46.85%\n\n\n3\n3565-10-2013\n2013\nCoke Zero 330 ml glass bottle\nCoca-Cola Enterprises, Inc.\nUSA\nFood, Beverage & Tobacco\n0.541\n0.3400\n73.95%\n3.42%\n22.63%\n\n\n4\n3565-11-2013\n2013\nCoke Zero 500ml PET\nCoca-Cola Enterprises, Inc.\nUSA\nFood, Beverage & Tobacco\n0.541\n0.2200\n52.09%\n12.32%\n35.59%\n\n\n5\n3565-1-2013\n2013\nCoca-Cola 300ml can\nCoca-Cola Enterprises, Inc.\nUSA\nFood, Beverage & Tobacco\n0.300\n0.1700\n69.76%\n7.00%\n23.24%\n\n\n\n\n\n\n\n\nA little background:\n\nUpstream emissions: emissions that occur before the company’s own operations such as emissions created by manufacturing bottles that Coke buys from suppliers\nOperations emissions: emissions that the company creates directly, such as when Coke is bottling its product\nDownstream emissions: emissions that occur after the product leaves the company, such as after Coke has sold drinks to McDonald’s"
  },
  {
    "objectID": "Analyzing Carbon Footprints/notebook.html#most-recent-data",
    "href": "Analyzing Carbon Footprints/notebook.html#most-recent-data",
    "title": "Analyzing Carbon Footprints in SQL",
    "section": "2: Most recent data",
    "text": "2: Most recent data\nWe’ll focus on recent emissions data during this code-along. When was the most recent data collected?\n\nReturn the most recent year for which data was collected.\n\n\n-- Return the most recent year for which data was collected\nSELECT MAX(year)\nFROM product_emissions;\n\n\n\n\n\n\n\n\nmax\n\n\n\n\n0\n2017"
  },
  {
    "objectID": "Analyzing Carbon Footprints/notebook.html#targeting-major-emitters",
    "href": "Analyzing Carbon Footprints/notebook.html#targeting-major-emitters",
    "title": "Analyzing Carbon Footprints in SQL",
    "section": "3: Targeting major emitters",
    "text": "3: Targeting major emitters\nWhat are the industries with the most emissions in 2017 (the most recent year that data is available)?\n\nReturn the industry_group and a rounded total of carbon_footprint_pcf for each industry, aliasing as total_industry_footprint.\nLimit to data for 2017 and order by total_industry_footprint.\n\n\n-- Return industry_group and a rounded total of carbon_footprint_pcf, aliased as total_industry_footprint\n-- Limit to data for 2017 and order by total_industry_footprint\nSELECT industry_group, ROUND(SUM(carbon_footprint_pcf), 2) AS total_industry_footprint\nFROM product_emissions\nWHERE year = 2017\nGROUP BY industry_group\nORDER BY SUM(carbon_footprint_pcf) DESC;\n\n\n\n\n\n\n\n\nindustry_group\ntotal_industry_footprint\n\n\n\n\n0\nMaterials\n107129.00\n\n\n1\nCapital Goods\n94942.67\n\n\n2\nTechnology Hardware & Equipment\n21865.09\n\n\n3\nFood, Beverage & Tobacco\n3161.47\n\n\n4\nCommercial & Professional Services\n740.60\n\n\n5\nSoftware & Services\n690.00"
  },
  {
    "objectID": "Analyzing Carbon Footprints/notebook.html#industry-representation",
    "href": "Analyzing Carbon Footprints/notebook.html#industry-representation",
    "title": "Analyzing Carbon Footprints in SQL",
    "section": "4: Industry representation",
    "text": "4: Industry representation\nIt looks like the Materials industry had a huge carbon footprint in 2017. But what if that’s just because there are many companies from the Materials industry in the dataset? Let’s check which industries are most heavily represented in that year.\n\nReturn each industry_group included in the table and a count of the number of records that list that industry group.\nLimit the results to only those from 2017 and lias the count as count_industry.\nOrder by count_industry, descending.\n\n\n-- Return the industry groups and a count of the number of records for each group\n-- Limit the results to only those from 2017 and alias the count as count_industry\n-- Order by count_industry, descending\nSELECT industry_group, COUNT(*) AS count_industry\nFROM public.product_emissions\nWHERE year = 2017\nGROUP BY industry_group\nORDER BY COUNT(industry_group) DESC;\n\n\n\n\n\n\n\n\nindustry_group\ncount_industry\n\n\n\n\n0\nTechnology Hardware & Equipment\n22\n\n\n1\nFood, Beverage & Tobacco\n22\n\n\n2\nMaterials\n11\n\n\n3\nCapital Goods\n4\n\n\n4\nCommercial & Professional Services\n2\n\n\n5\nSoftware & Services\n1"
  },
  {
    "objectID": "Analyzing Carbon Footprints/notebook.html#capital-goods-industry",
    "href": "Analyzing Carbon Footprints/notebook.html#capital-goods-industry",
    "title": "Analyzing Carbon Footprints in SQL",
    "section": "5: Capital Goods industry",
    "text": "5: Capital Goods industry\nWe can see that the Materials industry is the biggest emitter despite having less representation in our dataset than several other industries—yikes! The Capital Goods industry looks similar. Let’s explore the companies and products reporting for 2017 in the Capital Goods industry.\n\nReturn industry_group, company, and product_name for all records reporting in the Capital Goods industry during 2017.\n\n\n-- Return industry_group, company, and product_name for all records reporting in the Capital Goods industry during 2017\nSELECT industry_group, company, product_name\nFROM public.product_emissions\nWHERE industry_group = 'Capital Goods' \n    and year = 2017;\n\n\n\n\n\n\n\n\nindustry_group\ncompany\nproduct_name\n\n\n\n\n0\nCapital Goods\nMitsui Mining & Smelting Co., Ltd.\nZinc Oxide\n\n\n1\nCapital Goods\nDaikin Industries, Ltd.\nResidential Air Conditioner\n\n\n2\nCapital Goods\nDaikin Industries, Ltd.\nCommercial Air Conditioner\n\n\n3\nCapital Goods\nDaikin Industries, Ltd.\nLight commercial Air Conditioner"
  },
  {
    "objectID": "Analyzing Carbon Footprints/notebook.html#capital-goods-lifecycle-emissions",
    "href": "Analyzing Carbon Footprints/notebook.html#capital-goods-lifecycle-emissions",
    "title": "Analyzing Carbon Footprints in SQL",
    "section": "6: Capital Goods lifecycle emissions",
    "text": "6: Capital Goods lifecycle emissions\nDaikin is an air conditioning and refrigeration manufacturer. Let’s look at emissions throughout the life cycle of Daikin products. Can you guess whether most emissions are upstream, downstream, or during operations?\n\nReturn product_name, company, upstream_percent_total_pcf, operations_percent_total_pcf, and downstream_percent_total_pcf for Daikin Industries, Ltd. in 2017.\n\n\n-- Return product_name, company, and all stages of pcf emissions for Daikin in 2017\nSELECT product_name, \n    company,\n    upstream_percent_total_pcf, \n    operations_percent_total_pcf, \n    downstream_percent_total_pcf\nFROM public.product_emissions\nWHERE year = 2017\n    and company = 'Daikin Industries, Ltd.'\n\n\n\n\n\n\n\n\nproduct_name\ncompany\nupstream_percent_total_pcf\noperations_percent_total_pcf\ndownstream_percent_total_pcf\n\n\n\n\n0\nResidential Air Conditioner\nDaikin Industries, Ltd.\n3.96%\n0.55%\n95.50%\n\n\n1\nCommercial Air Conditioner\nDaikin Industries, Ltd.\n0.98%\n0.13%\n98.88%\n\n\n2\nLight commercial Air Conditioner\nDaikin Industries, Ltd.\n0.70%\n0.10%\n99.21%"
  },
  {
    "objectID": "Analyzing Carbon Footprints/notebook.html#exploring-visually-with-plotly-express",
    "href": "Analyzing Carbon Footprints/notebook.html#exploring-visually-with-plotly-express",
    "title": "Analyzing Carbon Footprints in SQL",
    "section": "Exploring visually with plotly express",
    "text": "Exploring visually with plotly express\nLet’s do some quick visualizations with plotly.express, a free an open-source graphing library. We don’t assume any knowledge of plotly on your part!\n\n# Import the plotly express package\nimport plotly.express as px"
  },
  {
    "objectID": "Analyzing Carbon Footprints/notebook.html#country-representation",
    "href": "Analyzing Carbon Footprints/notebook.html#country-representation",
    "title": "Analyzing Carbon Footprints in SQL",
    "section": "7: Country representation",
    "text": "7: Country representation\nLet’s take a look at emissions by country. You may have noticed that each time we run a query, the query results are available as df. So if we were to select all information from product_emissions, that would create a DataFrame called df that we can use in a plotly visualization! Let’s try it.\n\nSelect all information from product_emissions.\n\n\n-- Select all information from product_emissions\nSELECT *\nFROM product_emissions;\n\n\n\n\n\n\n\n\nid\nyear\nproduct_name\ncompany\ncountry\nindustry_group\nweight_kg\ncarbon_footprint_pcf\nupstream_percent_total_pcf\noperations_percent_total_pcf\ndownstream_percent_total_pcf\n\n\n\n\n0\n10056-1-2014\n2014\nFrosted Flakes(R) Cereal\nKellogg Company\nUSA\nFood, Beverage & Tobacco\n0.748500\n2.00\n57.50%\n30.00%\n12.50%\n\n\n1\n10056-1-2015\n2015\nFrosted Flakes, 23 oz, produced in Lancaster, ...\nKellogg Company\nUSA\nFood & Beverage Processing\n0.748500\n2.00\n57.50%\n30.00%\n12.50%\n\n\n2\n10222-1-2013\n2013\nOffice Chair\nKNOLL INC\nUSA\nCapital Goods\n20.680000\n72.54\n80.63%\n17.36%\n2.01%\n\n\n3\n10261-1-2017\n2017\nMultifunction Printers\nKonica Minolta, Inc.\nJapan\nTechnology Hardware & Equipment\n110.000000\n1488.00\n30.65%\n5.51%\n63.84%\n\n\n4\n10261-2-2017\n2017\nMultifunction Printers\nKonica Minolta, Inc.\nJapan\nTechnology Hardware & Equipment\n110.000000\n1818.00\n25.08%\n4.51%\n70.41%\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n861\n9298-2-2014\n2014\nDesktop CPU\nIntel Corporation\nUSA\nSemiconductors & Semiconductor Equipment\n0.408233\n14.00\n32.14%\n54.29%\n13.57%\n\n\n862\n9298-3-2013\n2013\nMobile CPU\nIntel Corporation\nUSA\nTechnology Hardware & Equipment\n0.408233\n7.00\n28.57%\n71.43%\n0.00%\n\n\n863\n9298-3-2014\n2014\nMobile CPU\nIntel Corporation\nUSA\nSemiconductors & Semiconductor Equipment\n0.408233\n7.00\n31.43%\n54.29%\n14.29%\n\n\n864\n9792-1-2017\n2017\nComplete catalyst system for diesel-powered pa...\nJohnson Matthey\nUnited Kingdom\nMaterials\n2.000000\n188.00\nN/a (product with insufficient stage-level data)\nN/a (product with insufficient stage-level data)\nN/a (product with insufficient stage-level data)\n\n\n865\n9792-2-2017\n2017\nThree-way Catalyst for gasoline-powered passen...\nJohnson Matthey\nUnited Kingdom\nMaterials\n2.000000\n63.00\nN/a (product with insufficient stage-level data)\nN/a (product with insufficient stage-level data)\nN/a (product with insufficient stage-level data)\n\n\n\n\n866 rows × 11 columns\n\n\n\nLet’s look at country representation in our dataset by creating a bar chart using the country column of df.\n\nCreate a plotly bar chart of the country distribution for companies in our dataset.\n\n\n# Create a plotly bar chart of the country distribution for companies in our dataset\npx.bar(product_emission_df, x=\"country\")\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json"
  },
  {
    "objectID": "Analyzing Carbon Footprints/notebook.html#emissions-by-country",
    "href": "Analyzing Carbon Footprints/notebook.html#emissions-by-country",
    "title": "Analyzing Carbon Footprints in SQL",
    "section": "8: Emissions by country",
    "text": "8: Emissions by country\nHow does this compare to the emissions of companies reporting from each country?\n\nFirst, get the results of interest using SQL: grouping by country, select country and the sum of total carbon_footprint_pcf by country, aliasing as total_country_footprint.\n\n\n-- Group by country\n-- Select country and the sum of total carbon_footprint_pcf by country, aliasing as total_country_footprint\nSELECT country, SUM(carbon_footprint_pcf) AS total_country_footprint\nFROM product_emissions\nGROUP BY country;\n\n\n\n\n\n\n\n\ncountry\ntotal_country_footprint\n\n\n\n\n0\nIndonesia\n7.210000e+02\n\n\n1\nSwitzerland\n1.406263e+02\n\n\n2\nItaly\n1.940500e+01\n\n\n3\nChina\n1.425430e+02\n\n\n4\nLuxembourg\n1.670073e+05\n\n\n5\nSweden\n4.533010e+03\n\n\n6\nUSA\n4.518692e+05\n\n\n7\nUnited Kingdom\n6.735140e+03\n\n\n8\nNetherlands\n7.041534e+04\n\n\n9\nBrazil\n1.675877e+05\n\n\n10\nAustralia\n2.384670e+02\n\n\n11\nGermany\n2.251225e+06\n\n\n12\nIreland\n5.130000e+03\n\n\n13\nCanada\n3.822000e+02\n\n\n14\nFinland\n2.158100e+04\n\n\n15\nSouth Korea\n1.409941e+05\n\n\n16\nColombia\n8.300000e-04\n\n\n17\nLithuania\n1.080000e-02\n\n\n18\nSpain\n9.786126e+06\n\n\n19\nGreece\n7.000000e-01\n\n\n20\nIndia\n2.457400e+04\n\n\n21\nBelgium\n9.400000e+00\n\n\n22\nChile\n1.555600e+03\n\n\n23\nFrance\n1.613803e+03\n\n\n24\nSouth Africa\n1.231090e+04\n\n\n25\nMalaysia\n2.336700e+02\n\n\n26\nTaiwan\n6.151307e+04\n\n\n27\nJapan\n5.193443e+05\n\n\n\n\n\n\n\n\nCreate a plotly bar plot of the emissions by country in our dataset.\n\n\n# Create a plotly bar plot of the emissions by country in our dataset\npx.bar(df, x=\"country\", y=\"total_country_footprint\")\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json"
  },
  {
    "objectID": "Analyzing Carbon Footprints/notebook.html#does-the-graph-above-make-sense",
    "href": "Analyzing Carbon Footprints/notebook.html#does-the-graph-above-make-sense",
    "title": "Analyzing Carbon Footprints in SQL",
    "section": "9: Does the graph above make sense?",
    "text": "9: Does the graph above make sense?\nWow! Spain has a lot of emissions! Where do they come from? To finish our exploration together, let’s take a quick look at the underlying data as a gut-check.\n\nIn SQL, select company and carbon_footprint_pcf for companies in Spain.\n\n\n-- Select company and carbon_footprint_pcf for companies in Spain\nSELECT company, carbon_footprint_pcf\nFROM public.product_emissions\nWHERE country = 'Spain';\n\n\n\n\n\n\n\n\ncompany\ncarbon_footprint_pcf\n\n\n\n\n0\nMiquel Y Costas\n3.00\n\n\n1\nGamesa Corporación Tecnológica, S.A.\n1251625.00\n\n\n2\nGamesa Corporación Tecnológica, S.A.\n1532608.00\n\n\n3\nGamesa Corporación Tecnológica, S.A.\n3718044.00\n\n\n4\nGamesa Corporación Tecnológica, S.A.\n3276187.00\n\n\n5\nCompañía Española de Petróleos, S.A.U. CEPSA\n6109.00\n\n\n6\nCompañía Española de Petróleos, S.A.U. CEPSA\n890.00\n\n\n7\nCrimidesa\n180.00\n\n\n8\nCrimidesa\n140.00\n\n\n9\nAgraz\n155.71\n\n\n10\nAgraz\n12.52\n\n\n11\nAgraz\n155.78\n\n\n12\nAgraz\n16.22\n\n\n\n\n\n\n\nGamesa Corporación Tecnológica is actually a renewable energy company specializing in wind power! Why might it have such high emissions? Discovering these twists in the data is very important before real analysis can begin. I hope you continue exploring this data on your own!"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "Neil Vince Decio is a PRC Registered Chemist and currently learning Data Science/Data Analysis. When not innovating on data platforms, Neil enjoys spending time reading books and novel, watching tv shows and movies, learning new language, and playing games."
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "About Me",
    "section": "Education",
    "text": "Education\nPolytechnic University of the Philippines, Sta. Mesa | Manila, Metro Manila\nBS in Chemistry | June 2010 - April 2014"
  },
  {
    "objectID": "about.html#experience",
    "href": "about.html#experience",
    "title": "About Me",
    "section": "Experience",
    "text": "Experience\nCavite State University | Instructor I | Jan 2019 - June 2021\nDOST-ITDI-Material Science Division | Research Assistant II | Feb 2017 - Sept. 2017\nEBAR Abstracting Company Inc | Information Analyst | Jan 2015 - Mar 2016"
  },
  {
    "objectID": "Analyze International Debt Statistics/notebook.html",
    "href": "Analyze International Debt Statistics/notebook.html",
    "title": "international Debt Statistics Analysis",
    "section": "",
    "text": "Code\nimport pandas as pd\nimport sqlite3\nimport sql\nfrom itables import init_notebook_mode\nIn this notebook, I am analyzing international debt data collected by The World Bank. The dataset contains information about the amount of debt (in USD) owed by developing countries across several categories. I am going to find the answers to questions like:\nBelow is a snapshot of the database you will be working with:\nYou will execute SQL queries to answer six questions, as listed in the instructions."
  },
  {
    "objectID": "Analyze International Debt Statistics/notebook.html#data-overview",
    "href": "Analyze International Debt Statistics/notebook.html#data-overview",
    "title": "international Debt Statistics Analysis",
    "section": "Data Overview",
    "text": "Data Overview\n\n\nCode\ninit_notebook_mode(all_interactive=True)\n\n\n\n\n\n\n\n\n\n\n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\nThis is the init_notebook_mode cell from ITables v2.2.4\n(you should not see this message - is your notebook trusted?)\n\n\n\n\n\n\nCode\ndf = pd.read_csv(\"international_debt.csv\") \n\n\n\n\nCode\nconn = sqlite3.connect(\":memory:\")\n\n\n\n\nCode\ndf.to_sql(\"inter_debt\", conn, index=False, if_exists=\"replace\") \n\n\n2357\n\n\n\n\nCode\n# Load the SQL extension\n%load_ext sql\n\n# Register the existing in-memory SQLite connection in jupysql\n\n%sql conn --alias inter_debttable\n\n\n\n\nCode\n%%sql\nSELECT *\nFROM inter_debt\n\n\nRunning query in 'inter_debttable'\n\n\n\n\n\ncountry_name\ncountry_code\nindicator_name\nindicator_code\ndebt\n\n\n\n\nAfghanistan\nAFG\n\"Disbursements on external debt, long-term (DIS, current US$)\"\nDT.DIS.DLXF.CD\n72894453.7\n\n\nAfghanistan\nAFG\n\"Interest payments on external debt, long-term (INT, current US$)\"\nDT.INT.DLXF.CD\n53239440.1\n\n\nAfghanistan\nAFG\n\"PPG, bilateral (AMT, current US$)\"\nDT.AMT.BLAT.CD\n61739336.9\n\n\nAfghanistan\nAFG\n\"PPG, bilateral (DIS, current US$)\"\nDT.DIS.BLAT.CD\n49114729.4\n\n\nAfghanistan\nAFG\n\"PPG, bilateral (INT, current US$)\"\nDT.INT.BLAT.CD\n39903620.1\n\n\nAfghanistan\nAFG\n\"PPG, multilateral (AMT, current US$)\"\nDT.AMT.MLAT.CD\n39107845.0\n\n\nAfghanistan\nAFG\n\"PPG, multilateral (DIS, current US$)\"\nDT.DIS.MLAT.CD\n23779724.3\n\n\nAfghanistan\nAFG\n\"PPG, multilateral (INT, current US$)\"\nDT.INT.MLAT.CD\n13335820.0\n\n\nAfghanistan\nAFG\n\"PPG, official creditors (AMT, current US$)\"\nDT.AMT.OFFT.CD\n100847181.9\n\n\nAfghanistan\nAFG\n\"PPG, official creditors (DIS, current US$)\"\nDT.DIS.OFFT.CD\n72894453.7\n\n\n\n\nTruncated to displaylimit of 10."
  },
  {
    "objectID": "Analyze International Debt Statistics/notebook.html#what-is-the-total-amount-of-debt-that-is-owed-by-the-countries-listed-in-the-dataset",
    "href": "Analyze International Debt Statistics/notebook.html#what-is-the-total-amount-of-debt-that-is-owed-by-the-countries-listed-in-the-dataset",
    "title": "international Debt Statistics Analysis",
    "section": "What is the total amount of debt that is owed by the countries listed in the dataset?",
    "text": "What is the total amount of debt that is owed by the countries listed in the dataset?\n\n\nCode\n%%sql\nSELECT COUNT(DISTINCT country_name) AS total_distinct_countries \nFROM inter_debt\n\n\nRunning query in 'inter_debttable'\n\n\n\n\n\ntotal_distinct_countries\n\n\n\n\n124\n\n\n\n\n\n\n\nCode\n%%sql\nSELECT DISTINCT indicator_name AS distinct_debt_indicators \nFROM inter_debt\n\n\nRunning query in 'inter_debttable'\n\n\n\n\n\ndistinct_debt_indicators\n\n\n\n\n\"Disbursements on external debt, long-term (DIS, current US$)\"\n\n\n\"Interest payments on external debt, long-term (INT, current US$)\"\n\n\n\"PPG, bilateral (AMT, current US$)\"\n\n\n\"PPG, bilateral (DIS, current US$)\"\n\n\n\"PPG, bilateral (INT, current US$)\"\n\n\n\"PPG, multilateral (AMT, current US$)\"\n\n\n\"PPG, multilateral (DIS, current US$)\"\n\n\n\"PPG, multilateral (INT, current US$)\"\n\n\n\"PPG, official creditors (AMT, current US$)\"\n\n\n\"PPG, official creditors (DIS, current US$)\"\n\n\n\n\nTruncated to displaylimit of 10.\n\n\nMeaning of every indicators:\nDisbursements on External Debt, Long-Term (DIS, current US\\()**: measures the flow of newly issued long-term debt in a given time period.&lt;br&gt;\n**Interest Payments on External Debt, Long-Term (INT, current US\\)): represents the cost of borrowing (interest paid) on long-term external debt. PPG, Bilateral (AMT, current US\\()**: The total amount of government or government-guaranteed debt owed to foreign governments.&lt;br&gt;\n**PPG, Bilateral (DIS, current US\\)): The total amount of new bilateral loans disbursed. PPG, Bilateral (INT, current US\\()**: The cost of interest payments on government or government-guaranteed bilateral loans.&lt;br&gt;\n**PPG, Multilateral (AMT, current US\\)): The total outstanding amount of government or government-guaranteed loans from international organizations. PPG, Multilateral (DIS, current US\\()**: The new disbursements (issuances) of multilateral loans.&lt;br&gt;\n**PPG, Multilateral (INT, current US\\)): The amount of interest paid on multilateral loans. PPG, Official Creditors (AMT, current US\\()**: The total outstanding debt owed to official creditors.&lt;br&gt;\n**PPG, Official Creditors (DIS, current US\\)): The new disbursements of loans from official creditors.\n\n\nCode\n%%sql \nSELECT ROUND(SUM(debt)/1000000, 2) AS total_debt \nFROM inter_debt\n\n\nRunning query in 'inter_debttable'\n\n\n\n\n\ntotal_debt\n\n\n\n\n3079734.49\n\n\n\n\n\nthe total debt is about 30,797,934.49 million US dollars."
  },
  {
    "objectID": "Analyze International Debt Statistics/notebook.html#which-country-owns-the-maximum-amount-of-debt-and-what-does-that-amount-look-like",
    "href": "Analyze International Debt Statistics/notebook.html#which-country-owns-the-maximum-amount-of-debt-and-what-does-that-amount-look-like",
    "title": "international Debt Statistics Analysis",
    "section": "Which country owns the maximum amount of debt and what does that amount look like?",
    "text": "Which country owns the maximum amount of debt and what does that amount look like?\n\n\nCode\n%%sql \nSELECT country_name, SUM(debt) AS total_debt \nFROM inter_debt \nGROUP BY country_name \nORDER BY SUM(debt) DESC \nLIMIT 1\n\n\nRunning query in 'inter_debttable'\n\n\n\n\n\ncountry_name\ntotal_debt\n\n\n\n\nChina\n285793494734.2\n\n\n\n\n\nChina owns the maximum amount of debt, approximately 285.8 billion US dollars. This large debt maybe is the result of rapid economic expansion, aggressive lending, and government-led development policies."
  },
  {
    "objectID": "Analyze International Debt Statistics/notebook.html#what-is-the-average-amount-of-debt-owed-by-countries-across-different-debt-indicators",
    "href": "Analyze International Debt Statistics/notebook.html#what-is-the-average-amount-of-debt-owed-by-countries-across-different-debt-indicators",
    "title": "international Debt Statistics Analysis",
    "section": "What is the average amount of debt owed by countries across different debt indicators?",
    "text": "What is the average amount of debt owed by countries across different debt indicators?\n\n\nCode\n%%sql \nSELECT indicator_code AS debt_indicator, indicator_name, AVG(debt) AS average_debt \nFROM inter_debt \nGROUP BY debt_indicator, indicator_name \nORDER BY AVG(debt) DESC \nLIMIT 10\n\n\nRunning query in 'inter_debttable'\n\n\n\n\n\ndebt_indicator\nindicator_name\naverage_debt\n\n\n\n\nDT.AMT.DLXF.CD\n\"Principal repayments on external debt, long-term (AMT, current US$)\"\n5904868401.499194\n\n\nDT.AMT.DPNG.CD\n\"Principal repayments on external debt, private nonguaranteed (PNG) (AMT, current US$)\"\n5161194333.812658\n\n\nDT.DIS.DLXF.CD\n\"Disbursements on external debt, long-term (DIS, current US$)\"\n2152041216.890244\n\n\nDT.DIS.OFFT.CD\n\"PPG, official creditors (DIS, current US$)\"\n1958983452.859836\n\n\nDT.AMT.PRVT.CD\n\"PPG, private creditors (AMT, current US$)\"\n1803694101.9632652\n\n\nDT.INT.DLXF.CD\n\"Interest payments on external debt, long-term (INT, current US$)\"\n1644024067.6508067\n\n\nDT.DIS.BLAT.CD\n\"PPG, bilateral (DIS, current US$)\"\n1223139290.39823\n\n\nDT.INT.DPNG.CD\n\"Interest payments on external debt, private nonguaranteed (PNG) (INT, current US$)\"\n1220410844.421519\n\n\nDT.AMT.OFFT.CD\n\"PPG, official creditors (AMT, current US$)\"\n1191187963.0830643\n\n\nDT.AMT.PBND.CD\n\"PPG, bonds (AMT, current US$)\"\n1082623947.6536233\n\n\n\n\nTruncated to displaylimit of 10.\n\n\n\n\nCode\n%%sql \nSELECT inter_debt.country_name, inter_debt.indicator_name \nFROM inter_debt \nWHERE debt = (SELECT MAX(debt) FROM inter_debt WHERE indicator_code='DT.AMT.DLXF.CD')\n\n\nRunning query in 'inter_debttable'\n\n\n\n\n\ncountry_name\nindicator_name\n\n\n\n\nChina\n\"Principal repayments on external debt, long-term (AMT, current US$)\"\n\n\n\n\n\nInterpretation:\n\nChina has the highest principal repayments on long-term external debt in the dataset. This suggests that China is actively repaying its long-term loans, either as part of scheduled payments or early repayments to reduce liabilities.\n\n\n\nCode\n%%sql \nSELECT inter_debt.country_name, inter_debt.indicator_name \nFROM inter_debt \nWHERE debt = (SELECT MAX(debt) FROM inter_debt WHERE indicator_code='DT.AMT.DPNG.CD')\n\n\nRunning query in 'inter_debttable'\n\n\n\n\n\ncountry_name\nindicator_name\n\n\n\n\nChina\n\"Principal repayments on external debt, private nonguaranteed (PNG) (AMT, current US$)\"\n\n\n\n\n\nInterpretation:\n\nChina has the highest principal repayments on private, non-guaranteed external debt. This means that Chinese private companies, rather than the government, are making the largest repayments on external loans.\n\n\n\nCode\n%%sql \nSELECT inter_debt.country_name, inter_debt.indicator_name \nFROM inter_debt \nWHERE debt = (SELECT MAX(debt) FROM inter_debt WHERE indicator_code='DT.DIS.DLXF.CD')\n\n\nRunning query in 'inter_debttable'\n\n\n\n\n\ncountry_name\nindicator_name\n\n\n\n\nLeast developed countries: UN classification\n\"Disbursements on external debt, long-term (DIS, current US$)\"\n\n\n\n\n\nInterpretation:\n\nThe entity that received the highest long-term external debt disbursement is the group of Least Developed Countries (LDCs) as classified by the UN. This means that collectively, these countries received the largest amount of new long-term external debt.\n\n\n\nCode\n%%sql \nSELECT inter_debt.country_name, inter_debt.indicator_name \nFROM inter_debt \nWHERE debt = (SELECT MAX(debt) FROM inter_debt WHERE indicator_code='DT.DIS.OFFT.CD')\n\n\nRunning query in 'inter_debttable'\n\n\n\n\n\ncountry_name\nindicator_name\n\n\n\n\nLeast developed countries: UN classification\n\"PPG, official creditors (DIS, current US$)\"\n\n\n\n\n\nInterpretation: - LDCs receiving the largest official creditor disbursements highlights global efforts to support underdeveloped economies. However, the long-term impact depends on whether these debts lead to sustainable growth or create a debt trap.\n\n\nCode\n%%sql \nSELECT inter_debt.country_name, inter_debt.indicator_name \nFROM inter_debt \nWHERE debt = (SELECT MAX(debt) FROM inter_debt WHERE indicator_code='DT.AMT.PRVT.CD')\n\n\nRunning query in 'inter_debttable'\n\n\n\n\n\ncountry_name\nindicator_name\n\n\n\n\nBrazil\n\"PPG, private creditors (AMT, current US$)\"\n\n\n\n\n\nInterpretation: - Brazil has the highest amount of public and publicly guaranteed (PPG) debt owed to private creditors. This means Brazil has borrowed the most from private lenders, such as international banks and investors. Unlike official creditors (e.g., IMF, World Bank), private creditors lend at market rates, which can be riskier and more expensive.\n\n\nCode\n%%sql \nSELECT inter_debt.country_name, inter_debt.indicator_name \nFROM inter_debt \nWHERE debt = (SELECT MAX(debt) FROM inter_debt WHERE indicator_code='DT.INT.DLXF.CD')\n\n\nRunning query in 'inter_debttable'\n\n\n\n\n\ncountry_name\nindicator_name\n\n\n\n\nMexico\n\"Interest payments on external debt, long-term (INT, current US$)\"\n\n\n\n\n\nInterpretation: - Mexico pays the highest amount in interest on long-term external debt. This suggests Mexico has a large outstanding external debt balance with high interest costs.\n\n\nCode\n%%sql \nSELECT inter_debt.country_name, inter_debt.indicator_name \nFROM inter_debt \nWHERE debt = (SELECT MAX(debt) FROM inter_debt WHERE indicator_code='DT.DIS.BLAT.CD')\n\n\nRunning query in 'inter_debttable'\n\n\n\n\n\ncountry_name\nindicator_name\n\n\n\n\nLeast developed countries: UN classification\n\"PPG, bilateral (DIS, current US$)\"\n\n\n\n\n\nInterpretation: - The least developed countries (LDCs) receive the largest bilateral disbursements on external debt. This means these countries are heavily reliant on bilateral loans (loans from one country to another).\n\n\nCode\n%%sql \nSELECT inter_debt.country_name, inter_debt.indicator_name \nFROM inter_debt \nWHERE debt = (SELECT MAX(debt) FROM inter_debt WHERE indicator_code='DT.INT.DPNG.CD')                           \n\n\nRunning query in 'inter_debttable'\n\n\n\n\n\ncountry_name\nindicator_name\n\n\n\n\nChina\n\"Interest payments on external debt, private nonguaranteed (PNG) (INT, current US$)\"\n\n\n\n\n\nInterpretation: - China has the highest interest payments on private, nonguaranteed external debt. This means that private Chinese entities (companies, banks, institutions) owe a large amount of external debt that is not backed by the government. These loans could come from foreign investors, banks, or financial institutions.\n\n\nCode\n%%sql \nSELECT inter_debt.country_name, inter_debt.indicator_name \nFROM inter_debt \nWHERE debt = (SELECT MAX(debt) FROM inter_debt WHERE indicator_code='DT.AMT.OFFT.CD')\n\n\nRunning query in 'inter_debttable'\n\n\n\n\n\ncountry_name\nindicator_name\n\n\n\n\nLeast developed countries: UN classification\n\"PPG, official creditors (AMT, current US$)\"\n\n\n\n\n\nInterpretation: - The least developed countries (LDCs) as defined by the United Nations (UN) have the highest amount of public and publicly guaranteed (PPG) debt owed to official creditors. This means that low-income countries collectively have the largest total debt obligations to official lenders\n\n\nCode\n%%sql \nSELECT inter_debt.country_name, inter_debt.indicator_name \nFROM inter_debt \nWHERE debt = (SELECT MAX(debt) FROM inter_debt WHERE indicator_code='DT.AMT.PBND.CD')\n\n\nRunning query in 'inter_debttable'\n\n\n\n\n\ncountry_name\nindicator_name\n\n\n\n\nMexico\n\"PPG, bonds (AMT, current US$)\"\n\n\n\n\n\nInterpretation:\n\nMexico has the highest public and publicly guaranteed (PPG) debt through bond issuance. This means Mexico relies heavily on bonds as a method of borrowing, rather than loans from international organizations or bilateral agreements."
  },
  {
    "objectID": "Analyze International Debt Statistics/notebook.html#overall-implications",
    "href": "Analyze International Debt Statistics/notebook.html#overall-implications",
    "title": "international Debt Statistics Analysis",
    "section": "Overall Implications",
    "text": "Overall Implications\n\nDebt structures vary significantly by country, reflecting different economic strategies.\n\nDeveloped or emerging economies (e.g., Brazil, Mexico, China) rely more on private creditors, bonds, and market-based financing.\nLeast developed countries depend on bilateral and official loans from international institutions.\n\nInterest payments are a major concern for nations like Mexico and China.\n\nCountries with high interest obligations must carefully manage their budgets to avoid financial instability.\n\nCountries that rely on private creditors or bond markets face higher risks.\n\nThese debts are often subject to market volatility, interest rate hikes, and investor sentiment."
  },
  {
    "objectID": "Analyzing industry Carbon Emissions/notebook.html",
    "href": "Analyzing industry Carbon Emissions/notebook.html",
    "title": "N. V. Decio",
    "section": "",
    "text": "Factories creating emissions\n\n\nPhoto by Maxim Tolchinskiy on Unsplash\nWhen factoring heat generation required for the manufacturing and transportation of products, Greenhouse gas emissions attributable to products, from food to sneakers to appliances, make up more than 75% of global emissions. -The Carbon Catalogue\nThe data, which is publicly available on nature.com, contains product carbon footprints (PCFs) for various companies. PCFs are the greenhouse gas emissions attributable to a given product, measured in CO2 (carbon dioxide equivalent).\nThis data is stored in a PostgreSQL database containing one table, prouduct_emissions, which looks at PCFs by product as well as the stage of production that these emissions occurred. Here’s a snapshot of what product_emissions contains in each column:\n\nproduct_emissions\n\n\n\nfield\ndata type\n\n\n\n\nid\nVARCHAR\n\n\nyear\nINT\n\n\nproduct_name\nVARCHAR\n\n\ncompany\nVARCHAR\n\n\ncountry\nVARCHAR\n\n\nindustry_group\nVARCHAR\n\n\nweight_kg\nNUMERIC\n\n\ncarbon_footprint_pcf\nNUMERIC\n\n\nupstream_percent_total_pcf\nVARCHAR\n\n\noperations_percent_total_pcf\nVARCHAR\n\n\ndownstream_percent_total_pcf\nVARCHAR\n\n\n\nI will use this data to examine the carbon footprint of each industry in the dataset!\n\nSELECT industry_group,\n    COUNT(DISTINCT company) AS num_companies,\n    ROUND(SUM(carbon_footprint_pcf), 1) AS total_industry_footprint\nFROM product_emissions\nWHERE year IN (SELECT MAX(year) FROM product_emissions)\nGROUP BY industry_group\nORDER BY total_industry_footprint DESC;\n\n\n\n\n\n\n\n\nindustry_group\nnum_companies\ntotal_industry_footprint\n\n\n\n\n0\nMaterials\n3\n107129.0\n\n\n1\nCapital Goods\n2\n94942.7\n\n\n2\nTechnology Hardware & Equipment\n4\n21865.1\n\n\n3\nFood, Beverage & Tobacco\n1\n3161.5\n\n\n4\nCommercial & Professional Services\n1\n740.6\n\n\n5\nSoftware & Services\n1\n690.0\n\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "Analyzing Student's mental health/notebook.html",
    "href": "Analyzing Student's mental health/notebook.html",
    "title": "N. V. Decio",
    "section": "",
    "text": "Illustration of silhouetted heads\n\n\nDoes going to university in a different country affect your mental health? A Japanese international university surveyed its students in 2018 and published a study the following year that was approved by several ethical and regulatory boards.The study found that international students have a higher risk of mental health difficulties than the general population, and that social connectedness (belonging to a social group) and acculturative stress (stress associated with joining a new culture) are predictive of depression.Explore the students data using PostgreSQL to find out if you would come to a similar conclusion for international students and see if the length of stay is a contributing factor.Here is a data description of the columns you may find helpful.\nField Name | Description || ————- | ———————————————— || inter_dom | Types of students (international or domestic) || japanese_cate | Japanese language proficiency || english_cate | English language proficiency || academic | Current academic level (undergraduate or graduate) || age | Current age of student || stay | Current length of stay in years || todep | Total score of depression (PHQ-9 test) || tosc | Total score of social connectedness (SCS test) || toas | Total score of acculturative stress (ASISS test) |\n\n-- Run this code to save the CSV file as studentsSELECT * FROM 'students.csv';\n\n\n\n\n\n\n\n\ninter_dom\nregion\ngender\nacademic\nage\nage_cate\nstay\nstay_cate\njapanese\njapanese_cate\nenglish\nenglish_cate\nintimate\nreligion\nsuicide\ndep\ndeptype\ntodep\ndepsev\ntosc\napd\nahome\naph\nafear\nacs\naguilt\namiscell\ntoas\npartner\nfriends\nparents\nrelative\nprofess\nphone\ndoctor\nreli\nalone\nothers\ninternet\npartner_bi\nfriends_bi\nparents_bi\nrelative_bi\nprofessional_bi\nphone_bi\ndoctor_bi\nreligion_bi\nalone_bi\nothers_bi\ninternet_bi\n\n\n\n\n0\nInter\nSEA\nMale\nGrad\n24.0\n4.0\n5.0\nLong\n3.0\nAverage\n5.0\nHigh\nNone\nYes\nNo\nNo\nNo\n0.0\nMin\n34.0\n23.0\n9.0\n11.0\n8.0\n11.0\n2.0\n27.0\n91.0\n5.0\n5.0\n6.0\n3.0\n2.0\n1.0\n4.0\n1.0\n3.0\n4.0\nNaN\nYes\nYes\nYes\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\n\n\n1\nInter\nSEA\nMale\nGrad\n28.0\n5.0\n1.0\nShort\n4.0\nHigh\n4.0\nHigh\nNone\nNo\nNo\nNo\nNo\n2.0\nMin\n48.0\n8.0\n7.0\n5.0\n4.0\n3.0\n2.0\n10.0\n39.0\n7.0\n7.0\n7.0\n4.0\n4.0\n4.0\n4.0\n1.0\n1.0\n1.0\nNaN\nYes\nYes\nYes\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\n\n\n2\nInter\nSEA\nMale\nGrad\n25.0\n4.0\n6.0\nLong\n4.0\nHigh\n4.0\nHigh\nYes\nYes\nNo\nNo\nNo\n2.0\nMin\n41.0\n13.0\n4.0\n7.0\n6.0\n4.0\n3.0\n14.0\n51.0\n3.0\n3.0\n3.0\n1.0\n1.0\n2.0\n1.0\n1.0\n1.0\n1.0\nNaN\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\n\n\n3\nInter\nEA\nFemale\nGrad\n29.0\n5.0\n1.0\nShort\n2.0\nLow\n3.0\nAverage\nNo\nNo\nNo\nNo\nNo\n3.0\nMin\n37.0\n16.0\n10.0\n10.0\n8.0\n6.0\n4.0\n21.0\n75.0\n5.0\n5.0\n5.0\n5.0\n5.0\n2.0\n2.0\n2.0\n4.0\n4.0\nNaN\nYes\nYes\nYes\nYes\nYes\nNo\nNo\nNo\nNo\nNo\nNo\n\n\n4\nInter\nEA\nFemale\nGrad\n28.0\n5.0\n1.0\nShort\n1.0\nLow\n3.0\nAverage\nYes\nNo\nNo\nNo\nNo\n3.0\nMin\n37.0\n15.0\n12.0\n5.0\n8.0\n7.0\n4.0\n31.0\n82.0\n5.0\n5.0\n5.0\n2.0\n5.0\n2.0\n5.0\n5.0\n4.0\n4.0\nNaN\nYes\nYes\nYes\nNo\nYes\nNo\nYes\nYes\nNo\nNo\nNo\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n281\nNone\nNone\nNone\nNone\nNaN\nNaN\nNaN\nNone\nNaN\nNone\nNaN\nNone\nNone\nNone\nNone\nNone\nNone\nNaN\nNone\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n46\n222\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\n\n\n282\nNone\nNone\nNone\nNone\nNaN\nNaN\nNaN\nNone\nNaN\nNone\nNaN\nNone\nNone\nNone\nNone\nNone\nNone\nNaN\nNone\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n19\n249\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\n\n\n283\nNone\nNone\nNone\nNone\nNaN\nNaN\nNaN\nNone\nNaN\nNone\nNaN\nNone\nNone\nNone\nNone\nNone\nNone\nNaN\nNone\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n65\n203\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\n\n\n284\nNone\nNone\nNone\nNone\nNaN\nNaN\nNaN\nNone\nNaN\nNone\nNaN\nNone\nNone\nNone\nNone\nNone\nNone\nNaN\nNone\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n21\n247\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\n\n\n285\nNone\nNone\nNone\nNone\nNaN\nNaN\nNaN\nNone\nNaN\nNone\nNaN\nNone\nNone\nNone\nNone\nNone\nNone\nNaN\nNone\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n45\n223\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\nNone\n\n\n\n\n286 rows × 50 columns\n\n\n\n\n-- Start coding here...SELECT inter_dom, COUNT(Inter_dom)FROM students.csvGROUP BY inter_dom;\n\n\n\n\n\n\n\n\ninter_dom\ncount(Inter_dom)\n\n\n\n\n0\nInter\n201\n\n\n1\nDom\n67\n\n\n2\nNone\n0\n\n\n\n\n\n\n\n\nSELECT inter_dom, COUNT(Inter_dom)FROM students.csvGROUP BY inter_dom;\n\n\n\n\n\n\n\n\ninter_dom\ncount(Inter_dom)\n\n\n\n\n0\nInter\n201\n\n\n1\nDom\n67\n\n\n2\nNone\n0\n\n\n\n\n\n\n\n\nSELECT inter_dom, COUNT(Inter_dom)FROM students.csvWHERE inter_dom IS NOT NULLGROUP BY inter_dom;\n\n\n\n\n\n\n\n\ninter_dom\ncount(Inter_dom)\n\n\n\n\n0\nInter\n201\n\n\n1\nDom\n67\n\n\n\n\n\n\n\n\nSELECT stay,       ROUND(MIN(todep), 2) AS min_phq,        ROUND(MAX(todep), 2) AS max_phq,        ROUND(AVG(todep), 2) AS average_phq,        ROUND(MIN(tosc), 2) AS min_scs,     ROUND(MAX(tosc), 2) AS max_scs,        ROUND(AVG(tosc), 2) AS average_scs,      ROUND(MIN(toas), 2) AS min_as,      ROUND(MAX(toas), 2) AS max_as,        ROUND(AVG(toas), 2) AS average_asFROM studentsWHERE inter_dom = 'Inter'GROUP BY stayORDER BY stay DESC;\n\n\n\n\n\n\n\n\nstay\nmin_phq\nmax_phq\naverage_phq\nmin_scs\nmax_scs\naverage_scs\nmin_as\nmax_as\naverage_as\n\n\n\n\n0\n10.0\n13.0\n13.0\n13.00\n32.0\n32.0\n32.00\n50.0\n50.0\n50.00\n\n\n1\n8.0\n10.0\n10.0\n10.00\n44.0\n44.0\n44.00\n65.0\n65.0\n65.00\n\n\n2\n7.0\n4.0\n4.0\n4.00\n48.0\n48.0\n48.00\n45.0\n45.0\n45.00\n\n\n3\n6.0\n2.0\n10.0\n6.00\n35.0\n41.0\n38.00\n42.0\n83.0\n58.67\n\n\n4\n5.0\n0.0\n0.0\n0.00\n34.0\n34.0\n34.00\n91.0\n91.0\n91.00\n\n\n5\n4.0\n0.0\n14.0\n8.57\n17.0\n48.0\n33.93\n36.0\n129.0\n87.71\n\n\n6\n3.0\n0.0\n24.0\n9.09\n13.0\n48.0\n37.13\n36.0\n133.0\n78.00\n\n\n7\n2.0\n0.0\n21.0\n8.28\n11.0\n48.0\n37.08\n36.0\n127.0\n77.67\n\n\n8\n1.0\n0.0\n25.0\n7.48\n11.0\n48.0\n38.11\n36.0\n145.0\n72.80\n\n\n\n\n\n\n\n\nSELECT stay,        ROUND(AVG(todep), 2) AS average_phq,        ROUND(AVG(tosc), 2) AS average_scs,        ROUND(AVG(toas), 2) AS average_asFROM studentsWHERE inter_dom = 'Inter'GROUP BY stayORDER BY stay DESC;\n\n\n\n\n\n\n\n\nstay\naverage_phq\naverage_scs\naverage_as\n\n\n\n\n0\n10.0\n13.00\n32.00\n50.00\n\n\n1\n8.0\n10.00\n44.00\n65.00\n\n\n2\n7.0\n4.00\n48.00\n45.00\n\n\n3\n6.0\n6.00\n38.00\n58.67\n\n\n4\n5.0\n0.00\n34.00\n91.00\n\n\n5\n4.0\n8.57\n33.93\n87.71\n\n\n6\n3.0\n9.09\n37.13\n78.00\n\n\n7\n2.0\n8.28\n37.08\n77.67\n\n\n8\n1.0\n7.48\n38.11\n72.80\n\n\n\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Portfolio",
    "section": "",
    "text": "Hi! I am Neil, a Chemist transitioning into Data Analysis with a strong foundation in analytical thinking and problem-solving. With experience in creating dashboards, data visualization, and Python development, I bring a unique blend of scientific expertise and technical skills to data-driven decision-making. I have passed SQL certification exams on both DataCamp and HackerRank, demonstrating my proficiency in querying and managing data. Additionally, I have experience teaching college-level subjects, showcasing my ability to communicate complex concepts effectively.\nI am proficient in Python, SQL, and Excel and enjoy building insightful dashboards that turn raw data into actionable intelligence. I also have experience developing Python applications as a hobby, reinforcing my programming and automation skills.\nBeyond my technical abilities, I am passionate about continuous learning and personal growth. I am currently learning German while also learning more about data analysis like making personal projects, further enhancing my adaptability and analytical mindset. I also enjoy reading, jogging, running, and volunteering, which help me stay engaged and balanced. As I transition into a full-time Data Analyst role, I am eager to apply my skills to real-world business challenges, leveraging data to drive impactful decisions.\nMy resume in pdf.\nThis is a repository to showcase skills, share projects and track my progress in Data Analytics / Data Science related topics.\n\n\n\n Back to top"
  },
  {
    "objectID": "Philippine_food_price_Analysis_and_Visualization/Data/External/food_prices_scraper.html",
    "href": "Philippine_food_price_Analysis_and_Visualization/Data/External/food_prices_scraper.html",
    "title": "N. V. Decio",
    "section": "",
    "text": "import requests\nimport pandas as pd\n\n\n# API URL and parameters\nurl = \"https://microdata.worldbank.org/index.php/api/tables/data/fcv/wld_2021_rtfp_v02_m\"\nlimit = 99  # Server-enforced limit\ncountry = 'Philippines'\n\n\n# Function to fetch all data\ndef fetch_all_data(url, limit):\n    data = []\n    offset = 0\n    total_records = None\n\n    while True:\n        # Make API request\n        response = requests.get(url, params={'limit': limit, 'offset': offset, 'country': country})\n        response.raise_for_status()\n        response_data = response.json()\n\n        # Extract data from 'data' key\n        batch_data = response_data.get('data', [])\n        \n        if not batch_data:\n            # Exit loop if no more data is returned\n            print(\"No more data to fetch.\")\n            break\n\n        # If this is the first response, check the total records\n        if total_records is None:\n            total_records = response_data.get('found', None)\n            if total_records:\n                print(f\"Total records available: {total_records}\")\n        \n        # Add fetched data to the main list\n        data.extend(batch_data)\n        print(f\"Fetched {len(batch_data)} rows. Total fetched so far: {len(data)}\")\n\n        # Break if we've fetched all available data (based on the 'total' field if available)\n        if total_records and len(data) &gt;= total_records:\n            print(\"Fetched all available records.\")\n            break\n        \n        # Increment offset\n        offset += limit\n\n    return data\n\n\n# Fetch the whole dataset\nall_data = fetch_all_data(url, limit)\n\n\n# Convert to a DataFrame\ndf = pd.DataFrame(all_data)\nprint(f\"Total rows fetched: {len(df)}\")\n\n\n# Save to CSV\ndf.to_csv('full_dataset.csv', index=False)\nprint(\"All data saved to full_dataset.csv\")\n\n\n\n\n Back to top"
  },
  {
    "objectID": "Philippine_food_price_Analysis_and_Visualization/Data/Interim/cleaning.html",
    "href": "Philippine_food_price_Analysis_and_Visualization/Data/Interim/cleaning.html",
    "title": "N. V. Decio",
    "section": "",
    "text": "import pandas as pd\n\n\n# Load your dataset (replace with your actual file path)\nfile_path = \"../External/full_dataset.csv\"\ndf = pd.read_csv(file_path)\n\n\n# Display the first few rows before cleaning\nprint(\"Before Cleaning:\")\nprint(df.head())\n\nBefore Cleaning:\n  ISO3      country                         adm1_name adm2_name mkt_name  \\\n0  PHL  Philippines  Cordillera Administrative region      Abra     Abra   \n1  PHL  Philippines  Cordillera Administrative region      Abra     Abra   \n2  PHL  Philippines  Cordillera Administrative region      Abra     Abra   \n3  PHL  Philippines  Cordillera Administrative region      Abra     Abra   \n4  PHL  Philippines  Cordillera Administrative region      Abra     Abra   \n\n         lat         lon                   geo_id       DATES  year  ...  \\\n0  17.600651  120.619362  gid_1760065101206193620  2007-01-01  2007  ...   \n1  17.600651  120.619362  gid_1760065101206193620  2007-02-01  2007  ...   \n2  17.600651  120.619362  gid_1760065101206193620  2007-03-01  2007  ...   \n3  17.600651  120.619362  gid_1760065101206193620  2007-04-01  2007  ...   \n4  17.600651  120.619362  gid_1760065101206193620  2007-05-01  2007  ...   \n\n   l_yogurt c_yogurt inflation_yogurt trust_yogurt o_food_price_index  \\\n0       NaN      NaN              NaN          NaN               0.68   \n1       NaN      NaN              NaN          NaN               0.68   \n2       NaN      NaN              NaN          NaN               0.66   \n3       NaN      NaN              NaN          NaN               0.66   \n4       NaN      NaN              NaN          NaN               0.67   \n\n   h_food_price_index  l_food_price_index  c_food_price_index  \\\n0                0.69                0.67                0.68   \n1                0.69                0.67                0.67   \n2                0.67                0.65                0.66   \n3                0.67                0.65                0.66   \n4                0.68                0.66                0.67   \n\n   inflation_food_price_index  trust_food_price_index  \n0                         NaN                     9.4  \n1                         NaN                     9.4  \n2                         NaN                     9.4  \n3                         NaN                     9.4  \n4                         NaN                     9.4  \n\n[5 rows x 508 columns]\n\n\n\n# View the columns and data types of the dataset\nprint(df.info())\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 23653 entries, 0 to 23652\nColumns: 508 entries, ISO3 to trust_food_price_index\ndtypes: float64(494), int64(3), object(11)\nmemory usage: 91.7+ MB\nNone\n\n\n\n# View the summary statistics of the dataset though this may not make sense as they are already described in the EDA report\nprint(df.describe())\n\n                lat           lon          year         month  data_coverage  \\\ncount  23436.000000  23436.000000  23653.000000  23653.000000       23653.00   \nmean      11.709358    122.876852   2015.543779      6.474654          19.34   \nstd        3.640368      1.949177      5.216106      3.464248           0.00   \nmin        5.029099    118.735278   2007.000000      1.000000          19.34   \n25%        8.481003    121.086142   2011.000000      3.000000          19.34   \n50%       11.570265    122.851105   2016.000000      6.000000          19.34   \n75%       14.716339    124.667869   2020.000000      9.000000          19.34   \nmax       18.194082    126.207645   2025.000000     12.000000          19.34   \n\n       data_coverage_recent  index_confidence_score  spatially_interpolated  \\\ncount          2.365300e+04            2.365300e+04                 23653.0   \nmean           4.264000e+01            9.600000e-01                     0.0   \nstd            7.105578e-15            3.330739e-16                     0.0   \nmin            4.264000e+01            9.600000e-01                     0.0   \n25%            4.264000e+01            9.600000e-01                     0.0   \n50%            4.264000e+01            9.600000e-01                     0.0   \n75%            4.264000e+01            9.600000e-01                     0.0   \nmax            4.264000e+01            9.600000e-01                     0.0   \n\n       apples  bananas  ...  l_yogurt  c_yogurt  inflation_yogurt  \\\ncount     0.0      0.0  ...       0.0       0.0               0.0   \nmean      NaN      NaN  ...       NaN       NaN               NaN   \nstd       NaN      NaN  ...       NaN       NaN               NaN   \nmin       NaN      NaN  ...       NaN       NaN               NaN   \n25%       NaN      NaN  ...       NaN       NaN               NaN   \n50%       NaN      NaN  ...       NaN       NaN               NaN   \n75%       NaN      NaN  ...       NaN       NaN               NaN   \nmax       NaN      NaN  ...       NaN       NaN               NaN   \n\n       trust_yogurt  o_food_price_index  h_food_price_index  \\\ncount           0.0        23653.000000        23653.000000   \nmean            NaN            0.976953            0.994561   \nstd             NaN            0.221319            0.228211   \nmin             NaN            0.640000            0.650000   \n25%             NaN            0.820000            0.830000   \n50%             NaN            0.910000            0.920000   \n75%             NaN            1.070000            1.090000   \nmax             NaN            1.810000            1.850000   \n\n       l_food_price_index  c_food_price_index  inflation_food_price_index  \\\ncount        23653.000000        23653.000000                22345.000000   \nmean             0.959457            0.977137                    4.042098   \nstd              0.215228            0.223137                    6.929498   \nmin              0.610000            0.640000                  -17.670000   \n25%              0.800000            0.810000                   -0.720000   \n50%              0.890000            0.900000                    3.180000   \n75%              1.050000            1.070000                    7.570000   \nmax              1.740000            1.810000                   44.990000   \n\n       trust_food_price_index  \ncount            23653.000000  \nmean                 9.521046  \nstd                  0.183176  \nmin                  9.400000  \n25%                  9.400000  \n50%                  9.400000  \n75%                  9.700000  \nmax                  9.900000  \n\n[8 rows x 497 columns]\n\n\n\n# Identify and drop empty columns\nempty_columns = df.columns[df.isnull().all()]  # Columns where all values are NaN\nprint(f\"Empty columns to drop: {empty_columns.tolist()}\")\n\nEmpty columns to drop: ['apples', 'bananas', 'bread', 'bulgur', 'cassava', 'cassava_flour', 'cassava_meal', 'cheese', 'chickpeas', 'chili', 'coffee_instant', 'couscous', 'cowpeas', 'cucumbers', 'dates', 'fish', 'fish_catfish', 'fish_mackerel', 'fish_sardine_canned', 'fish_tilapia', 'fish_tuna_canned', 'gari', 'groundnuts', 'lentils', 'livestock_sheep_two_year_old_male', 'livestocksheep_castrated_male', 'maize', 'maize_meal', 'meat_beef', 'meat_beef_minced', 'meat_buffalo', 'meat_chicken', 'meat_chicken_broiler', 'meat_chicken_plucked', 'meat_goat', 'meat_lamb', 'milk', 'millet', 'oil', 'oranges', 'parsley', 'pasta', 'peas', 'plantains', 'pulses', 'rice_various', 'salt', 'sesame', 'sorghum', 'sorghum_food_aid', 'sugar', 'tea', 'tomatoes_paste', 'wheat', 'wheat_flour', 'yam', 'yogurt', 'o_apples', 'h_apples', 'l_apples', 'c_apples', 'inflation_apples', 'trust_apples', 'o_bananas', 'h_bananas', 'l_bananas', 'c_bananas', 'inflation_bananas', 'trust_bananas', 'o_bread', 'h_bread', 'l_bread', 'c_bread', 'inflation_bread', 'trust_bread', 'o_bulgur', 'h_bulgur', 'l_bulgur', 'c_bulgur', 'inflation_bulgur', 'trust_bulgur', 'o_cassava', 'h_cassava', 'l_cassava', 'c_cassava', 'inflation_cassava', 'trust_cassava', 'o_cassava_flour', 'h_cassava_flour', 'l_cassava_flour', 'c_cassava_flour', 'inflation_cassava_flour', 'trust_cassava_flour', 'o_cassava_meal', 'h_cassava_meal', 'l_cassava_meal', 'c_cassava_meal', 'inflation_cassava_meal', 'trust_cassava_meal', 'o_cheese', 'h_cheese', 'l_cheese', 'c_cheese', 'inflation_cheese', 'trust_cheese', 'o_chickpeas', 'h_chickpeas', 'l_chickpeas', 'c_chickpeas', 'inflation_chickpeas', 'trust_chickpeas', 'o_chili', 'h_chili', 'l_chili', 'c_chili', 'inflation_chili', 'trust_chili', 'o_coffee_instant', 'h_coffee_instant', 'l_coffee_instant', 'c_coffee_instant', 'inflation_coffee_instant', 'trust_coffee_instant', 'o_couscous', 'h_couscous', 'l_couscous', 'c_couscous', 'inflation_couscous', 'trust_couscous', 'o_cowpeas', 'h_cowpeas', 'l_cowpeas', 'c_cowpeas', 'inflation_cowpeas', 'trust_cowpeas', 'o_cucumbers', 'h_cucumbers', 'l_cucumbers', 'c_cucumbers', 'inflation_cucumbers', 'trust_cucumbers', 'o_dates', 'h_dates', 'l_dates', 'c_dates', 'inflation_dates', 'trust_dates', 'o_fish', 'h_fish', 'l_fish', 'c_fish', 'inflation_fish', 'trust_fish', 'o_fish_catfish', 'h_fish_catfish', 'l_fish_catfish', 'c_fish_catfish', 'inflation_fish_catfish', 'trust_fish_catfish', 'o_fish_mackerel', 'h_fish_mackerel', 'l_fish_mackerel', 'c_fish_mackerel', 'inflation_fish_mackerel', 'trust_fish_mackerel', 'o_fish_sardine_canned', 'h_fish_sardine_canned', 'l_fish_sardine_canned', 'c_fish_sardine_canned', 'inflation_fish_sardine_canned', 'trust_fish_sardine_canned', 'o_fish_tilapia', 'h_fish_tilapia', 'l_fish_tilapia', 'c_fish_tilapia', 'inflation_fish_tilapia', 'trust_fish_tilapia', 'o_fish_tuna_canned', 'h_fish_tuna_canned', 'l_fish_tuna_canned', 'c_fish_tuna_canned', 'inflation_fish_tuna_canned', 'trust_fish_tuna_canned', 'o_gari', 'h_gari', 'l_gari', 'c_gari', 'inflation_gari', 'trust_gari', 'o_groundnuts', 'h_groundnuts', 'l_groundnuts', 'c_groundnuts', 'inflation_groundnuts', 'trust_groundnuts', 'o_lentils', 'h_lentils', 'l_lentils', 'c_lentils', 'inflation_lentils', 'trust_lentils', 'o_livestock_sheep_two_year_old_male', 'h_livestock_sheep_two_year_old_male', 'l_livestock_sheep_two_year_old_male', 'c_livestock_sheep_two_year_old_male', 'inflation_livestock_sheep_two_year_old_male', 'trust_livestock_sheep_two_year_old_male', 'o_livestocksheep_castrated_male', 'h_livestocksheep_castrated_male', 'l_livestocksheep_castrated_male', 'c_livestocksheep_castrated_male', 'inflation_livestocksheep_castrated_male', 'trust_livestocksheep_castrated_male', 'o_maize', 'h_maize', 'l_maize', 'c_maize', 'inflation_maize', 'trust_maize', 'o_maize_meal', 'h_maize_meal', 'l_maize_meal', 'c_maize_meal', 'inflation_maize_meal', 'trust_maize_meal', 'o_meat_beef', 'h_meat_beef', 'l_meat_beef', 'c_meat_beef', 'inflation_meat_beef', 'trust_meat_beef', 'o_meat_beef_minced', 'h_meat_beef_minced', 'l_meat_beef_minced', 'c_meat_beef_minced', 'inflation_meat_beef_minced', 'trust_meat_beef_minced', 'o_meat_buffalo', 'h_meat_buffalo', 'l_meat_buffalo', 'c_meat_buffalo', 'inflation_meat_buffalo', 'trust_meat_buffalo', 'o_meat_chicken', 'h_meat_chicken', 'l_meat_chicken', 'c_meat_chicken', 'inflation_meat_chicken', 'trust_meat_chicken', 'o_meat_chicken_broiler', 'h_meat_chicken_broiler', 'l_meat_chicken_broiler', 'c_meat_chicken_broiler', 'inflation_meat_chicken_broiler', 'trust_meat_chicken_broiler', 'o_meat_chicken_plucked', 'h_meat_chicken_plucked', 'l_meat_chicken_plucked', 'c_meat_chicken_plucked', 'inflation_meat_chicken_plucked', 'trust_meat_chicken_plucked', 'o_meat_goat', 'h_meat_goat', 'l_meat_goat', 'c_meat_goat', 'inflation_meat_goat', 'trust_meat_goat', 'o_meat_lamb', 'h_meat_lamb', 'l_meat_lamb', 'c_meat_lamb', 'inflation_meat_lamb', 'trust_meat_lamb', 'o_milk', 'h_milk', 'l_milk', 'c_milk', 'inflation_milk', 'trust_milk', 'o_millet', 'h_millet', 'l_millet', 'c_millet', 'inflation_millet', 'trust_millet', 'o_oil', 'h_oil', 'l_oil', 'c_oil', 'inflation_oil', 'trust_oil', 'o_oranges', 'h_oranges', 'l_oranges', 'c_oranges', 'inflation_oranges', 'trust_oranges', 'o_parsley', 'h_parsley', 'l_parsley', 'c_parsley', 'inflation_parsley', 'trust_parsley', 'o_pasta', 'h_pasta', 'l_pasta', 'c_pasta', 'inflation_pasta', 'trust_pasta', 'o_peas', 'h_peas', 'l_peas', 'c_peas', 'inflation_peas', 'trust_peas', 'o_plantains', 'h_plantains', 'l_plantains', 'c_plantains', 'inflation_plantains', 'trust_plantains', 'o_pulses', 'h_pulses', 'l_pulses', 'c_pulses', 'inflation_pulses', 'trust_pulses', 'o_rice_various', 'h_rice_various', 'l_rice_various', 'c_rice_various', 'inflation_rice_various', 'trust_rice_various', 'o_salt', 'h_salt', 'l_salt', 'c_salt', 'inflation_salt', 'trust_salt', 'o_sesame', 'h_sesame', 'l_sesame', 'c_sesame', 'inflation_sesame', 'trust_sesame', 'o_sorghum', 'h_sorghum', 'l_sorghum', 'c_sorghum', 'inflation_sorghum', 'trust_sorghum', 'o_sorghum_food_aid', 'h_sorghum_food_aid', 'l_sorghum_food_aid', 'c_sorghum_food_aid', 'inflation_sorghum_food_aid', 'trust_sorghum_food_aid', 'o_sugar', 'h_sugar', 'l_sugar', 'c_sugar', 'inflation_sugar', 'trust_sugar', 'o_tea', 'h_tea', 'l_tea', 'c_tea', 'inflation_tea', 'trust_tea', 'o_tomatoes_paste', 'h_tomatoes_paste', 'l_tomatoes_paste', 'c_tomatoes_paste', 'inflation_tomatoes_paste', 'trust_tomatoes_paste', 'o_wheat', 'h_wheat', 'l_wheat', 'c_wheat', 'inflation_wheat', 'trust_wheat', 'o_wheat_flour', 'h_wheat_flour', 'l_wheat_flour', 'c_wheat_flour', 'inflation_wheat_flour', 'trust_wheat_flour', 'o_yam', 'h_yam', 'l_yam', 'c_yam', 'inflation_yam', 'trust_yam', 'o_yogurt', 'h_yogurt', 'l_yogurt', 'c_yogurt', 'inflation_yogurt', 'trust_yogurt']\n\n\n\n# Drop empty columns\ndf_cleaned = df.drop(columns=empty_columns)\n\n\n# Display the cleaned dataset\nprint(\"After Cleaning:\")\nprint(df_cleaned.head())\n\nAfter Cleaning:\n  ISO3      country                         adm1_name adm2_name mkt_name  \\\n0  PHL  Philippines  Cordillera Administrative region      Abra     Abra   \n1  PHL  Philippines  Cordillera Administrative region      Abra     Abra   \n2  PHL  Philippines  Cordillera Administrative region      Abra     Abra   \n3  PHL  Philippines  Cordillera Administrative region      Abra     Abra   \n4  PHL  Philippines  Cordillera Administrative region      Abra     Abra   \n\n         lat         lon                   geo_id       DATES  year  ...  \\\n0  17.600651  120.619362  gid_1760065101206193620  2007-01-01  2007  ...   \n1  17.600651  120.619362  gid_1760065101206193620  2007-02-01  2007  ...   \n2  17.600651  120.619362  gid_1760065101206193620  2007-03-01  2007  ...   \n3  17.600651  120.619362  gid_1760065101206193620  2007-04-01  2007  ...   \n4  17.600651  120.619362  gid_1760065101206193620  2007-05-01  2007  ...   \n\n   l_tomatoes c_tomatoes inflation_tomatoes trust_tomatoes o_food_price_index  \\\n0       26.03      27.84                NaN            8.0               0.68   \n1       26.31      26.82                NaN            8.0               0.68   \n2       24.95      26.21                NaN            8.0               0.66   \n3       24.93      26.74                NaN            8.0               0.66   \n4       26.30      27.19                NaN            8.0               0.67   \n\n   h_food_price_index  l_food_price_index  c_food_price_index  \\\n0                0.69                0.67                0.68   \n1                0.69                0.67                0.67   \n2                0.67                0.65                0.66   \n3                0.67                0.65                0.66   \n4                0.68                0.66                0.67   \n\n   inflation_food_price_index  trust_food_price_index  \n0                         NaN                     9.4  \n1                         NaN                     9.4  \n2                         NaN                     9.4  \n3                         NaN                     9.4  \n4                         NaN                     9.4  \n\n[5 rows x 109 columns]\n\n\n\n# Dropping unneeded columns\ncleaned_data = df_cleaned.drop(columns=['ISO3', 'geo_id', 'currency', 'components', 'start_dense_data', 'last_survey_point', 'data_coverage', 'data_coverage_recent', 'index_confidence_score', 'spatially_interpolated'])\n\n\nmissing_values = cleaned_data.isnull().sum()\nprint(\"Missing values per column:\")\nprint(missing_values)\n\nMissing values per column:\ncountry                          0\nadm1_name                        0\nadm2_name                        0\nmkt_name                         0\nlat                            217\n                              ... \nh_food_price_index               0\nl_food_price_index               0\nc_food_price_index               0\ninflation_food_price_index    1308\ntrust_food_price_index           0\nLength: 99, dtype: int64\n\n\n\n# Rename multiple columns at once\ncleaned_data.rename(columns={'DATES': 'Date', 'adm1_name': 'Region', 'adm2_name': 'Province', 'mkt_name': 'City'}, inplace=True)\n\n\n# Save cleaned data to a CSV file\ncleaned_data.to_csv(\"cleaned_food_prices.csv\", index=False)\n\n\n\n\n Back to top"
  },
  {
    "objectID": "Philippine_food_price_Analysis_and_Visualization/Data/Processed/hypothesis_testing.html",
    "href": "Philippine_food_price_Analysis_and_Visualization/Data/Processed/hypothesis_testing.html",
    "title": "prepare data",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nfrom scipy.stats import shapiro\nfrom scipy.stats import kruskal\nimport seaborn as sns\nimport statsmodels.api as sm\nimport matplotlib.pyplot as plt\nfrom scipy.stats import levene\n# Load dataset\nfile_path = \"../Interim/cleaned_food_prices.csv\"\ndf = pd.read_csv(file_path)\n#dropping columns related to food price index\ndf_nofpi = df.drop(columns=['country','Province', 'City', 'lat', 'lon', 'month', 'o_food_price_index', 'h_food_price_index', 'l_food_price_index', 'c_food_price_index', 'inflation_food_price_index', 'trust_food_price_index'])\n# Convert 'Date' column to datetime format\ndf_nofpi['Date'] = pd.to_datetime(df_nofpi['Date'])\n#dropping columns related to inflation\ndf_noinf = df_nofpi.drop(columns=['inflation_beans','inflation_cabbage', 'inflation_carrots', 'inflation_eggs', 'inflation_garlic', 'inflation_meat_beef_chops', 'inflation_meat_chicken_whole', 'inflation_meat_pork', 'inflation_onions', 'inflation_potatoes', 'inflation_rice', 'inflation_tomatoes'])\n#dropping columns related to trust scores\ndf_cleaned = df_noinf.drop(columns=['trust_beans','trust_cabbage', 'trust_carrots', 'trust_eggs', 'trust_garlic', 'trust_meat_beef_chops', 'trust_meat_chicken_whole', 'trust_meat_pork', 'trust_onions', 'trust_potatoes', 'trust_rice', 'trust_tomatoes'])\n# Reshaping from wide to long format (including year and month as part of the identifier)\ndf_melted = df_cleaned.melt(id_vars=['Region', 'Date', 'year'], var_name='Food_Items', value_name='Price')"
  },
  {
    "objectID": "Philippine_food_price_Analysis_and_Visualization/Data/Processed/hypothesis_testing.html#start-analysis",
    "href": "Philippine_food_price_Analysis_and_Visualization/Data/Processed/hypothesis_testing.html#start-analysis",
    "title": "prepare data",
    "section": "Start Analysis",
    "text": "Start Analysis\n\nOne-way ANOVA\n\nCheck if one-way ANOVA is appropriate\n\none-way ANOVA can only be used of normality and homogeneity of variances holds. If not, there are two test that can be used, namely, Welch’s ANOVA and Kruskall-Wallis Test.\n\n\n* Welch’s ANOVA can be used when your data is normally distributed, but the variances are unequal.\n\n\n* Kruskall-Wallis Test, on the other hand, is used when your data is non-normal, ordinal, or you can’t assume equal variances.\n\n\n1. Normality\n\n# Grouping by region and year\ngrouped = df_melted.groupby(['year', 'Food_Items'])['Price'].apply(list)\n\n# Shapiro-Wilk Test for each group\nalpha = 0.05  # Significance level\nfor group, prices in grouped.items():\n    stat, p = shapiro(prices)\n    result = \"Pass\" if p &gt; alpha else \"Shapiro-Wilk Test Failed\"\n    print(f'{group}: W-statistic={stat:.4f}, p-value={p:.4f}, Result={result}')\n\n(2007, 'beans'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2007, 'c_beans'): W-statistic=0.9744, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2007, 'c_cabbage'): W-statistic=0.9698, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2007, 'c_carrots'): W-statistic=0.9208, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2007, 'c_eggs'): W-statistic=0.7932, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2007, 'c_garlic'): W-statistic=0.8767, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2007, 'c_meat_beef_chops'): W-statistic=0.9786, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2007, 'c_meat_chicken_whole'): W-statistic=0.9837, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2007, 'c_meat_pork'): W-statistic=0.9850, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2007, 'c_onions'): W-statistic=0.9738, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2007, 'c_potatoes'): W-statistic=0.9533, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2007, 'c_rice'): W-statistic=0.9876, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2007, 'c_tomatoes'): W-statistic=0.9774, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2007, 'cabbage'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2007, 'carrots'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2007, 'eggs'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2007, 'garlic'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2007, 'h_beans'): W-statistic=0.9748, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2007, 'h_cabbage'): W-statistic=0.9681, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2007, 'h_carrots'): W-statistic=0.9161, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2007, 'h_eggs'): W-statistic=0.7707, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2007, 'h_garlic'): W-statistic=0.8710, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2007, 'h_meat_beef_chops'): W-statistic=0.9774, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2007, 'h_meat_chicken_whole'): W-statistic=0.9835, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2007, 'h_meat_pork'): W-statistic=0.9868, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2007, 'h_onions'): W-statistic=0.9700, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2007, 'h_potatoes'): W-statistic=0.9465, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2007, 'h_rice'): W-statistic=0.9860, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2007, 'h_tomatoes'): W-statistic=0.9767, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2007, 'l_beans'): W-statistic=0.9745, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2007, 'l_cabbage'): W-statistic=0.9735, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2007, 'l_carrots'): W-statistic=0.9232, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2007, 'l_eggs'): W-statistic=0.8081, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2007, 'l_garlic'): W-statistic=0.8831, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2007, 'l_meat_beef_chops'): W-statistic=0.9785, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2007, 'l_meat_chicken_whole'): W-statistic=0.9823, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2007, 'l_meat_pork'): W-statistic=0.9850, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2007, 'l_onions'): W-statistic=0.9726, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2007, 'l_potatoes'): W-statistic=0.9548, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2007, 'l_rice'): W-statistic=0.9883, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2007, 'l_tomatoes'): W-statistic=0.9798, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2007, 'meat_beef_chops'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2007, 'meat_chicken_whole'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2007, 'meat_pork'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2007, 'o_beans'): W-statistic=0.9748, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2007, 'o_cabbage'): W-statistic=0.9687, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2007, 'o_carrots'): W-statistic=0.9156, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2007, 'o_eggs'): W-statistic=0.7863, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2007, 'o_garlic'): W-statistic=0.8760, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2007, 'o_meat_beef_chops'): W-statistic=0.9779, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2007, 'o_meat_chicken_whole'): W-statistic=0.9830, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2007, 'o_meat_pork'): W-statistic=0.9862, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2007, 'o_onions'): W-statistic=0.9721, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2007, 'o_potatoes'): W-statistic=0.9501, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2007, 'o_rice'): W-statistic=0.9873, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2007, 'o_tomatoes'): W-statistic=0.9769, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2007, 'onions'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2007, 'potatoes'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2007, 'rice'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2007, 'tomatoes'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2008, 'beans'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2008, 'c_beans'): W-statistic=0.9708, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2008, 'c_cabbage'): W-statistic=0.9693, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2008, 'c_carrots'): W-statistic=0.9172, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2008, 'c_eggs'): W-statistic=0.8352, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2008, 'c_garlic'): W-statistic=0.9517, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2008, 'c_meat_beef_chops'): W-statistic=0.9800, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2008, 'c_meat_chicken_whole'): W-statistic=0.9635, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2008, 'c_meat_pork'): W-statistic=0.9843, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2008, 'c_onions'): W-statistic=0.9727, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2008, 'c_potatoes'): W-statistic=0.9938, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2008, 'c_rice'): W-statistic=0.9868, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2008, 'c_tomatoes'): W-statistic=0.9770, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2008, 'cabbage'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2008, 'carrots'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2008, 'eggs'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2008, 'garlic'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2008, 'h_beans'): W-statistic=0.9655, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2008, 'h_cabbage'): W-statistic=0.9564, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2008, 'h_carrots'): W-statistic=0.9002, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2008, 'h_eggs'): W-statistic=0.8239, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2008, 'h_garlic'): W-statistic=0.9562, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2008, 'h_meat_beef_chops'): W-statistic=0.9783, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2008, 'h_meat_chicken_whole'): W-statistic=0.9626, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2008, 'h_meat_pork'): W-statistic=0.9879, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2008, 'h_onions'): W-statistic=0.9813, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2008, 'h_potatoes'): W-statistic=0.9896, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2008, 'h_rice'): W-statistic=0.9837, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2008, 'h_tomatoes'): W-statistic=0.9599, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2008, 'l_beans'): W-statistic=0.9778, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2008, 'l_cabbage'): W-statistic=0.9775, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2008, 'l_carrots'): W-statistic=0.9418, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2008, 'l_eggs'): W-statistic=0.8562, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2008, 'l_garlic'): W-statistic=0.9574, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2008, 'l_meat_beef_chops'): W-statistic=0.9798, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2008, 'l_meat_chicken_whole'): W-statistic=0.9730, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2008, 'l_meat_pork'): W-statistic=0.9872, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2008, 'l_onions'): W-statistic=0.9765, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2008, 'l_potatoes'): W-statistic=0.9950, p-value=0.0002, Result=Shapiro-Wilk Test Failed\n(2008, 'l_rice'): W-statistic=0.9780, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2008, 'l_tomatoes'): W-statistic=0.9855, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2008, 'meat_beef_chops'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2008, 'meat_chicken_whole'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2008, 'meat_pork'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2008, 'o_beans'): W-statistic=0.9725, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2008, 'o_cabbage'): W-statistic=0.9678, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2008, 'o_carrots'): W-statistic=0.9246, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2008, 'o_eggs'): W-statistic=0.8418, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2008, 'o_garlic'): W-statistic=0.9593, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2008, 'o_meat_beef_chops'): W-statistic=0.9794, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2008, 'o_meat_chicken_whole'): W-statistic=0.9685, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2008, 'o_meat_pork'): W-statistic=0.9887, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2008, 'o_onions'): W-statistic=0.9790, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2008, 'o_potatoes'): W-statistic=0.9940, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2008, 'o_rice'): W-statistic=0.9760, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2008, 'o_tomatoes'): W-statistic=0.9777, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2008, 'onions'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2008, 'potatoes'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2008, 'rice'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2008, 'tomatoes'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2009, 'beans'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2009, 'c_beans'): W-statistic=0.9501, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2009, 'c_cabbage'): W-statistic=0.9093, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2009, 'c_carrots'): W-statistic=0.8038, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2009, 'c_eggs'): W-statistic=0.9751, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2009, 'c_garlic'): W-statistic=0.8969, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2009, 'c_meat_beef_chops'): W-statistic=0.9831, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2009, 'c_meat_chicken_whole'): W-statistic=0.9156, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2009, 'c_meat_pork'): W-statistic=0.9902, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2009, 'c_onions'): W-statistic=0.9815, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2009, 'c_potatoes'): W-statistic=0.9818, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2009, 'c_rice'): W-statistic=0.9763, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2009, 'c_tomatoes'): W-statistic=0.9638, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2009, 'cabbage'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2009, 'carrots'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2009, 'eggs'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2009, 'garlic'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2009, 'h_beans'): W-statistic=0.9447, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2009, 'h_cabbage'): W-statistic=0.8380, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2009, 'h_carrots'): W-statistic=0.7526, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2009, 'h_eggs'): W-statistic=0.9526, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2009, 'h_garlic'): W-statistic=0.8933, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2009, 'h_meat_beef_chops'): W-statistic=0.9827, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2009, 'h_meat_chicken_whole'): W-statistic=0.9065, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2009, 'h_meat_pork'): W-statistic=0.9902, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2009, 'h_onions'): W-statistic=0.9875, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2009, 'h_potatoes'): W-statistic=0.9680, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2009, 'h_rice'): W-statistic=0.9855, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2009, 'h_tomatoes'): W-statistic=0.9395, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2009, 'l_beans'): W-statistic=0.9525, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2009, 'l_cabbage'): W-statistic=0.9543, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2009, 'l_carrots'): W-statistic=0.8900, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2009, 'l_eggs'): W-statistic=0.9899, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2009, 'l_garlic'): W-statistic=0.9043, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2009, 'l_meat_beef_chops'): W-statistic=0.9848, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2009, 'l_meat_chicken_whole'): W-statistic=0.9219, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2009, 'l_meat_pork'): W-statistic=0.9925, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2009, 'l_onions'): W-statistic=0.9896, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2009, 'l_potatoes'): W-statistic=0.9938, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2009, 'l_rice'): W-statistic=0.9818, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2009, 'l_tomatoes'): W-statistic=0.9844, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2009, 'meat_beef_chops'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2009, 'meat_chicken_whole'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2009, 'meat_pork'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2009, 'o_beans'): W-statistic=0.9478, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2009, 'o_cabbage'): W-statistic=0.9047, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2009, 'o_carrots'): W-statistic=0.8267, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2009, 'o_eggs'): W-statistic=0.9776, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2009, 'o_garlic'): W-statistic=0.9004, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2009, 'o_meat_beef_chops'): W-statistic=0.9843, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2009, 'o_meat_chicken_whole'): W-statistic=0.9148, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2009, 'o_meat_pork'): W-statistic=0.9921, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2009, 'o_onions'): W-statistic=0.9875, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2009, 'o_potatoes'): W-statistic=0.9857, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2009, 'o_rice'): W-statistic=0.9820, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2009, 'o_tomatoes'): W-statistic=0.9635, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2009, 'onions'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2009, 'potatoes'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2009, 'rice'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2009, 'tomatoes'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2010, 'beans'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2010, 'c_beans'): W-statistic=0.9543, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2010, 'c_cabbage'): W-statistic=0.9283, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2010, 'c_carrots'): W-statistic=0.8764, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2010, 'c_eggs'): W-statistic=0.9852, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2010, 'c_garlic'): W-statistic=0.8865, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2010, 'c_meat_beef_chops'): W-statistic=0.9814, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2010, 'c_meat_chicken_whole'): W-statistic=0.8979, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2010, 'c_meat_pork'): W-statistic=0.9908, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2010, 'c_onions'): W-statistic=0.9471, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2010, 'c_potatoes'): W-statistic=0.9623, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2010, 'c_rice'): W-statistic=0.9501, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2010, 'c_tomatoes'): W-statistic=0.9137, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2010, 'cabbage'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2010, 'carrots'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2010, 'eggs'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2010, 'garlic'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2010, 'h_beans'): W-statistic=0.9520, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2010, 'h_cabbage'): W-statistic=0.9073, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2010, 'h_carrots'): W-statistic=0.8540, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2010, 'h_eggs'): W-statistic=0.9728, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2010, 'h_garlic'): W-statistic=0.8719, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2010, 'h_meat_beef_chops'): W-statistic=0.9808, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2010, 'h_meat_chicken_whole'): W-statistic=0.8877, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2010, 'h_meat_pork'): W-statistic=0.9881, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2010, 'h_onions'): W-statistic=0.9404, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2010, 'h_potatoes'): W-statistic=0.9528, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2010, 'h_rice'): W-statistic=0.9625, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2010, 'h_tomatoes'): W-statistic=0.8508, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2010, 'l_beans'): W-statistic=0.9599, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2010, 'l_cabbage'): W-statistic=0.9535, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2010, 'l_carrots'): W-statistic=0.9132, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2010, 'l_eggs'): W-statistic=0.9922, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2010, 'l_garlic'): W-statistic=0.9021, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2010, 'l_meat_beef_chops'): W-statistic=0.9810, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2010, 'l_meat_chicken_whole'): W-statistic=0.9155, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2010, 'l_meat_pork'): W-statistic=0.9942, p-value=0.0001, Result=Shapiro-Wilk Test Failed\n(2010, 'l_onions'): W-statistic=0.9746, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2010, 'l_potatoes'): W-statistic=0.9753, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2010, 'l_rice'): W-statistic=0.9485, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2010, 'l_tomatoes'): W-statistic=0.9705, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2010, 'meat_beef_chops'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2010, 'meat_chicken_whole'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2010, 'meat_pork'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2010, 'o_beans'): W-statistic=0.9566, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2010, 'o_cabbage'): W-statistic=0.9337, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2010, 'o_carrots'): W-statistic=0.8872, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2010, 'o_eggs'): W-statistic=0.9871, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2010, 'o_garlic'): W-statistic=0.8904, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2010, 'o_meat_beef_chops'): W-statistic=0.9813, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2010, 'o_meat_chicken_whole'): W-statistic=0.9039, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2010, 'o_meat_pork'): W-statistic=0.9929, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2010, 'o_onions'): W-statistic=0.9455, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2010, 'o_potatoes'): W-statistic=0.9665, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2010, 'o_rice'): W-statistic=0.9575, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2010, 'o_tomatoes'): W-statistic=0.9184, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2010, 'onions'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2010, 'potatoes'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2010, 'rice'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2010, 'tomatoes'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2011, 'beans'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2011, 'c_beans'): W-statistic=0.9708, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2011, 'c_cabbage'): W-statistic=0.9343, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2011, 'c_carrots'): W-statistic=0.9041, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2011, 'c_eggs'): W-statistic=0.9839, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2011, 'c_garlic'): W-statistic=0.8565, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2011, 'c_meat_beef_chops'): W-statistic=0.9832, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2011, 'c_meat_chicken_whole'): W-statistic=0.9231, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2011, 'c_meat_pork'): W-statistic=0.9822, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2011, 'c_onions'): W-statistic=0.9888, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2011, 'c_potatoes'): W-statistic=0.9831, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2011, 'c_rice'): W-statistic=0.9382, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2011, 'c_tomatoes'): W-statistic=0.9664, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2011, 'cabbage'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2011, 'carrots'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2011, 'eggs'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2011, 'garlic'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2011, 'h_beans'): W-statistic=0.9627, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2011, 'h_cabbage'): W-statistic=0.8951, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2011, 'h_carrots'): W-statistic=0.8765, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2011, 'h_eggs'): W-statistic=0.9829, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2011, 'h_garlic'): W-statistic=0.8450, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2011, 'h_meat_beef_chops'): W-statistic=0.9831, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2011, 'h_meat_chicken_whole'): W-statistic=0.9082, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2011, 'h_meat_pork'): W-statistic=0.9868, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2011, 'h_onions'): W-statistic=0.9909, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2011, 'h_potatoes'): W-statistic=0.9815, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2011, 'h_rice'): W-statistic=0.9455, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2011, 'h_tomatoes'): W-statistic=0.9557, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2011, 'l_beans'): W-statistic=0.9737, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2011, 'l_cabbage'): W-statistic=0.9655, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2011, 'l_carrots'): W-statistic=0.9436, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2011, 'l_eggs'): W-statistic=0.9838, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2011, 'l_garlic'): W-statistic=0.8677, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2011, 'l_meat_beef_chops'): W-statistic=0.9835, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2011, 'l_meat_chicken_whole'): W-statistic=0.9334, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2011, 'l_meat_pork'): W-statistic=0.9819, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2011, 'l_onions'): W-statistic=0.9880, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2011, 'l_potatoes'): W-statistic=0.9838, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2011, 'l_rice'): W-statistic=0.9453, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2011, 'l_tomatoes'): W-statistic=0.9770, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2011, 'meat_beef_chops'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2011, 'meat_chicken_whole'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2011, 'meat_pork'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2011, 'o_beans'): W-statistic=0.9682, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2011, 'o_cabbage'): W-statistic=0.9355, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2011, 'o_carrots'): W-statistic=0.9138, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2011, 'o_eggs'): W-statistic=0.9832, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2011, 'o_garlic'): W-statistic=0.8526, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2011, 'o_meat_beef_chops'): W-statistic=0.9834, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2011, 'o_meat_chicken_whole'): W-statistic=0.9199, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2011, 'o_meat_pork'): W-statistic=0.9855, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2011, 'o_onions'): W-statistic=0.9886, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2011, 'o_potatoes'): W-statistic=0.9828, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2011, 'o_rice'): W-statistic=0.9435, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2011, 'o_tomatoes'): W-statistic=0.9704, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2011, 'onions'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2011, 'potatoes'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2011, 'rice'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2011, 'tomatoes'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2012, 'beans'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2012, 'c_beans'): W-statistic=0.9838, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2012, 'c_cabbage'): W-statistic=0.9018, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2012, 'c_carrots'): W-statistic=0.8437, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2012, 'c_eggs'): W-statistic=0.9731, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2012, 'c_garlic'): W-statistic=0.8728, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2012, 'c_meat_beef_chops'): W-statistic=0.9877, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2012, 'c_meat_chicken_whole'): W-statistic=0.9272, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2012, 'c_meat_pork'): W-statistic=0.9947, p-value=0.0001, Result=Shapiro-Wilk Test Failed\n(2012, 'c_onions'): W-statistic=0.9906, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2012, 'c_potatoes'): W-statistic=0.9913, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2012, 'c_rice'): W-statistic=0.9035, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2012, 'c_tomatoes'): W-statistic=0.9510, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2012, 'cabbage'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2012, 'carrots'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2012, 'eggs'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2012, 'garlic'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2012, 'h_beans'): W-statistic=0.9825, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2012, 'h_cabbage'): W-statistic=0.8460, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2012, 'h_carrots'): W-statistic=0.8071, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2012, 'h_eggs'): W-statistic=0.9729, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2012, 'h_garlic'): W-statistic=0.8516, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2012, 'h_meat_beef_chops'): W-statistic=0.9871, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2012, 'h_meat_chicken_whole'): W-statistic=0.9299, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2012, 'h_meat_pork'): W-statistic=0.9940, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2012, 'h_onions'): W-statistic=0.9847, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2012, 'h_potatoes'): W-statistic=0.9883, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2012, 'h_rice'): W-statistic=0.9201, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2012, 'h_tomatoes'): W-statistic=0.9266, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2012, 'l_beans'): W-statistic=0.9834, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2012, 'l_cabbage'): W-statistic=0.9489, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2012, 'l_carrots'): W-statistic=0.8770, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2012, 'l_eggs'): W-statistic=0.9794, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2012, 'l_garlic'): W-statistic=0.8978, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2012, 'l_meat_beef_chops'): W-statistic=0.9881, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2012, 'l_meat_chicken_whole'): W-statistic=0.9318, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2012, 'l_meat_pork'): W-statistic=0.9955, p-value=0.0006, Result=Shapiro-Wilk Test Failed\n(2012, 'l_onions'): W-statistic=0.9944, p-value=0.0001, Result=Shapiro-Wilk Test Failed\n(2012, 'l_potatoes'): W-statistic=0.9908, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2012, 'l_rice'): W-statistic=0.9038, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2012, 'l_tomatoes'): W-statistic=0.9701, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2012, 'meat_beef_chops'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2012, 'meat_chicken_whole'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2012, 'meat_pork'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2012, 'o_beans'): W-statistic=0.9832, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2012, 'o_cabbage'): W-statistic=0.8979, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2012, 'o_carrots'): W-statistic=0.8408, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2012, 'o_eggs'): W-statistic=0.9744, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2012, 'o_garlic'): W-statistic=0.8744, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2012, 'o_meat_beef_chops'): W-statistic=0.9876, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2012, 'o_meat_chicken_whole'): W-statistic=0.9329, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2012, 'o_meat_pork'): W-statistic=0.9947, p-value=0.0001, Result=Shapiro-Wilk Test Failed\n(2012, 'o_onions'): W-statistic=0.9928, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2012, 'o_potatoes'): W-statistic=0.9918, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2012, 'o_rice'): W-statistic=0.9116, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2012, 'o_tomatoes'): W-statistic=0.9564, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2012, 'onions'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2012, 'potatoes'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2012, 'rice'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2012, 'tomatoes'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2013, 'beans'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2013, 'c_beans'): W-statistic=0.9782, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2013, 'c_cabbage'): W-statistic=0.9461, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2013, 'c_carrots'): W-statistic=0.9320, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2013, 'c_eggs'): W-statistic=0.9636, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2013, 'c_garlic'): W-statistic=0.8937, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2013, 'c_meat_beef_chops'): W-statistic=0.9865, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2013, 'c_meat_chicken_whole'): W-statistic=0.9518, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2013, 'c_meat_pork'): W-statistic=0.9953, p-value=0.0005, Result=Shapiro-Wilk Test Failed\n(2013, 'c_onions'): W-statistic=0.9945, p-value=0.0001, Result=Shapiro-Wilk Test Failed\n(2013, 'c_potatoes'): W-statistic=0.9956, p-value=0.0008, Result=Shapiro-Wilk Test Failed\n(2013, 'c_rice'): W-statistic=0.9559, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2013, 'c_tomatoes'): W-statistic=0.9513, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2013, 'cabbage'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2013, 'carrots'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2013, 'eggs'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2013, 'garlic'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2013, 'h_beans'): W-statistic=0.9752, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2013, 'h_cabbage'): W-statistic=0.9323, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2013, 'h_carrots'): W-statistic=0.9116, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2013, 'h_eggs'): W-statistic=0.9638, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2013, 'h_garlic'): W-statistic=0.8828, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2013, 'h_meat_beef_chops'): W-statistic=0.9859, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2013, 'h_meat_chicken_whole'): W-statistic=0.9497, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2013, 'h_meat_pork'): W-statistic=0.9958, p-value=0.0011, Result=Shapiro-Wilk Test Failed\n(2013, 'h_onions'): W-statistic=0.9965, p-value=0.0052, Result=Shapiro-Wilk Test Failed\n(2013, 'h_potatoes'): W-statistic=0.9948, p-value=0.0002, Result=Shapiro-Wilk Test Failed\n(2013, 'h_rice'): W-statistic=0.9574, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2013, 'h_tomatoes'): W-statistic=0.9247, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2013, 'l_beans'): W-statistic=0.9817, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2013, 'l_cabbage'): W-statistic=0.9581, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2013, 'l_carrots'): W-statistic=0.9421, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2013, 'l_eggs'): W-statistic=0.9720, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2013, 'l_garlic'): W-statistic=0.9022, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2013, 'l_meat_beef_chops'): W-statistic=0.9882, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2013, 'l_meat_chicken_whole'): W-statistic=0.9460, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2013, 'l_meat_pork'): W-statistic=0.9947, p-value=0.0001, Result=Shapiro-Wilk Test Failed\n(2013, 'l_onions'): W-statistic=0.9943, p-value=0.0001, Result=Shapiro-Wilk Test Failed\n(2013, 'l_potatoes'): W-statistic=0.9962, p-value=0.0023, Result=Shapiro-Wilk Test Failed\n(2013, 'l_rice'): W-statistic=0.9434, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2013, 'l_tomatoes'): W-statistic=0.9643, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2013, 'meat_beef_chops'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2013, 'meat_chicken_whole'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2013, 'meat_pork'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2013, 'o_beans'): W-statistic=0.9785, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2013, 'o_cabbage'): W-statistic=0.9439, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2013, 'o_carrots'): W-statistic=0.9244, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2013, 'o_eggs'): W-statistic=0.9667, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2013, 'o_garlic'): W-statistic=0.8913, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2013, 'o_meat_beef_chops'): W-statistic=0.9876, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2013, 'o_meat_chicken_whole'): W-statistic=0.9472, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2013, 'o_meat_pork'): W-statistic=0.9956, p-value=0.0007, Result=Shapiro-Wilk Test Failed\n(2013, 'o_onions'): W-statistic=0.9948, p-value=0.0002, Result=Shapiro-Wilk Test Failed\n(2013, 'o_potatoes'): W-statistic=0.9958, p-value=0.0010, Result=Shapiro-Wilk Test Failed\n(2013, 'o_rice'): W-statistic=0.9466, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2013, 'o_tomatoes'): W-statistic=0.9549, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2013, 'onions'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2013, 'potatoes'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2013, 'rice'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2013, 'tomatoes'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2014, 'beans'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2014, 'c_beans'): W-statistic=0.9756, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2014, 'c_cabbage'): W-statistic=0.9229, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2014, 'c_carrots'): W-statistic=0.8970, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2014, 'c_eggs'): W-statistic=0.7415, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2014, 'c_garlic'): W-statistic=0.8013, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2014, 'c_meat_beef_chops'): W-statistic=0.9866, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2014, 'c_meat_chicken_whole'): W-statistic=0.9050, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2014, 'c_meat_pork'): W-statistic=0.9877, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2014, 'c_onions'): W-statistic=0.9818, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2014, 'c_potatoes'): W-statistic=0.9871, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2014, 'c_rice'): W-statistic=0.9931, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2014, 'c_tomatoes'): W-statistic=0.9469, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2014, 'cabbage'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2014, 'carrots'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2014, 'eggs'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2014, 'garlic'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2014, 'h_beans'): W-statistic=0.9717, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2014, 'h_cabbage'): W-statistic=0.9025, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2014, 'h_carrots'): W-statistic=0.8768, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2014, 'h_eggs'): W-statistic=0.7433, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2014, 'h_garlic'): W-statistic=0.7698, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2014, 'h_meat_beef_chops'): W-statistic=0.9853, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2014, 'h_meat_chicken_whole'): W-statistic=0.8970, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2014, 'h_meat_pork'): W-statistic=0.9895, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2014, 'h_onions'): W-statistic=0.9775, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2014, 'h_potatoes'): W-statistic=0.9862, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2014, 'h_rice'): W-statistic=0.9959, p-value=0.0013, Result=Shapiro-Wilk Test Failed\n(2014, 'h_tomatoes'): W-statistic=0.9370, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2014, 'l_beans'): W-statistic=0.9748, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2014, 'l_cabbage'): W-statistic=0.9419, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2014, 'l_carrots'): W-statistic=0.9242, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2014, 'l_eggs'): W-statistic=0.7763, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2014, 'l_garlic'): W-statistic=0.8357, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2014, 'l_meat_beef_chops'): W-statistic=0.9870, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2014, 'l_meat_chicken_whole'): W-statistic=0.9076, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2014, 'l_meat_pork'): W-statistic=0.9885, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2014, 'l_onions'): W-statistic=0.9856, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2014, 'l_potatoes'): W-statistic=0.9897, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2014, 'l_rice'): W-statistic=0.9951, p-value=0.0003, Result=Shapiro-Wilk Test Failed\n(2014, 'l_tomatoes'): W-statistic=0.9709, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2014, 'meat_beef_chops'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2014, 'meat_chicken_whole'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2014, 'meat_pork'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2014, 'o_beans'): W-statistic=0.9727, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2014, 'o_cabbage'): W-statistic=0.9182, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2014, 'o_carrots'): W-statistic=0.9029, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2014, 'o_eggs'): W-statistic=0.7638, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2014, 'o_garlic'): W-statistic=0.8059, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2014, 'o_meat_beef_chops'): W-statistic=0.9859, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2014, 'o_meat_chicken_whole'): W-statistic=0.9022, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2014, 'o_meat_pork'): W-statistic=0.9893, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2014, 'o_onions'): W-statistic=0.9815, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2014, 'o_potatoes'): W-statistic=0.9881, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2014, 'o_rice'): W-statistic=0.9953, p-value=0.0004, Result=Shapiro-Wilk Test Failed\n(2014, 'o_tomatoes'): W-statistic=0.9575, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2014, 'onions'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2014, 'potatoes'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2014, 'rice'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2014, 'tomatoes'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2015, 'beans'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2015, 'c_beans'): W-statistic=0.9825, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2015, 'c_cabbage'): W-statistic=0.9308, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2015, 'c_carrots'): W-statistic=0.9343, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2015, 'c_eggs'): W-statistic=0.7370, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2015, 'c_garlic'): W-statistic=0.6109, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2015, 'c_meat_beef_chops'): W-statistic=0.9951, p-value=0.0003, Result=Shapiro-Wilk Test Failed\n(2015, 'c_meat_chicken_whole'): W-statistic=0.9318, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2015, 'c_meat_pork'): W-statistic=0.9940, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2015, 'c_onions'): W-statistic=0.9163, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2015, 'c_potatoes'): W-statistic=0.9960, p-value=0.0019, Result=Shapiro-Wilk Test Failed\n(2015, 'c_rice'): W-statistic=0.9927, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2015, 'c_tomatoes'): W-statistic=0.9735, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2015, 'cabbage'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2015, 'carrots'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2015, 'eggs'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2015, 'garlic'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2015, 'h_beans'): W-statistic=0.9770, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2015, 'h_cabbage'): W-statistic=0.8833, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2015, 'h_carrots'): W-statistic=0.9049, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2015, 'h_eggs'): W-statistic=0.7461, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2015, 'h_garlic'): W-statistic=0.5726, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2015, 'h_meat_beef_chops'): W-statistic=0.9948, p-value=0.0002, Result=Shapiro-Wilk Test Failed\n(2015, 'h_meat_chicken_whole'): W-statistic=0.9170, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2015, 'h_meat_pork'): W-statistic=0.9903, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2015, 'h_onions'): W-statistic=0.9050, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2015, 'h_potatoes'): W-statistic=0.9954, p-value=0.0005, Result=Shapiro-Wilk Test Failed\n(2015, 'h_rice'): W-statistic=0.9934, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2015, 'h_tomatoes'): W-statistic=0.9665, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2015, 'l_beans'): W-statistic=0.9832, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2015, 'l_cabbage'): W-statistic=0.9581, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2015, 'l_carrots'): W-statistic=0.9403, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2015, 'l_eggs'): W-statistic=0.7376, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2015, 'l_garlic'): W-statistic=0.6673, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2015, 'l_meat_beef_chops'): W-statistic=0.9949, p-value=0.0002, Result=Shapiro-Wilk Test Failed\n(2015, 'l_meat_chicken_whole'): W-statistic=0.9362, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2015, 'l_meat_pork'): W-statistic=0.9938, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2015, 'l_onions'): W-statistic=0.9409, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2015, 'l_potatoes'): W-statistic=0.9958, p-value=0.0012, Result=Shapiro-Wilk Test Failed\n(2015, 'l_rice'): W-statistic=0.9937, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2015, 'l_tomatoes'): W-statistic=0.9737, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2015, 'meat_beef_chops'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2015, 'meat_chicken_whole'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2015, 'meat_pork'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2015, 'o_beans'): W-statistic=0.9797, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2015, 'o_cabbage'): W-statistic=0.9245, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2015, 'o_carrots'): W-statistic=0.9211, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2015, 'o_eggs'): W-statistic=0.7455, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2015, 'o_garlic'): W-statistic=0.6129, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2015, 'o_meat_beef_chops'): W-statistic=0.9949, p-value=0.0002, Result=Shapiro-Wilk Test Failed\n(2015, 'o_meat_chicken_whole'): W-statistic=0.9263, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2015, 'o_meat_pork'): W-statistic=0.9910, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2015, 'o_onions'): W-statistic=0.9197, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2015, 'o_potatoes'): W-statistic=0.9964, p-value=0.0041, Result=Shapiro-Wilk Test Failed\n(2015, 'o_rice'): W-statistic=0.9933, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2015, 'o_tomatoes'): W-statistic=0.9739, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2015, 'onions'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2015, 'potatoes'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2015, 'rice'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2015, 'tomatoes'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2016, 'beans'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2016, 'c_beans'): W-statistic=0.9825, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2016, 'c_cabbage'): W-statistic=0.9503, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2016, 'c_carrots'): W-statistic=0.9378, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2016, 'c_eggs'): W-statistic=0.8072, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2016, 'c_garlic'): W-statistic=0.7251, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2016, 'c_meat_beef_chops'): W-statistic=0.9924, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2016, 'c_meat_chicken_whole'): W-statistic=0.9484, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2016, 'c_meat_pork'): W-statistic=0.9975, p-value=0.0384, Result=Shapiro-Wilk Test Failed\n(2016, 'c_onions'): W-statistic=0.9776, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2016, 'c_potatoes'): W-statistic=0.9816, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2016, 'c_rice'): W-statistic=0.9847, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2016, 'c_tomatoes'): W-statistic=0.9582, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2016, 'cabbage'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2016, 'carrots'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2016, 'eggs'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2016, 'garlic'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2016, 'h_beans'): W-statistic=0.9821, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2016, 'h_cabbage'): W-statistic=0.9239, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2016, 'h_carrots'): W-statistic=0.9214, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2016, 'h_eggs'): W-statistic=0.7720, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2016, 'h_garlic'): W-statistic=0.6910, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2016, 'h_meat_beef_chops'): W-statistic=0.9924, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2016, 'h_meat_chicken_whole'): W-statistic=0.9473, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2016, 'h_meat_pork'): W-statistic=0.9962, p-value=0.0024, Result=Shapiro-Wilk Test Failed\n(2016, 'h_onions'): W-statistic=0.9839, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2016, 'h_potatoes'): W-statistic=0.9671, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2016, 'h_rice'): W-statistic=0.9865, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2016, 'h_tomatoes'): W-statistic=0.9569, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2016, 'l_beans'): W-statistic=0.9844, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2016, 'l_cabbage'): W-statistic=0.9661, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2016, 'l_carrots'): W-statistic=0.9559, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2016, 'l_eggs'): W-statistic=0.7503, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2016, 'l_garlic'): W-statistic=0.7536, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2016, 'l_meat_beef_chops'): W-statistic=0.9920, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2016, 'l_meat_chicken_whole'): W-statistic=0.9466, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2016, 'l_meat_pork'): W-statistic=0.9965, p-value=0.0049, Result=Shapiro-Wilk Test Failed\n(2016, 'l_onions'): W-statistic=0.9804, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2016, 'l_potatoes'): W-statistic=0.9929, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2016, 'l_rice'): W-statistic=0.9882, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2016, 'l_tomatoes'): W-statistic=0.9563, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2016, 'meat_beef_chops'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2016, 'meat_chicken_whole'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2016, 'meat_pork'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2016, 'o_beans'): W-statistic=0.9835, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2016, 'o_cabbage'): W-statistic=0.9523, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2016, 'o_carrots'): W-statistic=0.9517, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2016, 'o_eggs'): W-statistic=0.7417, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2016, 'o_garlic'): W-statistic=0.7172, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2016, 'o_meat_beef_chops'): W-statistic=0.9925, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2016, 'o_meat_chicken_whole'): W-statistic=0.9463, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2016, 'o_meat_pork'): W-statistic=0.9962, p-value=0.0024, Result=Shapiro-Wilk Test Failed\n(2016, 'o_onions'): W-statistic=0.9768, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2016, 'o_potatoes'): W-statistic=0.9841, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2016, 'o_rice'): W-statistic=0.9871, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2016, 'o_tomatoes'): W-statistic=0.9624, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2016, 'onions'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2016, 'potatoes'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2016, 'rice'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2016, 'tomatoes'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2017, 'beans'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2017, 'c_beans'): W-statistic=0.9645, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2017, 'c_cabbage'): W-statistic=0.9547, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2017, 'c_carrots'): W-statistic=0.8748, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2017, 'c_eggs'): W-statistic=0.9687, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2017, 'c_garlic'): W-statistic=0.8498, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2017, 'c_meat_beef_chops'): W-statistic=0.9910, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2017, 'c_meat_chicken_whole'): W-statistic=0.9418, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2017, 'c_meat_pork'): W-statistic=0.9790, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2017, 'c_onions'): W-statistic=0.8922, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2017, 'c_potatoes'): W-statistic=0.9959, p-value=0.0015, Result=Shapiro-Wilk Test Failed\n(2017, 'c_rice'): W-statistic=0.9785, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2017, 'c_tomatoes'): W-statistic=0.9701, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2017, 'cabbage'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2017, 'carrots'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2017, 'eggs'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2017, 'garlic'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2017, 'h_beans'): W-statistic=0.9609, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2017, 'h_cabbage'): W-statistic=0.8987, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2017, 'h_carrots'): W-statistic=0.7946, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2017, 'h_eggs'): W-statistic=0.9727, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2017, 'h_garlic'): W-statistic=0.8455, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2017, 'h_meat_beef_chops'): W-statistic=0.9891, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2017, 'h_meat_chicken_whole'): W-statistic=0.9340, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2017, 'h_meat_pork'): W-statistic=0.9828, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2017, 'h_onions'): W-statistic=0.9170, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2017, 'h_potatoes'): W-statistic=0.9944, p-value=0.0001, Result=Shapiro-Wilk Test Failed\n(2017, 'h_rice'): W-statistic=0.9779, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2017, 'h_tomatoes'): W-statistic=0.9416, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2017, 'l_beans'): W-statistic=0.9729, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2017, 'l_cabbage'): W-statistic=0.9670, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2017, 'l_carrots'): W-statistic=0.9341, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2017, 'l_eggs'): W-statistic=0.9771, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2017, 'l_garlic'): W-statistic=0.8525, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2017, 'l_meat_beef_chops'): W-statistic=0.9915, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2017, 'l_meat_chicken_whole'): W-statistic=0.9526, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2017, 'l_meat_pork'): W-statistic=0.9831, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2017, 'l_onions'): W-statistic=0.9816, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2017, 'l_potatoes'): W-statistic=0.9968, p-value=0.0092, Result=Shapiro-Wilk Test Failed\n(2017, 'l_rice'): W-statistic=0.9871, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2017, 'l_tomatoes'): W-statistic=0.9636, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2017, 'meat_beef_chops'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2017, 'meat_chicken_whole'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2017, 'meat_pork'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2017, 'o_beans'): W-statistic=0.9674, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2017, 'o_cabbage'): W-statistic=0.9381, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2017, 'o_carrots'): W-statistic=0.8712, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2017, 'o_eggs'): W-statistic=0.9766, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2017, 'o_garlic'): W-statistic=0.8480, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2017, 'o_meat_beef_chops'): W-statistic=0.9903, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2017, 'o_meat_chicken_whole'): W-statistic=0.9447, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2017, 'o_meat_pork'): W-statistic=0.9829, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2017, 'o_onions'): W-statistic=0.9763, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2017, 'o_potatoes'): W-statistic=0.9963, p-value=0.0032, Result=Shapiro-Wilk Test Failed\n(2017, 'o_rice'): W-statistic=0.9833, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2017, 'o_tomatoes'): W-statistic=0.9690, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2017, 'onions'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2017, 'potatoes'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2017, 'rice'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2017, 'tomatoes'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2018, 'beans'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2018, 'c_beans'): W-statistic=0.9725, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2018, 'c_cabbage'): W-statistic=0.8493, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2018, 'c_carrots'): W-statistic=0.9265, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2018, 'c_eggs'): W-statistic=0.9848, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2018, 'c_garlic'): W-statistic=0.8091, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2018, 'c_meat_beef_chops'): W-statistic=0.9803, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2018, 'c_meat_chicken_whole'): W-statistic=0.9283, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2018, 'c_meat_pork'): W-statistic=0.9982, p-value=0.1673, Result=Pass\n(2018, 'c_onions'): W-statistic=0.9594, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2018, 'c_potatoes'): W-statistic=0.9962, p-value=0.0027, Result=Shapiro-Wilk Test Failed\n(2018, 'c_rice'): W-statistic=0.9787, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2018, 'c_tomatoes'): W-statistic=0.9718, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2018, 'cabbage'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2018, 'carrots'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2018, 'eggs'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2018, 'garlic'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2018, 'h_beans'): W-statistic=0.9649, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2018, 'h_cabbage'): W-statistic=0.7648, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2018, 'h_carrots'): W-statistic=0.8764, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2018, 'h_eggs'): W-statistic=0.9818, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2018, 'h_garlic'): W-statistic=0.7901, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2018, 'h_meat_beef_chops'): W-statistic=0.9806, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2018, 'h_meat_chicken_whole'): W-statistic=0.9220, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2018, 'h_meat_pork'): W-statistic=0.9991, p-value=0.8103, Result=Pass\n(2018, 'h_onions'): W-statistic=0.9301, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2018, 'h_potatoes'): W-statistic=0.9901, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2018, 'h_rice'): W-statistic=0.9781, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2018, 'h_tomatoes'): W-statistic=0.9187, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2018, 'l_beans'): W-statistic=0.9743, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2018, 'l_cabbage'): W-statistic=0.9470, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2018, 'l_carrots'): W-statistic=0.9569, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2018, 'l_eggs'): W-statistic=0.9893, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2018, 'l_garlic'): W-statistic=0.8303, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2018, 'l_meat_beef_chops'): W-statistic=0.9814, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2018, 'l_meat_chicken_whole'): W-statistic=0.9387, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2018, 'l_meat_pork'): W-statistic=0.9981, p-value=0.1549, Result=Pass\n(2018, 'l_onions'): W-statistic=0.9711, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2018, 'l_potatoes'): W-statistic=0.9934, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2018, 'l_rice'): W-statistic=0.9924, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2018, 'l_tomatoes'): W-statistic=0.9870, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2018, 'meat_beef_chops'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2018, 'meat_chicken_whole'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2018, 'meat_pork'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2018, 'o_beans'): W-statistic=0.9700, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2018, 'o_cabbage'): W-statistic=0.8640, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2018, 'o_carrots'): W-statistic=0.9272, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2018, 'o_eggs'): W-statistic=0.9851, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2018, 'o_garlic'): W-statistic=0.8100, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2018, 'o_meat_beef_chops'): W-statistic=0.9813, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2018, 'o_meat_chicken_whole'): W-statistic=0.9321, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2018, 'o_meat_pork'): W-statistic=0.9990, p-value=0.7274, Result=Pass\n(2018, 'o_onions'): W-statistic=0.9538, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2018, 'o_potatoes'): W-statistic=0.9937, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2018, 'o_rice'): W-statistic=0.9866, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2018, 'o_tomatoes'): W-statistic=0.9747, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2018, 'onions'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2018, 'potatoes'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2018, 'rice'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2018, 'tomatoes'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2019, 'beans'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2019, 'c_beans'): W-statistic=0.9816, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2019, 'c_cabbage'): W-statistic=0.9854, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2019, 'c_carrots'): W-statistic=0.9791, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2019, 'c_eggs'): W-statistic=0.9900, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2019, 'c_garlic'): W-statistic=0.7890, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2019, 'c_meat_beef_chops'): W-statistic=0.9830, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2019, 'c_meat_chicken_whole'): W-statistic=0.9267, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2019, 'c_meat_pork'): W-statistic=0.9796, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2019, 'c_onions'): W-statistic=0.9701, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2019, 'c_potatoes'): W-statistic=0.9904, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2019, 'c_rice'): W-statistic=0.9831, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2019, 'c_tomatoes'): W-statistic=0.9915, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2019, 'cabbage'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2019, 'carrots'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2019, 'eggs'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2019, 'garlic'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2019, 'h_beans'): W-statistic=0.9783, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2019, 'h_cabbage'): W-statistic=0.9715, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2019, 'h_carrots'): W-statistic=0.9530, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2019, 'h_eggs'): W-statistic=0.9860, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2019, 'h_garlic'): W-statistic=0.7600, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2019, 'h_meat_beef_chops'): W-statistic=0.9826, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2019, 'h_meat_chicken_whole'): W-statistic=0.9140, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2019, 'h_meat_pork'): W-statistic=0.9827, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2019, 'h_onions'): W-statistic=0.9839, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2019, 'h_potatoes'): W-statistic=0.9900, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2019, 'h_rice'): W-statistic=0.9842, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2019, 'h_tomatoes'): W-statistic=0.9889, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2019, 'l_beans'): W-statistic=0.9829, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2019, 'l_cabbage'): W-statistic=0.9875, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2019, 'l_carrots'): W-statistic=0.9849, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2019, 'l_eggs'): W-statistic=0.9916, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2019, 'l_garlic'): W-statistic=0.8258, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2019, 'l_meat_beef_chops'): W-statistic=0.9810, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2019, 'l_meat_chicken_whole'): W-statistic=0.9358, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2019, 'l_meat_pork'): W-statistic=0.9787, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2019, 'l_onions'): W-statistic=0.9896, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2019, 'l_potatoes'): W-statistic=0.9895, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2019, 'l_rice'): W-statistic=0.9928, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2019, 'l_tomatoes'): W-statistic=0.9869, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2019, 'meat_beef_chops'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2019, 'meat_chicken_whole'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2019, 'meat_pork'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2019, 'o_beans'): W-statistic=0.9812, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2019, 'o_cabbage'): W-statistic=0.9790, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2019, 'o_carrots'): W-statistic=0.9683, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2019, 'o_eggs'): W-statistic=0.9895, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2019, 'o_garlic'): W-statistic=0.7942, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2019, 'o_meat_beef_chops'): W-statistic=0.9814, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2019, 'o_meat_chicken_whole'): W-statistic=0.9236, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2019, 'o_meat_pork'): W-statistic=0.9808, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2019, 'o_onions'): W-statistic=0.9908, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2019, 'o_potatoes'): W-statistic=0.9902, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2019, 'o_rice'): W-statistic=0.9930, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2019, 'o_tomatoes'): W-statistic=0.9882, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2019, 'onions'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2019, 'potatoes'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2019, 'rice'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2019, 'tomatoes'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2020, 'beans'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2020, 'c_beans'): W-statistic=0.7958, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2020, 'c_cabbage'): W-statistic=0.9528, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2020, 'c_carrots'): W-statistic=0.9662, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2020, 'c_eggs'): W-statistic=0.9807, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2020, 'c_garlic'): W-statistic=0.7907, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2020, 'c_meat_beef_chops'): W-statistic=0.9712, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2020, 'c_meat_chicken_whole'): W-statistic=0.9766, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2020, 'c_meat_pork'): W-statistic=0.9201, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2020, 'c_onions'): W-statistic=0.9504, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2020, 'c_potatoes'): W-statistic=0.9793, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2020, 'c_rice'): W-statistic=0.9737, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2020, 'c_tomatoes'): W-statistic=0.8707, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2020, 'cabbage'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2020, 'carrots'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2020, 'eggs'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2020, 'garlic'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2020, 'h_beans'): W-statistic=0.7740, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2020, 'h_cabbage'): W-statistic=0.9481, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2020, 'h_carrots'): W-statistic=0.9593, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2020, 'h_eggs'): W-statistic=0.9804, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2020, 'h_garlic'): W-statistic=0.7784, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2020, 'h_meat_beef_chops'): W-statistic=0.9716, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2020, 'h_meat_chicken_whole'): W-statistic=0.9699, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2020, 'h_meat_pork'): W-statistic=0.9239, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2020, 'h_onions'): W-statistic=0.9449, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2020, 'h_potatoes'): W-statistic=0.9785, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2020, 'h_rice'): W-statistic=0.9720, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2020, 'h_tomatoes'): W-statistic=0.8290, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2020, 'l_beans'): W-statistic=0.8250, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2020, 'l_cabbage'): W-statistic=0.9558, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2020, 'l_carrots'): W-statistic=0.9710, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2020, 'l_eggs'): W-statistic=0.9685, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2020, 'l_garlic'): W-statistic=0.8048, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2020, 'l_meat_beef_chops'): W-statistic=0.9721, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2020, 'l_meat_chicken_whole'): W-statistic=0.9763, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2020, 'l_meat_pork'): W-statistic=0.9313, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2020, 'l_onions'): W-statistic=0.9496, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2020, 'l_potatoes'): W-statistic=0.9846, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2020, 'l_rice'): W-statistic=0.9760, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2020, 'l_tomatoes'): W-statistic=0.9116, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2020, 'meat_beef_chops'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2020, 'meat_chicken_whole'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2020, 'meat_pork'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2020, 'o_beans'): W-statistic=0.8034, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2020, 'o_cabbage'): W-statistic=0.9524, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2020, 'o_carrots'): W-statistic=0.9649, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2020, 'o_eggs'): W-statistic=0.9716, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2020, 'o_garlic'): W-statistic=0.7897, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2020, 'o_meat_beef_chops'): W-statistic=0.9724, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2020, 'o_meat_chicken_whole'): W-statistic=0.9734, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2020, 'o_meat_pork'): W-statistic=0.9317, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2020, 'o_onions'): W-statistic=0.9417, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2020, 'o_potatoes'): W-statistic=0.9838, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2020, 'o_rice'): W-statistic=0.9743, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2020, 'o_tomatoes'): W-statistic=0.8697, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2020, 'onions'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2020, 'potatoes'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2020, 'rice'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2020, 'tomatoes'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2021, 'beans'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2021, 'c_beans'): W-statistic=0.9607, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2021, 'c_cabbage'): W-statistic=0.9264, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2021, 'c_carrots'): W-statistic=0.9836, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2021, 'c_eggs'): W-statistic=0.9579, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2021, 'c_garlic'): W-statistic=0.8611, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2021, 'c_meat_beef_chops'): W-statistic=0.9899, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2021, 'c_meat_chicken_whole'): W-statistic=0.9872, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2021, 'c_meat_pork'): W-statistic=0.9748, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2021, 'c_onions'): W-statistic=0.9759, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2021, 'c_potatoes'): W-statistic=0.9909, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2021, 'c_rice'): W-statistic=0.9633, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2021, 'c_tomatoes'): W-statistic=0.9674, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2021, 'cabbage'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2021, 'carrots'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2021, 'eggs'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2021, 'garlic'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2021, 'h_beans'): W-statistic=0.9342, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2021, 'h_cabbage'): W-statistic=0.9136, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2021, 'h_carrots'): W-statistic=0.9758, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2021, 'h_eggs'): W-statistic=0.9540, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2021, 'h_garlic'): W-statistic=0.8581, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2021, 'h_meat_beef_chops'): W-statistic=0.9903, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2021, 'h_meat_chicken_whole'): W-statistic=0.9860, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2021, 'h_meat_pork'): W-statistic=0.9766, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2021, 'h_onions'): W-statistic=0.9663, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2021, 'h_potatoes'): W-statistic=0.9937, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2021, 'h_rice'): W-statistic=0.9577, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2021, 'h_tomatoes'): W-statistic=0.9218, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2021, 'l_beans'): W-statistic=0.9692, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2021, 'l_cabbage'): W-statistic=0.9573, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2021, 'l_carrots'): W-statistic=0.9890, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2021, 'l_eggs'): W-statistic=0.9590, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2021, 'l_garlic'): W-statistic=0.8681, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2021, 'l_meat_beef_chops'): W-statistic=0.9891, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2021, 'l_meat_chicken_whole'): W-statistic=0.9919, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2021, 'l_meat_pork'): W-statistic=0.9785, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2021, 'l_onions'): W-statistic=0.9887, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2021, 'l_potatoes'): W-statistic=0.9894, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2021, 'l_rice'): W-statistic=0.9717, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2021, 'l_tomatoes'): W-statistic=0.9894, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2021, 'meat_beef_chops'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2021, 'meat_chicken_whole'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2021, 'meat_pork'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2021, 'o_beans'): W-statistic=0.9462, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2021, 'o_cabbage'): W-statistic=0.9365, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2021, 'o_carrots'): W-statistic=0.9827, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2021, 'o_eggs'): W-statistic=0.9570, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2021, 'o_garlic'): W-statistic=0.8640, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2021, 'o_meat_beef_chops'): W-statistic=0.9896, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2021, 'o_meat_chicken_whole'): W-statistic=0.9902, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2021, 'o_meat_pork'): W-statistic=0.9784, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2021, 'o_onions'): W-statistic=0.9725, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2021, 'o_potatoes'): W-statistic=0.9924, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2021, 'o_rice'): W-statistic=0.9657, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2021, 'o_tomatoes'): W-statistic=0.9542, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2021, 'onions'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2021, 'potatoes'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2021, 'rice'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2021, 'tomatoes'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2022, 'beans'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2022, 'c_beans'): W-statistic=0.9779, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2022, 'c_cabbage'): W-statistic=0.9933, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2022, 'c_carrots'): W-statistic=0.9818, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2022, 'c_eggs'): W-statistic=0.9748, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2022, 'c_garlic'): W-statistic=0.8340, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2022, 'c_meat_beef_chops'): W-statistic=0.9931, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2022, 'c_meat_chicken_whole'): W-statistic=0.9912, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2022, 'c_meat_pork'): W-statistic=0.9897, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2022, 'c_onions'): W-statistic=0.9209, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2022, 'c_potatoes'): W-statistic=0.9931, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2022, 'c_rice'): W-statistic=0.9366, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2022, 'c_tomatoes'): W-statistic=0.9876, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2022, 'cabbage'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2022, 'carrots'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2022, 'eggs'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2022, 'garlic'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2022, 'h_beans'): W-statistic=0.9758, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2022, 'h_cabbage'): W-statistic=0.9914, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2022, 'h_carrots'): W-statistic=0.9829, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2022, 'h_eggs'): W-statistic=0.9738, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2022, 'h_garlic'): W-statistic=0.8252, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2022, 'h_meat_beef_chops'): W-statistic=0.9934, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2022, 'h_meat_chicken_whole'): W-statistic=0.9887, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2022, 'h_meat_pork'): W-statistic=0.9893, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2022, 'h_onions'): W-statistic=0.9437, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2022, 'h_potatoes'): W-statistic=0.9938, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2022, 'h_rice'): W-statistic=0.9367, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2022, 'h_tomatoes'): W-statistic=0.9744, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2022, 'l_beans'): W-statistic=0.9753, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2022, 'l_cabbage'): W-statistic=0.9934, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2022, 'l_carrots'): W-statistic=0.9829, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2022, 'l_eggs'): W-statistic=0.9718, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2022, 'l_garlic'): W-statistic=0.8444, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2022, 'l_meat_beef_chops'): W-statistic=0.9925, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2022, 'l_meat_chicken_whole'): W-statistic=0.9933, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2022, 'l_meat_pork'): W-statistic=0.9906, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2022, 'l_onions'): W-statistic=0.9641, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2022, 'l_potatoes'): W-statistic=0.9934, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2022, 'l_rice'): W-statistic=0.9448, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2022, 'l_tomatoes'): W-statistic=0.9889, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2022, 'meat_beef_chops'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2022, 'meat_chicken_whole'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2022, 'meat_pork'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2022, 'o_beans'): W-statistic=0.9746, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2022, 'o_cabbage'): W-statistic=0.9928, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2022, 'o_carrots'): W-statistic=0.9820, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2022, 'o_eggs'): W-statistic=0.9728, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2022, 'o_garlic'): W-statistic=0.8365, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2022, 'o_meat_beef_chops'): W-statistic=0.9928, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2022, 'o_meat_chicken_whole'): W-statistic=0.9908, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2022, 'o_meat_pork'): W-statistic=0.9897, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2022, 'o_onions'): W-statistic=0.9605, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2022, 'o_potatoes'): W-statistic=0.9937, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2022, 'o_rice'): W-statistic=0.9406, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2022, 'o_tomatoes'): W-statistic=0.9820, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2022, 'onions'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2022, 'potatoes'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2022, 'rice'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2022, 'tomatoes'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2023, 'beans'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2023, 'c_beans'): W-statistic=0.9815, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2023, 'c_cabbage'): W-statistic=0.9753, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2023, 'c_carrots'): W-statistic=0.9850, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2023, 'c_eggs'): W-statistic=0.9858, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2023, 'c_garlic'): W-statistic=0.7274, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2023, 'c_meat_beef_chops'): W-statistic=0.9809, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2023, 'c_meat_chicken_whole'): W-statistic=0.9905, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2023, 'c_meat_pork'): W-statistic=0.9797, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2023, 'c_onions'): W-statistic=0.8247, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2023, 'c_potatoes'): W-statistic=0.9855, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2023, 'c_rice'): W-statistic=0.9634, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2023, 'c_tomatoes'): W-statistic=0.9678, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2023, 'cabbage'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2023, 'carrots'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2023, 'eggs'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2023, 'garlic'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2023, 'h_beans'): W-statistic=0.9846, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2023, 'h_cabbage'): W-statistic=0.9739, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2023, 'h_carrots'): W-statistic=0.9800, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2023, 'h_eggs'): W-statistic=0.9882, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2023, 'h_garlic'): W-statistic=0.7183, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2023, 'h_meat_beef_chops'): W-statistic=0.9828, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2023, 'h_meat_chicken_whole'): W-statistic=0.9909, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2023, 'h_meat_pork'): W-statistic=0.9822, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2023, 'h_onions'): W-statistic=0.8027, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2023, 'h_potatoes'): W-statistic=0.9808, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2023, 'h_rice'): W-statistic=0.9626, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2023, 'h_tomatoes'): W-statistic=0.9379, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2023, 'l_beans'): W-statistic=0.9809, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2023, 'l_cabbage'): W-statistic=0.9858, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2023, 'l_carrots'): W-statistic=0.9891, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2023, 'l_eggs'): W-statistic=0.9834, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2023, 'l_garlic'): W-statistic=0.7454, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2023, 'l_meat_beef_chops'): W-statistic=0.9804, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2023, 'l_meat_chicken_whole'): W-statistic=0.9911, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2023, 'l_meat_pork'): W-statistic=0.9899, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2023, 'l_onions'): W-statistic=0.9066, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2023, 'l_potatoes'): W-statistic=0.9927, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2023, 'l_rice'): W-statistic=0.9636, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2023, 'l_tomatoes'): W-statistic=0.9912, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2023, 'meat_beef_chops'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2023, 'meat_chicken_whole'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2023, 'meat_pork'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2023, 'o_beans'): W-statistic=0.9834, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2023, 'o_cabbage'): W-statistic=0.9816, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2023, 'o_carrots'): W-statistic=0.9845, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2023, 'o_eggs'): W-statistic=0.9867, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2023, 'o_garlic'): W-statistic=0.7363, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2023, 'o_meat_beef_chops'): W-statistic=0.9819, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2023, 'o_meat_chicken_whole'): W-statistic=0.9917, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2023, 'o_meat_pork'): W-statistic=0.9881, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2023, 'o_onions'): W-statistic=0.8418, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2023, 'o_potatoes'): W-statistic=0.9880, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2023, 'o_rice'): W-statistic=0.9616, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2023, 'o_tomatoes'): W-statistic=0.9606, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2023, 'onions'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2023, 'potatoes'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2023, 'rice'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2023, 'tomatoes'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2024, 'beans'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2024, 'c_beans'): W-statistic=0.9823, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2024, 'c_cabbage'): W-statistic=0.9968, p-value=0.0090, Result=Shapiro-Wilk Test Failed\n(2024, 'c_carrots'): W-statistic=0.9823, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2024, 'c_eggs'): W-statistic=0.9879, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2024, 'c_garlic'): W-statistic=0.6917, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2024, 'c_meat_beef_chops'): W-statistic=0.9833, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2024, 'c_meat_chicken_whole'): W-statistic=0.9798, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2024, 'c_meat_pork'): W-statistic=0.9636, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2024, 'c_onions'): W-statistic=0.9479, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2024, 'c_potatoes'): W-statistic=0.9872, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2024, 'c_rice'): W-statistic=0.9976, p-value=0.0471, Result=Shapiro-Wilk Test Failed\n(2024, 'c_tomatoes'): W-statistic=0.9763, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2024, 'cabbage'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2024, 'carrots'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2024, 'eggs'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2024, 'garlic'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2024, 'h_beans'): W-statistic=0.9823, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2024, 'h_cabbage'): W-statistic=0.9954, p-value=0.0005, Result=Shapiro-Wilk Test Failed\n(2024, 'h_carrots'): W-statistic=0.9841, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2024, 'h_eggs'): W-statistic=0.9844, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2024, 'h_garlic'): W-statistic=0.6793, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2024, 'h_meat_beef_chops'): W-statistic=0.9838, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2024, 'h_meat_chicken_whole'): W-statistic=0.9766, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2024, 'h_meat_pork'): W-statistic=0.9524, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2024, 'h_onions'): W-statistic=0.9252, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2024, 'h_potatoes'): W-statistic=0.9833, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2024, 'h_rice'): W-statistic=0.9984, p-value=0.2640, Result=Pass\n(2024, 'h_tomatoes'): W-statistic=0.9626, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2024, 'l_beans'): W-statistic=0.9798, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2024, 'l_cabbage'): W-statistic=0.9957, p-value=0.0010, Result=Shapiro-Wilk Test Failed\n(2024, 'l_carrots'): W-statistic=0.9843, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2024, 'l_eggs'): W-statistic=0.9840, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2024, 'l_garlic'): W-statistic=0.6956, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2024, 'l_meat_beef_chops'): W-statistic=0.9830, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2024, 'l_meat_chicken_whole'): W-statistic=0.9830, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2024, 'l_meat_pork'): W-statistic=0.9648, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2024, 'l_onions'): W-statistic=0.9425, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2024, 'l_potatoes'): W-statistic=0.9900, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2024, 'l_rice'): W-statistic=0.9980, p-value=0.1202, Result=Pass\n(2024, 'l_tomatoes'): W-statistic=0.9905, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2024, 'meat_beef_chops'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2024, 'meat_chicken_whole'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2024, 'meat_pork'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2024, 'o_beans'): W-statistic=0.9807, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2024, 'o_cabbage'): W-statistic=0.9966, p-value=0.0061, Result=Shapiro-Wilk Test Failed\n(2024, 'o_carrots'): W-statistic=0.9846, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2024, 'o_eggs'): W-statistic=0.9828, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2024, 'o_garlic'): W-statistic=0.6870, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2024, 'o_meat_beef_chops'): W-statistic=0.9836, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2024, 'o_meat_chicken_whole'): W-statistic=0.9793, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2024, 'o_meat_pork'): W-statistic=0.9584, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2024, 'o_onions'): W-statistic=0.9291, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2024, 'o_potatoes'): W-statistic=0.9861, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2024, 'o_rice'): W-statistic=0.9980, p-value=0.1226, Result=Pass\n(2024, 'o_tomatoes'): W-statistic=0.9790, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2024, 'onions'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2024, 'potatoes'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2024, 'rice'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2024, 'tomatoes'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2025, 'beans'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2025, 'c_beans'): W-statistic=0.9834, p-value=0.1932, Result=Pass\n(2025, 'c_cabbage'): W-statistic=0.9642, p-value=0.0050, Result=Shapiro-Wilk Test Failed\n(2025, 'c_carrots'): W-statistic=0.9341, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2025, 'c_eggs'): W-statistic=0.9683, p-value=0.0106, Result=Shapiro-Wilk Test Failed\n(2025, 'c_garlic'): W-statistic=0.7040, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2025, 'c_meat_beef_chops'): W-statistic=0.9778, p-value=0.0652, Result=Pass\n(2025, 'c_meat_chicken_whole'): W-statistic=0.9482, p-value=0.0003, Result=Shapiro-Wilk Test Failed\n(2025, 'c_meat_pork'): W-statistic=0.9613, p-value=0.0030, Result=Shapiro-Wilk Test Failed\n(2025, 'c_onions'): W-statistic=0.9350, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2025, 'c_potatoes'): W-statistic=0.9426, p-value=0.0001, Result=Shapiro-Wilk Test Failed\n(2025, 'c_rice'): W-statistic=0.9738, p-value=0.0302, Result=Shapiro-Wilk Test Failed\n(2025, 'c_tomatoes'): W-statistic=0.8996, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2025, 'cabbage'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2025, 'carrots'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2025, 'eggs'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2025, 'garlic'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2025, 'h_beans'): W-statistic=0.9800, p-value=0.1003, Result=Pass\n(2025, 'h_cabbage'): W-statistic=0.9745, p-value=0.0344, Result=Shapiro-Wilk Test Failed\n(2025, 'h_carrots'): W-statistic=0.9491, p-value=0.0004, Result=Shapiro-Wilk Test Failed\n(2025, 'h_eggs'): W-statistic=0.9641, p-value=0.0049, Result=Shapiro-Wilk Test Failed\n(2025, 'h_garlic'): W-statistic=0.6746, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2025, 'h_meat_beef_chops'): W-statistic=0.9787, p-value=0.0782, Result=Pass\n(2025, 'h_meat_chicken_whole'): W-statistic=0.9487, p-value=0.0004, Result=Shapiro-Wilk Test Failed\n(2025, 'h_meat_pork'): W-statistic=0.9797, p-value=0.0951, Result=Pass\n(2025, 'h_onions'): W-statistic=0.9343, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2025, 'h_potatoes'): W-statistic=0.9500, p-value=0.0005, Result=Shapiro-Wilk Test Failed\n(2025, 'h_rice'): W-statistic=0.9751, p-value=0.0389, Result=Shapiro-Wilk Test Failed\n(2025, 'h_tomatoes'): W-statistic=0.8989, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2025, 'l_beans'): W-statistic=0.9797, p-value=0.0953, Result=Pass\n(2025, 'l_cabbage'): W-statistic=0.9823, p-value=0.1580, Result=Pass\n(2025, 'l_carrots'): W-statistic=0.9497, p-value=0.0004, Result=Shapiro-Wilk Test Failed\n(2025, 'l_eggs'): W-statistic=0.9452, p-value=0.0002, Result=Shapiro-Wilk Test Failed\n(2025, 'l_garlic'): W-statistic=0.7138, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2025, 'l_meat_beef_chops'): W-statistic=0.9809, p-value=0.1199, Result=Pass\n(2025, 'l_meat_chicken_whole'): W-statistic=0.9559, p-value=0.0012, Result=Shapiro-Wilk Test Failed\n(2025, 'l_meat_pork'): W-statistic=0.9674, p-value=0.0090, Result=Shapiro-Wilk Test Failed\n(2025, 'l_onions'): W-statistic=0.9380, p-value=0.0001, Result=Shapiro-Wilk Test Failed\n(2025, 'l_potatoes'): W-statistic=0.9586, p-value=0.0019, Result=Shapiro-Wilk Test Failed\n(2025, 'l_rice'): W-statistic=0.9778, p-value=0.0658, Result=Pass\n(2025, 'l_tomatoes'): W-statistic=0.9469, p-value=0.0003, Result=Shapiro-Wilk Test Failed\n(2025, 'meat_beef_chops'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2025, 'meat_chicken_whole'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2025, 'meat_pork'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2025, 'o_beans'): W-statistic=0.9789, p-value=0.0806, Result=Pass\n(2025, 'o_cabbage'): W-statistic=0.9789, p-value=0.0812, Result=Pass\n(2025, 'o_carrots'): W-statistic=0.9463, p-value=0.0003, Result=Shapiro-Wilk Test Failed\n(2025, 'o_eggs'): W-statistic=0.9541, p-value=0.0009, Result=Shapiro-Wilk Test Failed\n(2025, 'o_garlic'): W-statistic=0.6760, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2025, 'o_meat_beef_chops'): W-statistic=0.9792, p-value=0.0861, Result=Pass\n(2025, 'o_meat_chicken_whole'): W-statistic=0.9534, p-value=0.0008, Result=Shapiro-Wilk Test Failed\n(2025, 'o_meat_pork'): W-statistic=0.9783, p-value=0.0714, Result=Pass\n(2025, 'o_onions'): W-statistic=0.9338, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2025, 'o_potatoes'): W-statistic=0.9525, p-value=0.0007, Result=Shapiro-Wilk Test Failed\n(2025, 'o_rice'): W-statistic=0.9720, p-value=0.0213, Result=Shapiro-Wilk Test Failed\n(2025, 'o_tomatoes'): W-statistic=0.9227, p-value=0.0000, Result=Shapiro-Wilk Test Failed\n(2025, 'onions'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2025, 'potatoes'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2025, 'rice'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n(2025, 'tomatoes'): W-statistic=nan, p-value=nan, Result=Shapiro-Wilk Test Failed\n\n\n\n\nonly few passed, and most failed the test. But to be sure, Homogeneity of variances must be tested.\n\n\n2. Homogeneity of Variance\n\n# Group the data by year and Food_Items\ngrouped_data = df_melted.groupby(['year', 'Food_Items'])\n\nfor (year, food_item), group in grouped_data:\n    # Extract prices for all regions within the group\n    region_prices = [group[group['Region'] == region]['Price'].values \n                     for region in group['Region'].unique()] \n    \n    if len(region_prices) &gt; 1:  # Ensure there's more than one region\n        try:\n            stat, p = levene(*region_prices)\n            if p &gt; 0.05:  # Levene's test not significant (p &gt; 0.05)\n                print(f'{food_item} ({year}): Levene\\'s Test passed (p-value: {p:.4f})')\n            else:\n                print(f'{food_item} ({year}): Levene\\'s Test failed (p-value: {p:.4f})')\n        except ValueError:\n            print(f\"{food_item} ({year}): Levene's test failed. \"\n                  \"Possible issue with data (e.g., all values are the same).\")\n    else:\n        print(f'{food_item} ({year}): Only one region, cannot apply Levene\\'s test')\n\nbeans (2007): Levene's Test failed (p-value: nan)\nc_beans (2007): Levene's Test failed (p-value: 0.0000)\nc_cabbage (2007): Levene's Test failed (p-value: 0.0000)\nc_carrots (2007): Levene's Test failed (p-value: 0.0000)\nc_eggs (2007): Levene's Test failed (p-value: 0.0000)\nc_garlic (2007): Levene's Test failed (p-value: 0.0000)\nc_meat_beef_chops (2007): Levene's Test failed (p-value: 0.0000)\nc_meat_chicken_whole (2007): Levene's Test failed (p-value: 0.0000)\nc_meat_pork (2007): Levene's Test failed (p-value: 0.0025)\nc_onions (2007): Levene's Test failed (p-value: 0.0000)\nc_potatoes (2007): Levene's Test failed (p-value: 0.0000)\nc_rice (2007): Levene's Test failed (p-value: 0.0004)\nc_tomatoes (2007): Levene's Test failed (p-value: 0.0000)\ncabbage (2007): Levene's Test failed (p-value: nan)\ncarrots (2007): Levene's Test failed (p-value: nan)\neggs (2007): Levene's Test failed (p-value: nan)\ngarlic (2007): Levene's Test failed (p-value: nan)\nh_beans (2007): Levene's Test failed (p-value: 0.0000)\nh_cabbage (2007): Levene's Test failed (p-value: 0.0000)\nh_carrots (2007): Levene's Test failed (p-value: 0.0000)\nh_eggs (2007): Levene's Test failed (p-value: 0.0000)\nh_garlic (2007): Levene's Test failed (p-value: 0.0000)\nh_meat_beef_chops (2007): Levene's Test failed (p-value: 0.0000)\nh_meat_chicken_whole (2007): Levene's Test failed (p-value: 0.0000)\nh_meat_pork (2007): Levene's Test failed (p-value: 0.0012)\nh_onions (2007): Levene's Test failed (p-value: 0.0000)\nh_potatoes (2007): Levene's Test failed (p-value: 0.0000)\nh_rice (2007): Levene's Test failed (p-value: 0.0001)\nh_tomatoes (2007): Levene's Test failed (p-value: 0.0000)\nl_beans (2007): Levene's Test failed (p-value: 0.0000)\nl_cabbage (2007): Levene's Test failed (p-value: 0.0000)\nl_carrots (2007): Levene's Test failed (p-value: 0.0000)\nl_eggs (2007): Levene's Test failed (p-value: 0.0000)\nl_garlic (2007): Levene's Test failed (p-value: 0.0000)\nl_meat_beef_chops (2007): Levene's Test failed (p-value: 0.0000)\nl_meat_chicken_whole (2007): Levene's Test failed (p-value: 0.0000)\nl_meat_pork (2007): Levene's Test failed (p-value: 0.0007)\nl_onions (2007): Levene's Test failed (p-value: 0.0000)\nl_potatoes (2007): Levene's Test failed (p-value: 0.0000)\nl_rice (2007): Levene's Test passed (p-value: 0.6803)\nl_tomatoes (2007): Levene's Test failed (p-value: 0.0000)\nmeat_beef_chops (2007): Levene's Test failed (p-value: nan)\nmeat_chicken_whole (2007): Levene's Test failed (p-value: nan)\nmeat_pork (2007): Levene's Test failed (p-value: nan)\no_beans (2007): Levene's Test failed (p-value: 0.0000)\no_cabbage (2007): Levene's Test failed (p-value: 0.0000)\no_carrots (2007): Levene's Test failed (p-value: 0.0000)\no_eggs (2007): Levene's Test failed (p-value: 0.0000)\no_garlic (2007): Levene's Test failed (p-value: 0.0000)\no_meat_beef_chops (2007): Levene's Test failed (p-value: 0.0000)\no_meat_chicken_whole (2007): Levene's Test failed (p-value: 0.0000)\no_meat_pork (2007): Levene's Test failed (p-value: 0.0008)\no_onions (2007): Levene's Test failed (p-value: 0.0000)\no_potatoes (2007): Levene's Test failed (p-value: 0.0000)\no_rice (2007): Levene's Test passed (p-value: 0.3082)\no_tomatoes (2007): Levene's Test failed (p-value: 0.0000)\nonions (2007): Levene's Test failed (p-value: nan)\npotatoes (2007): Levene's Test failed (p-value: nan)\nrice (2007): Levene's Test failed (p-value: nan)\ntomatoes (2007): Levene's Test failed (p-value: nan)\nbeans (2008): Levene's Test failed (p-value: nan)\nc_beans (2008): Levene's Test failed (p-value: 0.0000)\nc_cabbage (2008): Levene's Test failed (p-value: 0.0000)\nc_carrots (2008): Levene's Test failed (p-value: 0.0000)\nc_eggs (2008): Levene's Test failed (p-value: 0.0000)\nc_garlic (2008): Levene's Test failed (p-value: 0.0000)\nc_meat_beef_chops (2008): Levene's Test failed (p-value: 0.0000)\nc_meat_chicken_whole (2008): Levene's Test failed (p-value: 0.0000)\nc_meat_pork (2008): Levene's Test failed (p-value: 0.0002)\nc_onions (2008): Levene's Test failed (p-value: 0.0278)\nc_potatoes (2008): Levene's Test failed (p-value: 0.0135)\nc_rice (2008): Levene's Test passed (p-value: 0.4726)\nc_tomatoes (2008): Levene's Test failed (p-value: 0.0000)\ncabbage (2008): Levene's Test failed (p-value: nan)\ncarrots (2008): Levene's Test failed (p-value: nan)\neggs (2008): Levene's Test failed (p-value: nan)\ngarlic (2008): Levene's Test failed (p-value: nan)\nh_beans (2008): Levene's Test failed (p-value: 0.0000)\nh_cabbage (2008): Levene's Test failed (p-value: 0.0000)\nh_carrots (2008): Levene's Test failed (p-value: 0.0000)\nh_eggs (2008): Levene's Test failed (p-value: 0.0000)\nh_garlic (2008): Levene's Test failed (p-value: 0.0000)\nh_meat_beef_chops (2008): Levene's Test failed (p-value: 0.0000)\nh_meat_chicken_whole (2008): Levene's Test failed (p-value: 0.0000)\nh_meat_pork (2008): Levene's Test failed (p-value: 0.0000)\nh_onions (2008): Levene's Test failed (p-value: 0.0266)\nh_potatoes (2008): Levene's Test failed (p-value: 0.0132)\nh_rice (2008): Levene's Test passed (p-value: 0.5126)\nh_tomatoes (2008): Levene's Test failed (p-value: 0.0000)\nl_beans (2008): Levene's Test failed (p-value: 0.0000)\nl_cabbage (2008): Levene's Test failed (p-value: 0.0000)\nl_carrots (2008): Levene's Test failed (p-value: 0.0000)\nl_eggs (2008): Levene's Test failed (p-value: 0.0000)\nl_garlic (2008): Levene's Test failed (p-value: 0.0000)\nl_meat_beef_chops (2008): Levene's Test failed (p-value: 0.0000)\nl_meat_chicken_whole (2008): Levene's Test failed (p-value: 0.0000)\nl_meat_pork (2008): Levene's Test failed (p-value: 0.0000)\nl_onions (2008): Levene's Test failed (p-value: 0.0024)\nl_potatoes (2008): Levene's Test failed (p-value: 0.0000)\nl_rice (2008): Levene's Test passed (p-value: 0.2694)\nl_tomatoes (2008): Levene's Test failed (p-value: 0.0000)\nmeat_beef_chops (2008): Levene's Test failed (p-value: nan)\nmeat_chicken_whole (2008): Levene's Test failed (p-value: nan)\nmeat_pork (2008): Levene's Test failed (p-value: nan)\no_beans (2008): Levene's Test failed (p-value: 0.0000)\no_cabbage (2008): Levene's Test failed (p-value: 0.0000)\no_carrots (2008): Levene's Test failed (p-value: 0.0000)\no_eggs (2008): Levene's Test failed (p-value: 0.0000)\no_garlic (2008): Levene's Test failed (p-value: 0.0000)\no_meat_beef_chops (2008): Levene's Test failed (p-value: 0.0000)\no_meat_chicken_whole (2008): Levene's Test failed (p-value: 0.0000)\no_meat_pork (2008): Levene's Test failed (p-value: 0.0000)\no_onions (2008): Levene's Test passed (p-value: 0.0518)\no_potatoes (2008): Levene's Test failed (p-value: 0.0009)\no_rice (2008): Levene's Test passed (p-value: 0.5903)\no_tomatoes (2008): Levene's Test failed (p-value: 0.0000)\nonions (2008): Levene's Test failed (p-value: nan)\npotatoes (2008): Levene's Test failed (p-value: nan)\nrice (2008): Levene's Test failed (p-value: nan)\ntomatoes (2008): Levene's Test failed (p-value: nan)\nbeans (2009): Levene's Test failed (p-value: nan)\nc_beans (2009): Levene's Test failed (p-value: 0.0000)\nc_cabbage (2009): Levene's Test failed (p-value: 0.0000)\nc_carrots (2009): Levene's Test failed (p-value: 0.0000)\nc_eggs (2009): Levene's Test failed (p-value: 0.0000)\nc_garlic (2009): Levene's Test failed (p-value: 0.0000)\nc_meat_beef_chops (2009): Levene's Test failed (p-value: 0.0000)\nc_meat_chicken_whole (2009): Levene's Test failed (p-value: 0.0000)\nc_meat_pork (2009): Levene's Test failed (p-value: 0.0000)\nc_onions (2009): Levene's Test failed (p-value: 0.0022)\nc_potatoes (2009): Levene's Test failed (p-value: 0.0000)\nc_rice (2009): Levene's Test failed (p-value: 0.0000)\nc_tomatoes (2009): Levene's Test failed (p-value: 0.0000)\ncabbage (2009): Levene's Test failed (p-value: nan)\ncarrots (2009): Levene's Test failed (p-value: nan)\neggs (2009): Levene's Test failed (p-value: nan)\ngarlic (2009): Levene's Test failed (p-value: nan)\nh_beans (2009): Levene's Test failed (p-value: 0.0000)\nh_cabbage (2009): Levene's Test failed (p-value: 0.0000)\nh_carrots (2009): Levene's Test failed (p-value: 0.0000)\nh_eggs (2009): Levene's Test failed (p-value: 0.0000)\nh_garlic (2009): Levene's Test failed (p-value: 0.0000)\nh_meat_beef_chops (2009): Levene's Test failed (p-value: 0.0000)\nh_meat_chicken_whole (2009): Levene's Test failed (p-value: 0.0000)\nh_meat_pork (2009): Levene's Test failed (p-value: 0.0000)\nh_onions (2009): Levene's Test failed (p-value: 0.0003)\nh_potatoes (2009): Levene's Test failed (p-value: 0.0000)\nh_rice (2009): Levene's Test failed (p-value: 0.0036)\nh_tomatoes (2009): Levene's Test failed (p-value: 0.0000)\nl_beans (2009): Levene's Test failed (p-value: 0.0000)\nl_cabbage (2009): Levene's Test failed (p-value: 0.0000)\nl_carrots (2009): Levene's Test failed (p-value: 0.0000)\nl_eggs (2009): Levene's Test failed (p-value: 0.0000)\nl_garlic (2009): Levene's Test failed (p-value: 0.0000)\nl_meat_beef_chops (2009): Levene's Test failed (p-value: 0.0000)\nl_meat_chicken_whole (2009): Levene's Test failed (p-value: 0.0000)\nl_meat_pork (2009): Levene's Test failed (p-value: 0.0000)\nl_onions (2009): Levene's Test failed (p-value: 0.0005)\nl_potatoes (2009): Levene's Test failed (p-value: 0.0000)\nl_rice (2009): Levene's Test failed (p-value: 0.0000)\nl_tomatoes (2009): Levene's Test failed (p-value: 0.0000)\nmeat_beef_chops (2009): Levene's Test failed (p-value: nan)\nmeat_chicken_whole (2009): Levene's Test failed (p-value: nan)\nmeat_pork (2009): Levene's Test failed (p-value: nan)\no_beans (2009): Levene's Test failed (p-value: 0.0000)\no_cabbage (2009): Levene's Test failed (p-value: 0.0000)\no_carrots (2009): Levene's Test failed (p-value: 0.0000)\no_eggs (2009): Levene's Test failed (p-value: 0.0000)\no_garlic (2009): Levene's Test failed (p-value: 0.0000)\no_meat_beef_chops (2009): Levene's Test failed (p-value: 0.0000)\no_meat_chicken_whole (2009): Levene's Test failed (p-value: 0.0000)\no_meat_pork (2009): Levene's Test failed (p-value: 0.0000)\no_onions (2009): Levene's Test failed (p-value: 0.0005)\no_potatoes (2009): Levene's Test failed (p-value: 0.0000)\no_rice (2009): Levene's Test failed (p-value: 0.0000)\no_tomatoes (2009): Levene's Test failed (p-value: 0.0000)\nonions (2009): Levene's Test failed (p-value: nan)\npotatoes (2009): Levene's Test failed (p-value: nan)\nrice (2009): Levene's Test failed (p-value: nan)\ntomatoes (2009): Levene's Test failed (p-value: nan)\nbeans (2010): Levene's Test failed (p-value: nan)\nc_beans (2010): Levene's Test failed (p-value: 0.0000)\nc_cabbage (2010): Levene's Test failed (p-value: 0.0000)\nc_carrots (2010): Levene's Test failed (p-value: 0.0000)\nc_eggs (2010): Levene's Test failed (p-value: 0.0000)\nc_garlic (2010): Levene's Test failed (p-value: 0.0000)\nc_meat_beef_chops (2010): Levene's Test failed (p-value: 0.0000)\nc_meat_chicken_whole (2010): Levene's Test failed (p-value: 0.0000)\nc_meat_pork (2010): Levene's Test failed (p-value: 0.0000)\nc_onions (2010): Levene's Test passed (p-value: 0.4687)\nc_potatoes (2010): Levene's Test failed (p-value: 0.0000)\nc_rice (2010): Levene's Test failed (p-value: 0.0000)\nc_tomatoes (2010): Levene's Test failed (p-value: 0.0000)\ncabbage (2010): Levene's Test failed (p-value: nan)\ncarrots (2010): Levene's Test failed (p-value: nan)\neggs (2010): Levene's Test failed (p-value: nan)\ngarlic (2010): Levene's Test failed (p-value: nan)\nh_beans (2010): Levene's Test failed (p-value: 0.0000)\nh_cabbage (2010): Levene's Test failed (p-value: 0.0000)\nh_carrots (2010): Levene's Test failed (p-value: 0.0000)\nh_eggs (2010): Levene's Test failed (p-value: 0.0000)\nh_garlic (2010): Levene's Test failed (p-value: 0.0000)\nh_meat_beef_chops (2010): Levene's Test failed (p-value: 0.0000)\nh_meat_chicken_whole (2010): Levene's Test failed (p-value: 0.0000)\nh_meat_pork (2010): Levene's Test failed (p-value: 0.0000)\nh_onions (2010): Levene's Test passed (p-value: 0.5944)\nh_potatoes (2010): Levene's Test failed (p-value: 0.0000)\nh_rice (2010): Levene's Test failed (p-value: 0.0000)\nh_tomatoes (2010): Levene's Test failed (p-value: 0.0000)\nl_beans (2010): Levene's Test failed (p-value: 0.0000)\nl_cabbage (2010): Levene's Test failed (p-value: 0.0000)\nl_carrots (2010): Levene's Test failed (p-value: 0.0000)\nl_eggs (2010): Levene's Test failed (p-value: 0.0000)\nl_garlic (2010): Levene's Test failed (p-value: 0.0000)\nl_meat_beef_chops (2010): Levene's Test failed (p-value: 0.0000)\nl_meat_chicken_whole (2010): Levene's Test failed (p-value: 0.0000)\nl_meat_pork (2010): Levene's Test failed (p-value: 0.0000)\nl_onions (2010): Levene's Test passed (p-value: 0.2757)\nl_potatoes (2010): Levene's Test failed (p-value: 0.0000)\nl_rice (2010): Levene's Test failed (p-value: 0.0000)\nl_tomatoes (2010): Levene's Test failed (p-value: 0.0000)\nmeat_beef_chops (2010): Levene's Test failed (p-value: nan)\nmeat_chicken_whole (2010): Levene's Test failed (p-value: nan)\nmeat_pork (2010): Levene's Test failed (p-value: nan)\no_beans (2010): Levene's Test failed (p-value: 0.0000)\no_cabbage (2010): Levene's Test failed (p-value: 0.0000)\no_carrots (2010): Levene's Test failed (p-value: 0.0000)\no_eggs (2010): Levene's Test failed (p-value: 0.0000)\no_garlic (2010): Levene's Test failed (p-value: 0.0000)\no_meat_beef_chops (2010): Levene's Test failed (p-value: 0.0000)\no_meat_chicken_whole (2010): Levene's Test failed (p-value: 0.0000)\no_meat_pork (2010): Levene's Test failed (p-value: 0.0000)\no_onions (2010): Levene's Test passed (p-value: 0.6049)\no_potatoes (2010): Levene's Test failed (p-value: 0.0000)\no_rice (2010): Levene's Test failed (p-value: 0.0000)\no_tomatoes (2010): Levene's Test failed (p-value: 0.0000)\nonions (2010): Levene's Test failed (p-value: nan)\npotatoes (2010): Levene's Test failed (p-value: nan)\nrice (2010): Levene's Test failed (p-value: nan)\ntomatoes (2010): Levene's Test failed (p-value: nan)\nbeans (2011): Levene's Test failed (p-value: nan)\nc_beans (2011): Levene's Test failed (p-value: 0.0000)\nc_cabbage (2011): Levene's Test failed (p-value: 0.0000)\nc_carrots (2011): Levene's Test failed (p-value: 0.0000)\nc_eggs (2011): Levene's Test failed (p-value: 0.0000)\nc_garlic (2011): Levene's Test failed (p-value: 0.0000)\nc_meat_beef_chops (2011): Levene's Test failed (p-value: 0.0000)\nc_meat_chicken_whole (2011): Levene's Test failed (p-value: 0.0000)\nc_meat_pork (2011): Levene's Test failed (p-value: 0.0000)\nc_onions (2011): Levene's Test failed (p-value: 0.0001)\nc_potatoes (2011): Levene's Test failed (p-value: 0.0000)\nc_rice (2011): Levene's Test failed (p-value: 0.0000)\nc_tomatoes (2011): Levene's Test failed (p-value: 0.0000)\ncabbage (2011): Levene's Test failed (p-value: nan)\ncarrots (2011): Levene's Test failed (p-value: nan)\neggs (2011): Levene's Test failed (p-value: nan)\ngarlic (2011): Levene's Test failed (p-value: nan)\nh_beans (2011): Levene's Test failed (p-value: 0.0000)\nh_cabbage (2011): Levene's Test failed (p-value: 0.0000)\nh_carrots (2011): Levene's Test failed (p-value: 0.0000)\nh_eggs (2011): Levene's Test failed (p-value: 0.0000)\nh_garlic (2011): Levene's Test failed (p-value: 0.0000)\nh_meat_beef_chops (2011): Levene's Test failed (p-value: 0.0000)\nh_meat_chicken_whole (2011): Levene's Test failed (p-value: 0.0000)\nh_meat_pork (2011): Levene's Test failed (p-value: 0.0000)\nh_onions (2011): Levene's Test failed (p-value: 0.0001)\nh_potatoes (2011): Levene's Test failed (p-value: 0.0000)\nh_rice (2011): Levene's Test failed (p-value: 0.0000)\nh_tomatoes (2011): Levene's Test failed (p-value: 0.0000)\nl_beans (2011): Levene's Test failed (p-value: 0.0000)\nl_cabbage (2011): Levene's Test failed (p-value: 0.0000)\nl_carrots (2011): Levene's Test failed (p-value: 0.0000)\nl_eggs (2011): Levene's Test failed (p-value: 0.0000)\nl_garlic (2011): Levene's Test failed (p-value: 0.0000)\nl_meat_beef_chops (2011): Levene's Test failed (p-value: 0.0000)\nl_meat_chicken_whole (2011): Levene's Test failed (p-value: 0.0000)\nl_meat_pork (2011): Levene's Test failed (p-value: 0.0000)\nl_onions (2011): Levene's Test failed (p-value: 0.0095)\nl_potatoes (2011): Levene's Test failed (p-value: 0.0000)\nl_rice (2011): Levene's Test failed (p-value: 0.0000)\nl_tomatoes (2011): Levene's Test failed (p-value: 0.0000)\nmeat_beef_chops (2011): Levene's Test failed (p-value: nan)\nmeat_chicken_whole (2011): Levene's Test failed (p-value: nan)\nmeat_pork (2011): Levene's Test failed (p-value: nan)\no_beans (2011): Levene's Test failed (p-value: 0.0000)\no_cabbage (2011): Levene's Test failed (p-value: 0.0000)\no_carrots (2011): Levene's Test failed (p-value: 0.0000)\no_eggs (2011): Levene's Test failed (p-value: 0.0000)\no_garlic (2011): Levene's Test failed (p-value: 0.0000)\no_meat_beef_chops (2011): Levene's Test failed (p-value: 0.0000)\no_meat_chicken_whole (2011): Levene's Test failed (p-value: 0.0000)\no_meat_pork (2011): Levene's Test failed (p-value: 0.0000)\no_onions (2011): Levene's Test failed (p-value: 0.0000)\no_potatoes (2011): Levene's Test failed (p-value: 0.0000)\no_rice (2011): Levene's Test failed (p-value: 0.0000)\no_tomatoes (2011): Levene's Test failed (p-value: 0.0000)\nonions (2011): Levene's Test failed (p-value: nan)\npotatoes (2011): Levene's Test failed (p-value: nan)\nrice (2011): Levene's Test failed (p-value: nan)\ntomatoes (2011): Levene's Test failed (p-value: nan)\nbeans (2012): Levene's Test failed (p-value: nan)\nc_beans (2012): Levene's Test failed (p-value: 0.0000)\nc_cabbage (2012): Levene's Test failed (p-value: 0.0000)\nc_carrots (2012): Levene's Test failed (p-value: 0.0000)\nc_eggs (2012): Levene's Test failed (p-value: 0.0000)\nc_garlic (2012): Levene's Test failed (p-value: 0.0000)\nc_meat_beef_chops (2012): Levene's Test failed (p-value: 0.0000)\nc_meat_chicken_whole (2012): Levene's Test failed (p-value: 0.0000)\nc_meat_pork (2012): Levene's Test failed (p-value: 0.0000)\nc_onions (2012): Levene's Test failed (p-value: 0.0000)\nc_potatoes (2012): Levene's Test failed (p-value: 0.0000)\nc_rice (2012): Levene's Test failed (p-value: 0.0000)\nc_tomatoes (2012): Levene's Test failed (p-value: 0.0000)\ncabbage (2012): Levene's Test failed (p-value: nan)\ncarrots (2012): Levene's Test failed (p-value: nan)\neggs (2012): Levene's Test failed (p-value: nan)\ngarlic (2012): Levene's Test failed (p-value: nan)\nh_beans (2012): Levene's Test failed (p-value: 0.0000)\nh_cabbage (2012): Levene's Test failed (p-value: 0.0000)\nh_carrots (2012): Levene's Test failed (p-value: 0.0000)\nh_eggs (2012): Levene's Test failed (p-value: 0.0000)\nh_garlic (2012): Levene's Test failed (p-value: 0.0000)\nh_meat_beef_chops (2012): Levene's Test failed (p-value: 0.0000)\nh_meat_chicken_whole (2012): Levene's Test failed (p-value: 0.0000)\nh_meat_pork (2012): Levene's Test failed (p-value: 0.0000)\nh_onions (2012): Levene's Test failed (p-value: 0.0000)\nh_potatoes (2012): Levene's Test failed (p-value: 0.0000)\nh_rice (2012): Levene's Test failed (p-value: 0.0000)\nh_tomatoes (2012): Levene's Test failed (p-value: 0.0000)\nl_beans (2012): Levene's Test failed (p-value: 0.0000)\nl_cabbage (2012): Levene's Test failed (p-value: 0.0000)\nl_carrots (2012): Levene's Test failed (p-value: 0.0000)\nl_eggs (2012): Levene's Test failed (p-value: 0.0000)\nl_garlic (2012): Levene's Test failed (p-value: 0.0000)\nl_meat_beef_chops (2012): Levene's Test failed (p-value: 0.0000)\nl_meat_chicken_whole (2012): Levene's Test failed (p-value: 0.0000)\nl_meat_pork (2012): Levene's Test failed (p-value: 0.0000)\nl_onions (2012): Levene's Test failed (p-value: 0.0000)\nl_potatoes (2012): Levene's Test failed (p-value: 0.0000)\nl_rice (2012): Levene's Test failed (p-value: 0.0000)\nl_tomatoes (2012): Levene's Test failed (p-value: 0.0000)\nmeat_beef_chops (2012): Levene's Test failed (p-value: nan)\nmeat_chicken_whole (2012): Levene's Test failed (p-value: nan)\nmeat_pork (2012): Levene's Test failed (p-value: nan)\no_beans (2012): Levene's Test failed (p-value: 0.0000)\no_cabbage (2012): Levene's Test failed (p-value: 0.0000)\no_carrots (2012): Levene's Test failed (p-value: 0.0000)\no_eggs (2012): Levene's Test failed (p-value: 0.0000)\no_garlic (2012): Levene's Test failed (p-value: 0.0000)\no_meat_beef_chops (2012): Levene's Test failed (p-value: 0.0000)\no_meat_chicken_whole (2012): Levene's Test failed (p-value: 0.0000)\no_meat_pork (2012): Levene's Test failed (p-value: 0.0000)\no_onions (2012): Levene's Test failed (p-value: 0.0000)\no_potatoes (2012): Levene's Test failed (p-value: 0.0000)\no_rice (2012): Levene's Test failed (p-value: 0.0000)\no_tomatoes (2012): Levene's Test failed (p-value: 0.0000)\nonions (2012): Levene's Test failed (p-value: nan)\npotatoes (2012): Levene's Test failed (p-value: nan)\nrice (2012): Levene's Test failed (p-value: nan)\ntomatoes (2012): Levene's Test failed (p-value: nan)\nbeans (2013): Levene's Test failed (p-value: nan)\nc_beans (2013): Levene's Test failed (p-value: 0.0000)\nc_cabbage (2013): Levene's Test failed (p-value: 0.0000)\nc_carrots (2013): Levene's Test failed (p-value: 0.0000)\nc_eggs (2013): Levene's Test failed (p-value: 0.0000)\nc_garlic (2013): Levene's Test failed (p-value: 0.0000)\nc_meat_beef_chops (2013): Levene's Test failed (p-value: 0.0000)\nc_meat_chicken_whole (2013): Levene's Test failed (p-value: 0.0000)\nc_meat_pork (2013): Levene's Test failed (p-value: 0.0000)\nc_onions (2013): Levene's Test failed (p-value: 0.0000)\nc_potatoes (2013): Levene's Test failed (p-value: 0.0000)\nc_rice (2013): Levene's Test failed (p-value: 0.0000)\nc_tomatoes (2013): Levene's Test failed (p-value: 0.0000)\ncabbage (2013): Levene's Test failed (p-value: nan)\ncarrots (2013): Levene's Test failed (p-value: nan)\neggs (2013): Levene's Test failed (p-value: nan)\ngarlic (2013): Levene's Test failed (p-value: nan)\nh_beans (2013): Levene's Test failed (p-value: 0.0000)\nh_cabbage (2013): Levene's Test failed (p-value: 0.0000)\nh_carrots (2013): Levene's Test failed (p-value: 0.0000)\nh_eggs (2013): Levene's Test failed (p-value: 0.0000)\nh_garlic (2013): Levene's Test failed (p-value: 0.0000)\nh_meat_beef_chops (2013): Levene's Test failed (p-value: 0.0000)\nh_meat_chicken_whole (2013): Levene's Test failed (p-value: 0.0000)\nh_meat_pork (2013): Levene's Test failed (p-value: 0.0000)\nh_onions (2013): Levene's Test failed (p-value: 0.0000)\nh_potatoes (2013): Levene's Test failed (p-value: 0.0000)\nh_rice (2013): Levene's Test failed (p-value: 0.0000)\nh_tomatoes (2013): Levene's Test failed (p-value: 0.0000)\nl_beans (2013): Levene's Test failed (p-value: 0.0000)\nl_cabbage (2013): Levene's Test failed (p-value: 0.0000)\nl_carrots (2013): Levene's Test failed (p-value: 0.0000)\nl_eggs (2013): Levene's Test failed (p-value: 0.0000)\nl_garlic (2013): Levene's Test failed (p-value: 0.0000)\nl_meat_beef_chops (2013): Levene's Test failed (p-value: 0.0000)\nl_meat_chicken_whole (2013): Levene's Test failed (p-value: 0.0000)\nl_meat_pork (2013): Levene's Test failed (p-value: 0.0000)\nl_onions (2013): Levene's Test failed (p-value: 0.0000)\nl_potatoes (2013): Levene's Test failed (p-value: 0.0000)\nl_rice (2013): Levene's Test failed (p-value: 0.0000)\nl_tomatoes (2013): Levene's Test failed (p-value: 0.0000)\nmeat_beef_chops (2013): Levene's Test failed (p-value: nan)\nmeat_chicken_whole (2013): Levene's Test failed (p-value: nan)\nmeat_pork (2013): Levene's Test failed (p-value: nan)\no_beans (2013): Levene's Test failed (p-value: 0.0000)\no_cabbage (2013): Levene's Test failed (p-value: 0.0000)\no_carrots (2013): Levene's Test failed (p-value: 0.0000)\no_eggs (2013): Levene's Test failed (p-value: 0.0000)\no_garlic (2013): Levene's Test failed (p-value: 0.0000)\no_meat_beef_chops (2013): Levene's Test failed (p-value: 0.0000)\no_meat_chicken_whole (2013): Levene's Test failed (p-value: 0.0000)\no_meat_pork (2013): Levene's Test failed (p-value: 0.0000)\no_onions (2013): Levene's Test failed (p-value: 0.0000)\no_potatoes (2013): Levene's Test failed (p-value: 0.0000)\no_rice (2013): Levene's Test failed (p-value: 0.0000)\no_tomatoes (2013): Levene's Test failed (p-value: 0.0000)\nonions (2013): Levene's Test failed (p-value: nan)\npotatoes (2013): Levene's Test failed (p-value: nan)\nrice (2013): Levene's Test failed (p-value: nan)\ntomatoes (2013): Levene's Test failed (p-value: nan)\nbeans (2014): Levene's Test failed (p-value: nan)\nc_beans (2014): Levene's Test failed (p-value: 0.0000)\nc_cabbage (2014): Levene's Test failed (p-value: 0.0000)\nc_carrots (2014): Levene's Test failed (p-value: 0.0000)\nc_eggs (2014): Levene's Test failed (p-value: 0.0000)\nc_garlic (2014): Levene's Test failed (p-value: 0.0000)\nc_meat_beef_chops (2014): Levene's Test failed (p-value: 0.0000)\nc_meat_chicken_whole (2014): Levene's Test failed (p-value: 0.0000)\nc_meat_pork (2014): Levene's Test failed (p-value: 0.0000)\nc_onions (2014): Levene's Test failed (p-value: 0.0000)\nc_potatoes (2014): Levene's Test failed (p-value: 0.0000)\nc_rice (2014): Levene's Test failed (p-value: 0.0000)\nc_tomatoes (2014): Levene's Test failed (p-value: 0.0000)\ncabbage (2014): Levene's Test failed (p-value: nan)\ncarrots (2014): Levene's Test failed (p-value: nan)\neggs (2014): Levene's Test failed (p-value: nan)\ngarlic (2014): Levene's Test failed (p-value: nan)\nh_beans (2014): Levene's Test failed (p-value: 0.0000)\nh_cabbage (2014): Levene's Test failed (p-value: 0.0000)\nh_carrots (2014): Levene's Test failed (p-value: 0.0000)\nh_eggs (2014): Levene's Test failed (p-value: 0.0000)\nh_garlic (2014): Levene's Test failed (p-value: 0.0000)\nh_meat_beef_chops (2014): Levene's Test failed (p-value: 0.0000)\nh_meat_chicken_whole (2014): Levene's Test failed (p-value: 0.0000)\nh_meat_pork (2014): Levene's Test failed (p-value: 0.0000)\nh_onions (2014): Levene's Test failed (p-value: 0.0000)\nh_potatoes (2014): Levene's Test failed (p-value: 0.0000)\nh_rice (2014): Levene's Test failed (p-value: 0.0000)\nh_tomatoes (2014): Levene's Test failed (p-value: 0.0000)\nl_beans (2014): Levene's Test failed (p-value: 0.0000)\nl_cabbage (2014): Levene's Test failed (p-value: 0.0000)\nl_carrots (2014): Levene's Test failed (p-value: 0.0000)\nl_eggs (2014): Levene's Test failed (p-value: 0.0000)\nl_garlic (2014): Levene's Test failed (p-value: 0.0000)\nl_meat_beef_chops (2014): Levene's Test failed (p-value: 0.0000)\nl_meat_chicken_whole (2014): Levene's Test failed (p-value: 0.0000)\nl_meat_pork (2014): Levene's Test failed (p-value: 0.0000)\nl_onions (2014): Levene's Test failed (p-value: 0.0000)\nl_potatoes (2014): Levene's Test failed (p-value: 0.0000)\nl_rice (2014): Levene's Test failed (p-value: 0.0000)\nl_tomatoes (2014): Levene's Test failed (p-value: 0.0000)\nmeat_beef_chops (2014): Levene's Test failed (p-value: nan)\nmeat_chicken_whole (2014): Levene's Test failed (p-value: nan)\nmeat_pork (2014): Levene's Test failed (p-value: nan)\no_beans (2014): Levene's Test failed (p-value: 0.0000)\no_cabbage (2014): Levene's Test failed (p-value: 0.0000)\no_carrots (2014): Levene's Test failed (p-value: 0.0000)\no_eggs (2014): Levene's Test failed (p-value: 0.0000)\no_garlic (2014): Levene's Test failed (p-value: 0.0000)\no_meat_beef_chops (2014): Levene's Test failed (p-value: 0.0000)\no_meat_chicken_whole (2014): Levene's Test failed (p-value: 0.0000)\no_meat_pork (2014): Levene's Test failed (p-value: 0.0000)\no_onions (2014): Levene's Test failed (p-value: 0.0000)\no_potatoes (2014): Levene's Test failed (p-value: 0.0000)\no_rice (2014): Levene's Test failed (p-value: 0.0000)\no_tomatoes (2014): Levene's Test failed (p-value: 0.0000)\nonions (2014): Levene's Test failed (p-value: nan)\npotatoes (2014): Levene's Test failed (p-value: nan)\nrice (2014): Levene's Test failed (p-value: nan)\ntomatoes (2014): Levene's Test failed (p-value: nan)\nbeans (2015): Levene's Test failed (p-value: nan)\nc_beans (2015): Levene's Test failed (p-value: 0.0000)\nc_cabbage (2015): Levene's Test failed (p-value: 0.0000)\nc_carrots (2015): Levene's Test failed (p-value: 0.0000)\nc_eggs (2015): Levene's Test failed (p-value: 0.0000)\nc_garlic (2015): Levene's Test failed (p-value: 0.0000)\nc_meat_beef_chops (2015): Levene's Test failed (p-value: 0.0000)\nc_meat_chicken_whole (2015): Levene's Test failed (p-value: 0.0000)\nc_meat_pork (2015): Levene's Test failed (p-value: 0.0000)\nc_onions (2015): Levene's Test passed (p-value: 0.5792)\nc_potatoes (2015): Levene's Test failed (p-value: 0.0000)\nc_rice (2015): Levene's Test failed (p-value: 0.0000)\nc_tomatoes (2015): Levene's Test failed (p-value: 0.0000)\ncabbage (2015): Levene's Test failed (p-value: nan)\ncarrots (2015): Levene's Test failed (p-value: nan)\neggs (2015): Levene's Test failed (p-value: nan)\ngarlic (2015): Levene's Test failed (p-value: nan)\nh_beans (2015): Levene's Test failed (p-value: 0.0000)\nh_cabbage (2015): Levene's Test failed (p-value: 0.0000)\nh_carrots (2015): Levene's Test failed (p-value: 0.0000)\nh_eggs (2015): Levene's Test failed (p-value: 0.0000)\nh_garlic (2015): Levene's Test failed (p-value: 0.0000)\nh_meat_beef_chops (2015): Levene's Test failed (p-value: 0.0000)\nh_meat_chicken_whole (2015): Levene's Test failed (p-value: 0.0000)\nh_meat_pork (2015): Levene's Test failed (p-value: 0.0000)\nh_onions (2015): Levene's Test passed (p-value: 0.6517)\nh_potatoes (2015): Levene's Test failed (p-value: 0.0000)\nh_rice (2015): Levene's Test failed (p-value: 0.0000)\nh_tomatoes (2015): Levene's Test failed (p-value: 0.0000)\nl_beans (2015): Levene's Test failed (p-value: 0.0000)\nl_cabbage (2015): Levene's Test failed (p-value: 0.0000)\nl_carrots (2015): Levene's Test failed (p-value: 0.0000)\nl_eggs (2015): Levene's Test failed (p-value: 0.0000)\nl_garlic (2015): Levene's Test failed (p-value: 0.0000)\nl_meat_beef_chops (2015): Levene's Test failed (p-value: 0.0000)\nl_meat_chicken_whole (2015): Levene's Test failed (p-value: 0.0000)\nl_meat_pork (2015): Levene's Test failed (p-value: 0.0000)\nl_onions (2015): Levene's Test passed (p-value: 0.4240)\nl_potatoes (2015): Levene's Test failed (p-value: 0.0000)\nl_rice (2015): Levene's Test failed (p-value: 0.0000)\nl_tomatoes (2015): Levene's Test failed (p-value: 0.0000)\nmeat_beef_chops (2015): Levene's Test failed (p-value: nan)\nmeat_chicken_whole (2015): Levene's Test failed (p-value: nan)\nmeat_pork (2015): Levene's Test failed (p-value: nan)\no_beans (2015): Levene's Test failed (p-value: 0.0000)\no_cabbage (2015): Levene's Test failed (p-value: 0.0000)\no_carrots (2015): Levene's Test failed (p-value: 0.0000)\no_eggs (2015): Levene's Test failed (p-value: 0.0000)\no_garlic (2015): Levene's Test failed (p-value: 0.0000)\no_meat_beef_chops (2015): Levene's Test failed (p-value: 0.0000)\no_meat_chicken_whole (2015): Levene's Test failed (p-value: 0.0000)\no_meat_pork (2015): Levene's Test failed (p-value: 0.0000)\no_onions (2015): Levene's Test passed (p-value: 0.8250)\no_potatoes (2015): Levene's Test failed (p-value: 0.0000)\no_rice (2015): Levene's Test failed (p-value: 0.0000)\no_tomatoes (2015): Levene's Test failed (p-value: 0.0000)\nonions (2015): Levene's Test failed (p-value: nan)\npotatoes (2015): Levene's Test failed (p-value: nan)\nrice (2015): Levene's Test failed (p-value: nan)\ntomatoes (2015): Levene's Test failed (p-value: nan)\nbeans (2016): Levene's Test failed (p-value: nan)\nc_beans (2016): Levene's Test failed (p-value: 0.0000)\nc_cabbage (2016): Levene's Test failed (p-value: 0.0000)\nc_carrots (2016): Levene's Test failed (p-value: 0.0000)\nc_eggs (2016): Levene's Test failed (p-value: 0.0000)\nc_garlic (2016): Levene's Test failed (p-value: 0.0000)\nc_meat_beef_chops (2016): Levene's Test failed (p-value: 0.0000)\nc_meat_chicken_whole (2016): Levene's Test failed (p-value: 0.0000)\nc_meat_pork (2016): Levene's Test failed (p-value: 0.0000)\nc_onions (2016): Levene's Test failed (p-value: 0.0000)\nc_potatoes (2016): Levene's Test failed (p-value: 0.0000)\nc_rice (2016): Levene's Test failed (p-value: 0.0000)\nc_tomatoes (2016): Levene's Test failed (p-value: 0.0000)\ncabbage (2016): Levene's Test failed (p-value: nan)\ncarrots (2016): Levene's Test failed (p-value: nan)\neggs (2016): Levene's Test failed (p-value: nan)\ngarlic (2016): Levene's Test failed (p-value: nan)\nh_beans (2016): Levene's Test failed (p-value: 0.0000)\nh_cabbage (2016): Levene's Test failed (p-value: 0.0000)\nh_carrots (2016): Levene's Test failed (p-value: 0.0000)\nh_eggs (2016): Levene's Test failed (p-value: 0.0000)\nh_garlic (2016): Levene's Test failed (p-value: 0.0000)\nh_meat_beef_chops (2016): Levene's Test failed (p-value: 0.0000)\nh_meat_chicken_whole (2016): Levene's Test failed (p-value: 0.0000)\nh_meat_pork (2016): Levene's Test failed (p-value: 0.0000)\nh_onions (2016): Levene's Test failed (p-value: 0.0002)\nh_potatoes (2016): Levene's Test failed (p-value: 0.0000)\nh_rice (2016): Levene's Test failed (p-value: 0.0000)\nh_tomatoes (2016): Levene's Test failed (p-value: 0.0000)\nl_beans (2016): Levene's Test failed (p-value: 0.0000)\nl_cabbage (2016): Levene's Test failed (p-value: 0.0000)\nl_carrots (2016): Levene's Test failed (p-value: 0.0000)\nl_eggs (2016): Levene's Test failed (p-value: 0.0000)\nl_garlic (2016): Levene's Test failed (p-value: 0.0000)\nl_meat_beef_chops (2016): Levene's Test failed (p-value: 0.0000)\nl_meat_chicken_whole (2016): Levene's Test failed (p-value: 0.0000)\nl_meat_pork (2016): Levene's Test failed (p-value: 0.0000)\nl_onions (2016): Levene's Test failed (p-value: 0.0003)\nl_potatoes (2016): Levene's Test failed (p-value: 0.0000)\nl_rice (2016): Levene's Test failed (p-value: 0.0000)\nl_tomatoes (2016): Levene's Test failed (p-value: 0.0000)\nmeat_beef_chops (2016): Levene's Test failed (p-value: nan)\nmeat_chicken_whole (2016): Levene's Test failed (p-value: nan)\nmeat_pork (2016): Levene's Test failed (p-value: nan)\no_beans (2016): Levene's Test failed (p-value: 0.0000)\no_cabbage (2016): Levene's Test failed (p-value: 0.0000)\no_carrots (2016): Levene's Test failed (p-value: 0.0000)\no_eggs (2016): Levene's Test failed (p-value: 0.0000)\no_garlic (2016): Levene's Test failed (p-value: 0.0000)\no_meat_beef_chops (2016): Levene's Test failed (p-value: 0.0000)\no_meat_chicken_whole (2016): Levene's Test failed (p-value: 0.0000)\no_meat_pork (2016): Levene's Test failed (p-value: 0.0000)\no_onions (2016): Levene's Test failed (p-value: 0.0017)\no_potatoes (2016): Levene's Test failed (p-value: 0.0000)\no_rice (2016): Levene's Test failed (p-value: 0.0000)\no_tomatoes (2016): Levene's Test failed (p-value: 0.0000)\nonions (2016): Levene's Test failed (p-value: nan)\npotatoes (2016): Levene's Test failed (p-value: nan)\nrice (2016): Levene's Test failed (p-value: nan)\ntomatoes (2016): Levene's Test failed (p-value: nan)\nbeans (2017): Levene's Test failed (p-value: nan)\nc_beans (2017): Levene's Test failed (p-value: 0.0000)\nc_cabbage (2017): Levene's Test failed (p-value: 0.0000)\nc_carrots (2017): Levene's Test failed (p-value: 0.0000)\nc_eggs (2017): Levene's Test failed (p-value: 0.0000)\nc_garlic (2017): Levene's Test failed (p-value: 0.0000)\nc_meat_beef_chops (2017): Levene's Test failed (p-value: 0.0000)\nc_meat_chicken_whole (2017): Levene's Test failed (p-value: 0.0000)\nc_meat_pork (2017): Levene's Test failed (p-value: 0.0000)\nc_onions (2017): Levene's Test failed (p-value: 0.0006)\nc_potatoes (2017): Levene's Test failed (p-value: 0.0000)\nc_rice (2017): Levene's Test failed (p-value: 0.0000)\nc_tomatoes (2017): Levene's Test failed (p-value: 0.0000)\ncabbage (2017): Levene's Test failed (p-value: nan)\ncarrots (2017): Levene's Test failed (p-value: nan)\neggs (2017): Levene's Test failed (p-value: nan)\ngarlic (2017): Levene's Test failed (p-value: nan)\nh_beans (2017): Levene's Test failed (p-value: 0.0000)\nh_cabbage (2017): Levene's Test failed (p-value: 0.0000)\nh_carrots (2017): Levene's Test failed (p-value: 0.0000)\nh_eggs (2017): Levene's Test failed (p-value: 0.0000)\nh_garlic (2017): Levene's Test failed (p-value: 0.0000)\nh_meat_beef_chops (2017): Levene's Test failed (p-value: 0.0000)\nh_meat_chicken_whole (2017): Levene's Test failed (p-value: 0.0000)\nh_meat_pork (2017): Levene's Test failed (p-value: 0.0000)\nh_onions (2017): Levene's Test failed (p-value: 0.0000)\nh_potatoes (2017): Levene's Test failed (p-value: 0.0000)\nh_rice (2017): Levene's Test failed (p-value: 0.0000)\nh_tomatoes (2017): Levene's Test failed (p-value: 0.0000)\nl_beans (2017): Levene's Test failed (p-value: 0.0000)\nl_cabbage (2017): Levene's Test failed (p-value: 0.0000)\nl_carrots (2017): Levene's Test failed (p-value: 0.0000)\nl_eggs (2017): Levene's Test failed (p-value: 0.0000)\nl_garlic (2017): Levene's Test failed (p-value: 0.0000)\nl_meat_beef_chops (2017): Levene's Test failed (p-value: 0.0000)\nl_meat_chicken_whole (2017): Levene's Test failed (p-value: 0.0000)\nl_meat_pork (2017): Levene's Test failed (p-value: 0.0000)\nl_onions (2017): Levene's Test failed (p-value: 0.0000)\nl_potatoes (2017): Levene's Test failed (p-value: 0.0000)\nl_rice (2017): Levene's Test failed (p-value: 0.0000)\nl_tomatoes (2017): Levene's Test failed (p-value: 0.0000)\nmeat_beef_chops (2017): Levene's Test failed (p-value: nan)\nmeat_chicken_whole (2017): Levene's Test failed (p-value: nan)\nmeat_pork (2017): Levene's Test failed (p-value: nan)\no_beans (2017): Levene's Test failed (p-value: 0.0000)\no_cabbage (2017): Levene's Test failed (p-value: 0.0000)\no_carrots (2017): Levene's Test failed (p-value: 0.0000)\no_eggs (2017): Levene's Test failed (p-value: 0.0000)\no_garlic (2017): Levene's Test failed (p-value: 0.0000)\no_meat_beef_chops (2017): Levene's Test failed (p-value: 0.0000)\no_meat_chicken_whole (2017): Levene's Test failed (p-value: 0.0000)\no_meat_pork (2017): Levene's Test failed (p-value: 0.0000)\no_onions (2017): Levene's Test failed (p-value: 0.0000)\no_potatoes (2017): Levene's Test failed (p-value: 0.0000)\no_rice (2017): Levene's Test failed (p-value: 0.0000)\no_tomatoes (2017): Levene's Test failed (p-value: 0.0000)\nonions (2017): Levene's Test failed (p-value: nan)\npotatoes (2017): Levene's Test failed (p-value: nan)\nrice (2017): Levene's Test failed (p-value: nan)\ntomatoes (2017): Levene's Test failed (p-value: nan)\nbeans (2018): Levene's Test failed (p-value: nan)\nc_beans (2018): Levene's Test failed (p-value: 0.0000)\nc_cabbage (2018): Levene's Test failed (p-value: 0.0000)\nc_carrots (2018): Levene's Test failed (p-value: 0.0000)\nc_eggs (2018): Levene's Test failed (p-value: 0.0000)\nc_garlic (2018): Levene's Test failed (p-value: 0.0000)\nc_meat_beef_chops (2018): Levene's Test failed (p-value: 0.0000)\nc_meat_chicken_whole (2018): Levene's Test failed (p-value: 0.0000)\nc_meat_pork (2018): Levene's Test failed (p-value: 0.0000)\nc_onions (2018): Levene's Test failed (p-value: 0.0006)\nc_potatoes (2018): Levene's Test failed (p-value: 0.0000)\nc_rice (2018): Levene's Test failed (p-value: 0.0000)\nc_tomatoes (2018): Levene's Test failed (p-value: 0.0000)\ncabbage (2018): Levene's Test failed (p-value: nan)\ncarrots (2018): Levene's Test failed (p-value: nan)\neggs (2018): Levene's Test failed (p-value: nan)\ngarlic (2018): Levene's Test failed (p-value: nan)\nh_beans (2018): Levene's Test failed (p-value: 0.0000)\nh_cabbage (2018): Levene's Test failed (p-value: 0.0000)\nh_carrots (2018): Levene's Test failed (p-value: 0.0000)\nh_eggs (2018): Levene's Test failed (p-value: 0.0000)\nh_garlic (2018): Levene's Test failed (p-value: 0.0000)\nh_meat_beef_chops (2018): Levene's Test failed (p-value: 0.0000)\nh_meat_chicken_whole (2018): Levene's Test failed (p-value: 0.0000)\nh_meat_pork (2018): Levene's Test failed (p-value: 0.0000)\nh_onions (2018): Levene's Test passed (p-value: 0.1699)\nh_potatoes (2018): Levene's Test failed (p-value: 0.0000)\nh_rice (2018): Levene's Test failed (p-value: 0.0000)\nh_tomatoes (2018): Levene's Test failed (p-value: 0.0000)\nl_beans (2018): Levene's Test failed (p-value: 0.0000)\nl_cabbage (2018): Levene's Test failed (p-value: 0.0000)\nl_carrots (2018): Levene's Test failed (p-value: 0.0000)\nl_eggs (2018): Levene's Test failed (p-value: 0.0000)\nl_garlic (2018): Levene's Test failed (p-value: 0.0000)\nl_meat_beef_chops (2018): Levene's Test failed (p-value: 0.0000)\nl_meat_chicken_whole (2018): Levene's Test failed (p-value: 0.0000)\nl_meat_pork (2018): Levene's Test failed (p-value: 0.0000)\nl_onions (2018): Levene's Test failed (p-value: 0.0003)\nl_potatoes (2018): Levene's Test failed (p-value: 0.0000)\nl_rice (2018): Levene's Test failed (p-value: 0.0002)\nl_tomatoes (2018): Levene's Test failed (p-value: 0.0000)\nmeat_beef_chops (2018): Levene's Test failed (p-value: nan)\nmeat_chicken_whole (2018): Levene's Test failed (p-value: nan)\nmeat_pork (2018): Levene's Test failed (p-value: nan)\no_beans (2018): Levene's Test failed (p-value: 0.0000)\no_cabbage (2018): Levene's Test failed (p-value: 0.0000)\no_carrots (2018): Levene's Test failed (p-value: 0.0000)\no_eggs (2018): Levene's Test failed (p-value: 0.0000)\no_garlic (2018): Levene's Test failed (p-value: 0.0000)\no_meat_beef_chops (2018): Levene's Test failed (p-value: 0.0000)\no_meat_chicken_whole (2018): Levene's Test failed (p-value: 0.0000)\no_meat_pork (2018): Levene's Test failed (p-value: 0.0000)\no_onions (2018): Levene's Test failed (p-value: 0.0258)\no_potatoes (2018): Levene's Test failed (p-value: 0.0000)\no_rice (2018): Levene's Test failed (p-value: 0.0000)\no_tomatoes (2018): Levene's Test failed (p-value: 0.0000)\nonions (2018): Levene's Test failed (p-value: nan)\npotatoes (2018): Levene's Test failed (p-value: nan)\nrice (2018): Levene's Test failed (p-value: nan)\ntomatoes (2018): Levene's Test failed (p-value: nan)\nbeans (2019): Levene's Test failed (p-value: nan)\nc_beans (2019): Levene's Test failed (p-value: 0.0000)\nc_cabbage (2019): Levene's Test failed (p-value: 0.0000)\nc_carrots (2019): Levene's Test failed (p-value: 0.0000)\nc_eggs (2019): Levene's Test failed (p-value: 0.0000)\nc_garlic (2019): Levene's Test failed (p-value: 0.0000)\nc_meat_beef_chops (2019): Levene's Test failed (p-value: 0.0000)\nc_meat_chicken_whole (2019): Levene's Test failed (p-value: 0.0000)\nc_meat_pork (2019): Levene's Test failed (p-value: 0.0000)\nc_onions (2019): Levene's Test passed (p-value: 0.4429)\nc_potatoes (2019): Levene's Test failed (p-value: 0.0000)\nc_rice (2019): Levene's Test failed (p-value: 0.0000)\nc_tomatoes (2019): Levene's Test failed (p-value: 0.0000)\ncabbage (2019): Levene's Test failed (p-value: nan)\ncarrots (2019): Levene's Test failed (p-value: nan)\neggs (2019): Levene's Test failed (p-value: nan)\ngarlic (2019): Levene's Test failed (p-value: nan)\nh_beans (2019): Levene's Test failed (p-value: 0.0000)\nh_cabbage (2019): Levene's Test failed (p-value: 0.0000)\nh_carrots (2019): Levene's Test failed (p-value: 0.0000)\nh_eggs (2019): Levene's Test failed (p-value: 0.0000)\nh_garlic (2019): Levene's Test failed (p-value: 0.0000)\nh_meat_beef_chops (2019): Levene's Test failed (p-value: 0.0000)\nh_meat_chicken_whole (2019): Levene's Test failed (p-value: 0.0000)\nh_meat_pork (2019): Levene's Test failed (p-value: 0.0000)\nh_onions (2019): Levene's Test passed (p-value: 0.1279)\nh_potatoes (2019): Levene's Test failed (p-value: 0.0000)\nh_rice (2019): Levene's Test failed (p-value: 0.0000)\nh_tomatoes (2019): Levene's Test failed (p-value: 0.0000)\nl_beans (2019): Levene's Test failed (p-value: 0.0000)\nl_cabbage (2019): Levene's Test failed (p-value: 0.0000)\nl_carrots (2019): Levene's Test failed (p-value: 0.0000)\nl_eggs (2019): Levene's Test failed (p-value: 0.0000)\nl_garlic (2019): Levene's Test failed (p-value: 0.0000)\nl_meat_beef_chops (2019): Levene's Test failed (p-value: 0.0000)\nl_meat_chicken_whole (2019): Levene's Test failed (p-value: 0.0000)\nl_meat_pork (2019): Levene's Test failed (p-value: 0.0000)\nl_onions (2019): Levene's Test failed (p-value: 0.0003)\nl_potatoes (2019): Levene's Test failed (p-value: 0.0000)\nl_rice (2019): Levene's Test failed (p-value: 0.0000)\nl_tomatoes (2019): Levene's Test failed (p-value: 0.0000)\nmeat_beef_chops (2019): Levene's Test failed (p-value: nan)\nmeat_chicken_whole (2019): Levene's Test failed (p-value: nan)\nmeat_pork (2019): Levene's Test failed (p-value: nan)\no_beans (2019): Levene's Test failed (p-value: 0.0000)\no_cabbage (2019): Levene's Test failed (p-value: 0.0000)\no_carrots (2019): Levene's Test failed (p-value: 0.0000)\no_eggs (2019): Levene's Test failed (p-value: 0.0000)\no_garlic (2019): Levene's Test failed (p-value: 0.0000)\no_meat_beef_chops (2019): Levene's Test failed (p-value: 0.0000)\no_meat_chicken_whole (2019): Levene's Test failed (p-value: 0.0000)\no_meat_pork (2019): Levene's Test failed (p-value: 0.0000)\no_onions (2019): Levene's Test failed (p-value: 0.0008)\no_potatoes (2019): Levene's Test failed (p-value: 0.0000)\no_rice (2019): Levene's Test failed (p-value: 0.0000)\no_tomatoes (2019): Levene's Test failed (p-value: 0.0000)\nonions (2019): Levene's Test failed (p-value: nan)\npotatoes (2019): Levene's Test failed (p-value: nan)\nrice (2019): Levene's Test failed (p-value: nan)\ntomatoes (2019): Levene's Test failed (p-value: nan)\nbeans (2020): Levene's Test failed (p-value: nan)\nc_beans (2020): Levene's Test failed (p-value: 0.0000)\nc_cabbage (2020): Levene's Test failed (p-value: 0.0000)\nc_carrots (2020): Levene's Test failed (p-value: 0.0000)\nc_eggs (2020): Levene's Test failed (p-value: 0.0000)\nc_garlic (2020): Levene's Test failed (p-value: 0.0000)\nc_meat_beef_chops (2020): Levene's Test failed (p-value: 0.0000)\nc_meat_chicken_whole (2020): Levene's Test failed (p-value: 0.0000)\nc_meat_pork (2020): Levene's Test failed (p-value: 0.0000)\nc_onions (2020): Levene's Test failed (p-value: 0.0002)\nc_potatoes (2020): Levene's Test failed (p-value: 0.0000)\nc_rice (2020): Levene's Test failed (p-value: 0.0000)\nc_tomatoes (2020): Levene's Test failed (p-value: 0.0000)\ncabbage (2020): Levene's Test failed (p-value: nan)\ncarrots (2020): Levene's Test failed (p-value: nan)\neggs (2020): Levene's Test failed (p-value: nan)\ngarlic (2020): Levene's Test failed (p-value: nan)\nh_beans (2020): Levene's Test failed (p-value: 0.0000)\nh_cabbage (2020): Levene's Test failed (p-value: 0.0000)\nh_carrots (2020): Levene's Test failed (p-value: 0.0000)\nh_eggs (2020): Levene's Test failed (p-value: 0.0000)\nh_garlic (2020): Levene's Test failed (p-value: 0.0000)\nh_meat_beef_chops (2020): Levene's Test failed (p-value: 0.0000)\nh_meat_chicken_whole (2020): Levene's Test failed (p-value: 0.0000)\nh_meat_pork (2020): Levene's Test failed (p-value: 0.0000)\nh_onions (2020): Levene's Test failed (p-value: 0.0110)\nh_potatoes (2020): Levene's Test failed (p-value: 0.0000)\nh_rice (2020): Levene's Test failed (p-value: 0.0000)\nh_tomatoes (2020): Levene's Test failed (p-value: 0.0000)\nl_beans (2020): Levene's Test failed (p-value: 0.0000)\nl_cabbage (2020): Levene's Test failed (p-value: 0.0000)\nl_carrots (2020): Levene's Test failed (p-value: 0.0000)\nl_eggs (2020): Levene's Test failed (p-value: 0.0000)\nl_garlic (2020): Levene's Test failed (p-value: 0.0000)\nl_meat_beef_chops (2020): Levene's Test failed (p-value: 0.0000)\nl_meat_chicken_whole (2020): Levene's Test failed (p-value: 0.0000)\nl_meat_pork (2020): Levene's Test failed (p-value: 0.0000)\nl_onions (2020): Levene's Test failed (p-value: 0.0165)\nl_potatoes (2020): Levene's Test failed (p-value: 0.0000)\nl_rice (2020): Levene's Test failed (p-value: 0.0000)\nl_tomatoes (2020): Levene's Test failed (p-value: 0.0000)\nmeat_beef_chops (2020): Levene's Test failed (p-value: nan)\nmeat_chicken_whole (2020): Levene's Test failed (p-value: nan)\nmeat_pork (2020): Levene's Test failed (p-value: nan)\no_beans (2020): Levene's Test failed (p-value: 0.0000)\no_cabbage (2020): Levene's Test failed (p-value: 0.0000)\no_carrots (2020): Levene's Test failed (p-value: 0.0000)\no_eggs (2020): Levene's Test failed (p-value: 0.0000)\no_garlic (2020): Levene's Test failed (p-value: 0.0000)\no_meat_beef_chops (2020): Levene's Test failed (p-value: 0.0000)\no_meat_chicken_whole (2020): Levene's Test failed (p-value: 0.0000)\no_meat_pork (2020): Levene's Test failed (p-value: 0.0000)\no_onions (2020): Levene's Test passed (p-value: 0.0762)\no_potatoes (2020): Levene's Test failed (p-value: 0.0000)\no_rice (2020): Levene's Test failed (p-value: 0.0000)\no_tomatoes (2020): Levene's Test failed (p-value: 0.0000)\nonions (2020): Levene's Test failed (p-value: nan)\npotatoes (2020): Levene's Test failed (p-value: nan)\nrice (2020): Levene's Test failed (p-value: nan)\ntomatoes (2020): Levene's Test failed (p-value: nan)\nbeans (2021): Levene's Test failed (p-value: nan)\nc_beans (2021): Levene's Test failed (p-value: 0.0000)\nc_cabbage (2021): Levene's Test failed (p-value: 0.0000)\nc_carrots (2021): Levene's Test failed (p-value: 0.0000)\nc_eggs (2021): Levene's Test failed (p-value: 0.0000)\nc_garlic (2021): Levene's Test failed (p-value: 0.0000)\nc_meat_beef_chops (2021): Levene's Test failed (p-value: 0.0000)\nc_meat_chicken_whole (2021): Levene's Test failed (p-value: 0.0000)\nc_meat_pork (2021): Levene's Test failed (p-value: 0.0000)\nc_onions (2021): Levene's Test failed (p-value: 0.0091)\nc_potatoes (2021): Levene's Test failed (p-value: 0.0000)\nc_rice (2021): Levene's Test failed (p-value: 0.0000)\nc_tomatoes (2021): Levene's Test failed (p-value: 0.0000)\ncabbage (2021): Levene's Test failed (p-value: nan)\ncarrots (2021): Levene's Test failed (p-value: nan)\neggs (2021): Levene's Test failed (p-value: nan)\ngarlic (2021): Levene's Test failed (p-value: nan)\nh_beans (2021): Levene's Test failed (p-value: 0.0000)\nh_cabbage (2021): Levene's Test failed (p-value: 0.0000)\nh_carrots (2021): Levene's Test failed (p-value: 0.0000)\nh_eggs (2021): Levene's Test failed (p-value: 0.0000)\nh_garlic (2021): Levene's Test failed (p-value: 0.0000)\nh_meat_beef_chops (2021): Levene's Test failed (p-value: 0.0000)\nh_meat_chicken_whole (2021): Levene's Test failed (p-value: 0.0000)\nh_meat_pork (2021): Levene's Test failed (p-value: 0.0000)\nh_onions (2021): Levene's Test failed (p-value: 0.0104)\nh_potatoes (2021): Levene's Test failed (p-value: 0.0000)\nh_rice (2021): Levene's Test failed (p-value: 0.0000)\nh_tomatoes (2021): Levene's Test failed (p-value: 0.0000)\nl_beans (2021): Levene's Test failed (p-value: 0.0000)\nl_cabbage (2021): Levene's Test failed (p-value: 0.0000)\nl_carrots (2021): Levene's Test failed (p-value: 0.0000)\nl_eggs (2021): Levene's Test failed (p-value: 0.0000)\nl_garlic (2021): Levene's Test failed (p-value: 0.0000)\nl_meat_beef_chops (2021): Levene's Test failed (p-value: 0.0000)\nl_meat_chicken_whole (2021): Levene's Test failed (p-value: 0.0000)\nl_meat_pork (2021): Levene's Test failed (p-value: 0.0000)\nl_onions (2021): Levene's Test failed (p-value: 0.0000)\nl_potatoes (2021): Levene's Test failed (p-value: 0.0000)\nl_rice (2021): Levene's Test failed (p-value: 0.0000)\nl_tomatoes (2021): Levene's Test failed (p-value: 0.0000)\nmeat_beef_chops (2021): Levene's Test failed (p-value: nan)\nmeat_chicken_whole (2021): Levene's Test failed (p-value: nan)\nmeat_pork (2021): Levene's Test failed (p-value: nan)\no_beans (2021): Levene's Test failed (p-value: 0.0000)\no_cabbage (2021): Levene's Test failed (p-value: 0.0000)\no_carrots (2021): Levene's Test failed (p-value: 0.0000)\no_eggs (2021): Levene's Test failed (p-value: 0.0000)\no_garlic (2021): Levene's Test failed (p-value: 0.0000)\no_meat_beef_chops (2021): Levene's Test failed (p-value: 0.0000)\no_meat_chicken_whole (2021): Levene's Test failed (p-value: 0.0001)\no_meat_pork (2021): Levene's Test failed (p-value: 0.0000)\no_onions (2021): Levene's Test failed (p-value: 0.0025)\no_potatoes (2021): Levene's Test failed (p-value: 0.0000)\no_rice (2021): Levene's Test failed (p-value: 0.0000)\no_tomatoes (2021): Levene's Test failed (p-value: 0.0000)\nonions (2021): Levene's Test failed (p-value: nan)\npotatoes (2021): Levene's Test failed (p-value: nan)\nrice (2021): Levene's Test failed (p-value: nan)\ntomatoes (2021): Levene's Test failed (p-value: nan)\nbeans (2022): Levene's Test failed (p-value: nan)\nc_beans (2022): Levene's Test failed (p-value: 0.0000)\nc_cabbage (2022): Levene's Test failed (p-value: 0.0000)\nc_carrots (2022): Levene's Test failed (p-value: 0.0000)\nc_eggs (2022): Levene's Test failed (p-value: 0.0000)\nc_garlic (2022): Levene's Test failed (p-value: 0.0000)\nc_meat_beef_chops (2022): Levene's Test failed (p-value: 0.0000)\nc_meat_chicken_whole (2022): Levene's Test failed (p-value: 0.0000)\nc_meat_pork (2022): Levene's Test failed (p-value: 0.0000)\nc_onions (2022): Levene's Test failed (p-value: 0.0074)\nc_potatoes (2022): Levene's Test failed (p-value: 0.0000)\nc_rice (2022): Levene's Test failed (p-value: 0.0000)\nc_tomatoes (2022): Levene's Test failed (p-value: 0.0000)\ncabbage (2022): Levene's Test failed (p-value: nan)\ncarrots (2022): Levene's Test failed (p-value: nan)\neggs (2022): Levene's Test failed (p-value: nan)\ngarlic (2022): Levene's Test failed (p-value: nan)\nh_beans (2022): Levene's Test failed (p-value: 0.0000)\nh_cabbage (2022): Levene's Test failed (p-value: 0.0000)\nh_carrots (2022): Levene's Test failed (p-value: 0.0000)\nh_eggs (2022): Levene's Test failed (p-value: 0.0000)\nh_garlic (2022): Levene's Test failed (p-value: 0.0000)\nh_meat_beef_chops (2022): Levene's Test failed (p-value: 0.0000)\nh_meat_chicken_whole (2022): Levene's Test failed (p-value: 0.0000)\nh_meat_pork (2022): Levene's Test failed (p-value: 0.0000)\nh_onions (2022): Levene's Test failed (p-value: 0.0001)\nh_potatoes (2022): Levene's Test failed (p-value: 0.0000)\nh_rice (2022): Levene's Test failed (p-value: 0.0000)\nh_tomatoes (2022): Levene's Test failed (p-value: 0.0000)\nl_beans (2022): Levene's Test failed (p-value: 0.0000)\nl_cabbage (2022): Levene's Test failed (p-value: 0.0000)\nl_carrots (2022): Levene's Test failed (p-value: 0.0000)\nl_eggs (2022): Levene's Test failed (p-value: 0.0000)\nl_garlic (2022): Levene's Test failed (p-value: 0.0000)\nl_meat_beef_chops (2022): Levene's Test failed (p-value: 0.0000)\nl_meat_chicken_whole (2022): Levene's Test failed (p-value: 0.0000)\nl_meat_pork (2022): Levene's Test failed (p-value: 0.0000)\nl_onions (2022): Levene's Test failed (p-value: 0.0008)\nl_potatoes (2022): Levene's Test failed (p-value: 0.0000)\nl_rice (2022): Levene's Test failed (p-value: 0.0000)\nl_tomatoes (2022): Levene's Test failed (p-value: 0.0000)\nmeat_beef_chops (2022): Levene's Test failed (p-value: nan)\nmeat_chicken_whole (2022): Levene's Test failed (p-value: nan)\nmeat_pork (2022): Levene's Test failed (p-value: nan)\no_beans (2022): Levene's Test failed (p-value: 0.0000)\no_cabbage (2022): Levene's Test failed (p-value: 0.0000)\no_carrots (2022): Levene's Test failed (p-value: 0.0000)\no_eggs (2022): Levene's Test failed (p-value: 0.0000)\no_garlic (2022): Levene's Test failed (p-value: 0.0000)\no_meat_beef_chops (2022): Levene's Test failed (p-value: 0.0000)\no_meat_chicken_whole (2022): Levene's Test failed (p-value: 0.0000)\no_meat_pork (2022): Levene's Test failed (p-value: 0.0000)\no_onions (2022): Levene's Test failed (p-value: 0.0001)\no_potatoes (2022): Levene's Test failed (p-value: 0.0000)\no_rice (2022): Levene's Test failed (p-value: 0.0000)\no_tomatoes (2022): Levene's Test failed (p-value: 0.0000)\nonions (2022): Levene's Test failed (p-value: nan)\npotatoes (2022): Levene's Test failed (p-value: nan)\nrice (2022): Levene's Test failed (p-value: nan)\ntomatoes (2022): Levene's Test failed (p-value: nan)\nbeans (2023): Levene's Test failed (p-value: nan)\nc_beans (2023): Levene's Test failed (p-value: 0.0000)\nc_cabbage (2023): Levene's Test failed (p-value: 0.0000)\nc_carrots (2023): Levene's Test failed (p-value: 0.0000)\nc_eggs (2023): Levene's Test failed (p-value: 0.0000)\nc_garlic (2023): Levene's Test failed (p-value: 0.0000)\nc_meat_beef_chops (2023): Levene's Test failed (p-value: 0.0000)\nc_meat_chicken_whole (2023): Levene's Test failed (p-value: 0.0000)\nc_meat_pork (2023): Levene's Test failed (p-value: 0.0000)\nc_onions (2023): Levene's Test failed (p-value: 0.0292)\nc_potatoes (2023): Levene's Test failed (p-value: 0.0000)\nc_rice (2023): Levene's Test failed (p-value: 0.0017)\nc_tomatoes (2023): Levene's Test failed (p-value: 0.0000)\ncabbage (2023): Levene's Test failed (p-value: nan)\ncarrots (2023): Levene's Test failed (p-value: nan)\neggs (2023): Levene's Test failed (p-value: nan)\ngarlic (2023): Levene's Test failed (p-value: nan)\nh_beans (2023): Levene's Test failed (p-value: 0.0000)\nh_cabbage (2023): Levene's Test failed (p-value: 0.0000)\nh_carrots (2023): Levene's Test failed (p-value: 0.0000)\nh_eggs (2023): Levene's Test failed (p-value: 0.0000)\nh_garlic (2023): Levene's Test failed (p-value: 0.0000)\nh_meat_beef_chops (2023): Levene's Test failed (p-value: 0.0000)\nh_meat_chicken_whole (2023): Levene's Test failed (p-value: 0.0000)\nh_meat_pork (2023): Levene's Test failed (p-value: 0.0000)\nh_onions (2023): Levene's Test failed (p-value: 0.0002)\nh_potatoes (2023): Levene's Test failed (p-value: 0.0000)\nh_rice (2023): Levene's Test failed (p-value: 0.0043)\nh_tomatoes (2023): Levene's Test failed (p-value: 0.0000)\nl_beans (2023): Levene's Test failed (p-value: 0.0000)\nl_cabbage (2023): Levene's Test failed (p-value: 0.0000)\nl_carrots (2023): Levene's Test failed (p-value: 0.0000)\nl_eggs (2023): Levene's Test failed (p-value: 0.0000)\nl_garlic (2023): Levene's Test failed (p-value: 0.0000)\nl_meat_beef_chops (2023): Levene's Test failed (p-value: 0.0000)\nl_meat_chicken_whole (2023): Levene's Test failed (p-value: 0.0000)\nl_meat_pork (2023): Levene's Test failed (p-value: 0.0000)\nl_onions (2023): Levene's Test failed (p-value: 0.0128)\nl_potatoes (2023): Levene's Test failed (p-value: 0.0000)\nl_rice (2023): Levene's Test failed (p-value: 0.0027)\nl_tomatoes (2023): Levene's Test failed (p-value: 0.0000)\nmeat_beef_chops (2023): Levene's Test failed (p-value: nan)\nmeat_chicken_whole (2023): Levene's Test failed (p-value: nan)\nmeat_pork (2023): Levene's Test failed (p-value: nan)\no_beans (2023): Levene's Test failed (p-value: 0.0000)\no_cabbage (2023): Levene's Test failed (p-value: 0.0000)\no_carrots (2023): Levene's Test failed (p-value: 0.0000)\no_eggs (2023): Levene's Test failed (p-value: 0.0000)\no_garlic (2023): Levene's Test failed (p-value: 0.0000)\no_meat_beef_chops (2023): Levene's Test failed (p-value: 0.0000)\no_meat_chicken_whole (2023): Levene's Test failed (p-value: 0.0000)\no_meat_pork (2023): Levene's Test failed (p-value: 0.0000)\no_onions (2023): Levene's Test failed (p-value: 0.0033)\no_potatoes (2023): Levene's Test failed (p-value: 0.0000)\no_rice (2023): Levene's Test failed (p-value: 0.0099)\no_tomatoes (2023): Levene's Test failed (p-value: 0.0000)\nonions (2023): Levene's Test failed (p-value: nan)\npotatoes (2023): Levene's Test failed (p-value: nan)\nrice (2023): Levene's Test failed (p-value: nan)\ntomatoes (2023): Levene's Test failed (p-value: nan)\nbeans (2024): Levene's Test failed (p-value: nan)\nc_beans (2024): Levene's Test failed (p-value: 0.0000)\nc_cabbage (2024): Levene's Test failed (p-value: 0.0000)\nc_carrots (2024): Levene's Test failed (p-value: 0.0000)\nc_eggs (2024): Levene's Test failed (p-value: 0.0000)\nc_garlic (2024): Levene's Test failed (p-value: 0.0000)\nc_meat_beef_chops (2024): Levene's Test failed (p-value: 0.0000)\nc_meat_chicken_whole (2024): Levene's Test failed (p-value: 0.0000)\nc_meat_pork (2024): Levene's Test failed (p-value: 0.0000)\nc_onions (2024): Levene's Test failed (p-value: 0.0000)\nc_potatoes (2024): Levene's Test failed (p-value: 0.0000)\nc_rice (2024): Levene's Test failed (p-value: 0.0000)\nc_tomatoes (2024): Levene's Test failed (p-value: 0.0000)\ncabbage (2024): Levene's Test failed (p-value: nan)\ncarrots (2024): Levene's Test failed (p-value: nan)\neggs (2024): Levene's Test failed (p-value: nan)\ngarlic (2024): Levene's Test failed (p-value: nan)\nh_beans (2024): Levene's Test failed (p-value: 0.0000)\nh_cabbage (2024): Levene's Test failed (p-value: 0.0000)\nh_carrots (2024): Levene's Test failed (p-value: 0.0000)\nh_eggs (2024): Levene's Test failed (p-value: 0.0000)\nh_garlic (2024): Levene's Test failed (p-value: 0.0000)\nh_meat_beef_chops (2024): Levene's Test failed (p-value: 0.0000)\nh_meat_chicken_whole (2024): Levene's Test failed (p-value: 0.0000)\nh_meat_pork (2024): Levene's Test failed (p-value: 0.0000)\nh_onions (2024): Levene's Test failed (p-value: 0.0004)\nh_potatoes (2024): Levene's Test failed (p-value: 0.0000)\nh_rice (2024): Levene's Test failed (p-value: 0.0000)\nh_tomatoes (2024): Levene's Test failed (p-value: 0.0000)\nl_beans (2024): Levene's Test failed (p-value: 0.0000)\nl_cabbage (2024): Levene's Test failed (p-value: 0.0000)\nl_carrots (2024): Levene's Test failed (p-value: 0.0000)\nl_eggs (2024): Levene's Test failed (p-value: 0.0000)\nl_garlic (2024): Levene's Test failed (p-value: 0.0000)\nl_meat_beef_chops (2024): Levene's Test failed (p-value: 0.0000)\nl_meat_chicken_whole (2024): Levene's Test failed (p-value: 0.0000)\nl_meat_pork (2024): Levene's Test failed (p-value: 0.0000)\nl_onions (2024): Levene's Test failed (p-value: 0.0000)\nl_potatoes (2024): Levene's Test failed (p-value: 0.0000)\nl_rice (2024): Levene's Test failed (p-value: 0.0000)\nl_tomatoes (2024): Levene's Test failed (p-value: 0.0000)\nmeat_beef_chops (2024): Levene's Test failed (p-value: nan)\nmeat_chicken_whole (2024): Levene's Test failed (p-value: nan)\nmeat_pork (2024): Levene's Test failed (p-value: nan)\no_beans (2024): Levene's Test failed (p-value: 0.0000)\no_cabbage (2024): Levene's Test failed (p-value: 0.0000)\no_carrots (2024): Levene's Test failed (p-value: 0.0000)\no_eggs (2024): Levene's Test failed (p-value: 0.0000)\no_garlic (2024): Levene's Test failed (p-value: 0.0000)\no_meat_beef_chops (2024): Levene's Test failed (p-value: 0.0000)\no_meat_chicken_whole (2024): Levene's Test failed (p-value: 0.0000)\no_meat_pork (2024): Levene's Test failed (p-value: 0.0000)\no_onions (2024): Levene's Test failed (p-value: 0.0001)\no_potatoes (2024): Levene's Test failed (p-value: 0.0000)\no_rice (2024): Levene's Test failed (p-value: 0.0000)\no_tomatoes (2024): Levene's Test failed (p-value: 0.0000)\nonions (2024): Levene's Test failed (p-value: nan)\npotatoes (2024): Levene's Test failed (p-value: nan)\nrice (2024): Levene's Test failed (p-value: nan)\ntomatoes (2024): Levene's Test failed (p-value: nan)\nbeans (2025): Levene's Test failed (p-value: nan)\nc_beans (2025): Levene's Test passed (p-value: 0.0553)\nc_cabbage (2025): Levene's Test failed (p-value: 0.0244)\nc_carrots (2025): Levene's Test passed (p-value: 0.4763)\nc_eggs (2025): Levene's Test failed (p-value: 0.0376)\nc_garlic (2025): Levene's Test passed (p-value: 0.3800)\nc_meat_beef_chops (2025): Levene's Test passed (p-value: 0.4893)\nc_meat_chicken_whole (2025): Levene's Test passed (p-value: 0.5799)\nc_meat_pork (2025): Levene's Test passed (p-value: 0.7293)\nc_onions (2025): Levene's Test passed (p-value: 0.3528)\nc_potatoes (2025): Levene's Test passed (p-value: 0.3765)\nc_rice (2025): Levene's Test passed (p-value: 0.6974)\nc_tomatoes (2025): Levene's Test passed (p-value: 0.5183)\ncabbage (2025): Levene's Test failed (p-value: nan)\ncarrots (2025): Levene's Test failed (p-value: nan)\neggs (2025): Levene's Test failed (p-value: nan)\ngarlic (2025): Levene's Test failed (p-value: nan)\nh_beans (2025): Levene's Test passed (p-value: 0.1927)\nh_cabbage (2025): Levene's Test failed (p-value: 0.0000)\nh_carrots (2025): Levene's Test passed (p-value: 0.3854)\nh_eggs (2025): Levene's Test failed (p-value: 0.0192)\nh_garlic (2025): Levene's Test passed (p-value: 0.3405)\nh_meat_beef_chops (2025): Levene's Test passed (p-value: 0.6051)\nh_meat_chicken_whole (2025): Levene's Test passed (p-value: 0.4778)\nh_meat_pork (2025): Levene's Test passed (p-value: 0.5669)\nh_onions (2025): Levene's Test passed (p-value: 0.1001)\nh_potatoes (2025): Levene's Test passed (p-value: 0.5040)\nh_rice (2025): Levene's Test passed (p-value: 0.5394)\nh_tomatoes (2025): Levene's Test passed (p-value: 0.1647)\nl_beans (2025): Levene's Test failed (p-value: 0.0500)\nl_cabbage (2025): Levene's Test passed (p-value: 0.2610)\nl_carrots (2025): Levene's Test passed (p-value: 0.1821)\nl_eggs (2025): Levene's Test failed (p-value: 0.0165)\nl_garlic (2025): Levene's Test passed (p-value: 0.4207)\nl_meat_beef_chops (2025): Levene's Test passed (p-value: 0.5909)\nl_meat_chicken_whole (2025): Levene's Test passed (p-value: 0.2936)\nl_meat_pork (2025): Levene's Test passed (p-value: 0.7404)\nl_onions (2025): Levene's Test passed (p-value: 0.3283)\nl_potatoes (2025): Levene's Test passed (p-value: 0.2831)\nl_rice (2025): Levene's Test passed (p-value: 0.8548)\nl_tomatoes (2025): Levene's Test passed (p-value: 0.6348)\nmeat_beef_chops (2025): Levene's Test failed (p-value: nan)\nmeat_chicken_whole (2025): Levene's Test failed (p-value: nan)\nmeat_pork (2025): Levene's Test failed (p-value: nan)\no_beans (2025): Levene's Test passed (p-value: 0.1579)\no_cabbage (2025): Levene's Test failed (p-value: 0.0003)\no_carrots (2025): Levene's Test passed (p-value: 0.2106)\no_eggs (2025): Levene's Test failed (p-value: 0.0065)\no_garlic (2025): Levene's Test passed (p-value: 0.3786)\no_meat_beef_chops (2025): Levene's Test passed (p-value: 0.6147)\no_meat_chicken_whole (2025): Levene's Test passed (p-value: 0.3767)\no_meat_pork (2025): Levene's Test passed (p-value: 0.7053)\no_onions (2025): Levene's Test passed (p-value: 0.0670)\no_potatoes (2025): Levene's Test passed (p-value: 0.3549)\no_rice (2025): Levene's Test passed (p-value: 0.8169)\no_tomatoes (2025): Levene's Test passed (p-value: 0.4508)\nonions (2025): Levene's Test failed (p-value: nan)\npotatoes (2025): Levene's Test failed (p-value: nan)\nrice (2025): Levene's Test failed (p-value: nan)\ntomatoes (2025): Levene's Test failed (p-value: nan)\n\n\nusing Levene’s test, all regions per item and year failed to show homogeneity in their Variances\nThis means the use of Kruskall-Wallis test for this dataset.\n\n# Group the data by 'year', 'Food_Items', and 'Region' and collect prices into lists\ngrouped_data = df_melted.groupby(['year', 'Food_Items', 'Region'])['Price'].apply(list).reset_index()\n\n# Get unique combinations of 'year' and 'Food_Items'\nunique_combinations = grouped_data.groupby(['year', 'Food_Items'])\n\n# Perform Kruskal-Wallis test for each combination of year and food item across regions\nresults = []\n\nfor (year, food_item), group in unique_combinations:\n    # Extract price data for each region\n    price_groups = [prices for prices in group['Price']]\n    \n    # Check if there are at least two regions to compare\n    if len(price_groups) &gt; 1:\n        # Perform Kruskal-Wallis test\n        stat, p_value = kruskal(*price_groups)\n        results.append({\n            'Year': year,\n            'Food_Item': food_item,\n            'H-statistic': stat,\n            'p-value': p_value,\n            'Result': 'Significant' if p_value &lt; 0.05 else 'Not Significant'\n        })\n    else:\n        results.append({\n            'Year': year,\n            'Food_Item': food_item,\n            'H-statistic': None,\n            'p-value': None,\n            'Result': 'Not enough regions to test'\n        })\n\n# Convert results into a DataFrame for better visualization\nresults_df = pd.DataFrame(results)\n\n# Display the results\nresults_df.to_csv(\"hypothesis_testing_result.csv\", index=False)\n\n\n\nupon checking the results, all of the regions per year and item have significant differences, which means that the prices of every item in the region per year are different, which may be due to various reasons like seasonality, transportation, and agricultural reasons."
  },
  {
    "objectID": "Philippine_food_price_Analysis_and_Visualization/Reports/full_report.html",
    "href": "Philippine_food_price_Analysis_and_Visualization/Reports/full_report.html",
    "title": "Full Analysis of Philippine Food prices from 2007 - 2025",
    "section": "",
    "text": "Compare average prices across different regions for the same food item and year.\nExamine how prices of a specific food item have changed over time.\nIdentify regional price variations for different food items.\nPredict future food prices based on historical data.\n\n\n\nCode\nfrom itables import init_notebook_mode\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom ipywidgets import interact\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport scikit_posthocs as sp\nimport ipywidgets as widgets\nfrom IPython.display import display, clear_output\nfrom pmdarima import auto_arima\nimport warnings\nimport plotly.io as pio\nfrom plotly.subplots import make_subplots\nfrom datetime import datetime, timedelta\nimport json\n\n\n\n\nCode\ninit_notebook_mode(all_interactive=True)\npio.renderers.default = \"plotly_mimetype+notebook_connected\"\nwarnings.filterwarnings(\"ignore\")\n\n\n\n\n\n\n\n\n\n\n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\nThis is the init_notebook_mode cell from ITables v2.2.4\n(you should not see this message - is your notebook trusted?)\n\n\n\n\n\n\nCode\nfile_path = \"../Data/Processed/eda_results.csv\"\ndf = pd.read_csv(file_path)"
  },
  {
    "objectID": "Philippine_food_price_Analysis_and_Visualization/Reports/full_report.html#aims",
    "href": "Philippine_food_price_Analysis_and_Visualization/Reports/full_report.html#aims",
    "title": "Full Analysis of Philippine Food prices from 2007 - 2025",
    "section": "",
    "text": "Compare average prices across different regions for the same food item and year.\nExamine how prices of a specific food item have changed over time.\nIdentify regional price variations for different food items.\nPredict future food prices based on historical data.\n\n\n\nCode\nfrom itables import init_notebook_mode\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom ipywidgets import interact\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport scikit_posthocs as sp\nimport ipywidgets as widgets\nfrom IPython.display import display, clear_output\nfrom pmdarima import auto_arima\nimport warnings\nimport plotly.io as pio\nfrom plotly.subplots import make_subplots\nfrom datetime import datetime, timedelta\nimport json\n\n\n\n\nCode\ninit_notebook_mode(all_interactive=True)\npio.renderers.default = \"plotly_mimetype+notebook_connected\"\nwarnings.filterwarnings(\"ignore\")\n\n\n\n\n\n\n\n\n\n\n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\nThis is the init_notebook_mode cell from ITables v2.2.4\n(you should not see this message - is your notebook trusted?)\n\n\n\n\n\n\nCode\nfile_path = \"../Data/Processed/eda_results.csv\"\ndf = pd.read_csv(file_path)"
  },
  {
    "objectID": "Philippine_food_price_Analysis_and_Visualization/Reports/full_report.html#inspect-the-data",
    "href": "Philippine_food_price_Analysis_and_Visualization/Reports/full_report.html#inspect-the-data",
    "title": "Full Analysis of Philippine Food prices from 2007 - 2025",
    "section": "Inspect the data",
    "text": "Inspect the data\n\nView the first few rows of the dataset\n\n\nCode\ndf.head()\n\n\n\n\n    \n      \n      Region\n      Province\n      Food_Items\n      year\n      mean\n      median\n      Mode\n      Variance\n      Standard Deviation\n      IQR\n    \n  \n\n\n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\nLoading ITables v2.2.4 from the init_notebook_mode cell...\n(need help?)\n\n\n\n\n\n\n\nView the columns and data types of the dataset\n\n\nCode\ndf.info()\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 91200 entries, 0 to 91199\nData columns (total 10 columns):\n #   Column              Non-Null Count  Dtype  \n---  ------              --------------  -----  \n 0   Region              91200 non-null  object \n 1   Province            91200 non-null  object \n 2   Food_Items          91200 non-null  object \n 3   year                91200 non-null  int64  \n 4   mean                78875 non-null  float64\n 5   median              78875 non-null  float64\n 6   Mode                36432 non-null  float64\n 7   Variance            76125 non-null  float64\n 8   Standard Deviation  76125 non-null  float64\n 9   IQR                 78875 non-null  float64\ndtypes: float64(6), int64(1), object(3)\nmemory usage: 7.0+ MB\n\n\n\n\nView the summary statistics of the dataset\n\n\nCode\ndf.describe()\n\n\n\n\n    \n      \n      year\n      mean\n      median\n      Mode\n      Variance\n      Standard Deviation\n      IQR\n    \n  \n\n\n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\nLoading ITables v2.2.4 from the init_notebook_mode cell...\n(need help?)\n\n\n\n\n\n\n\ncheck the shape of the dataset\n\n\nCode\ndf.shape\n\n\n(91200, 10)\n\n\n\n\nget the first and last year\n\n\nCode\ndf['year'].agg(['min', 'max'])\n\n\n\n\n    \n      \n      year\n    \n  \n\n\n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\nLoading ITables v2.2.4 from the init_notebook_mode cell...\n(need help?)"
  },
  {
    "objectID": "Philippine_food_price_Analysis_and_Visualization/Reports/full_report.html#food-price-comparison-by-region-and-year",
    "href": "Philippine_food_price_Analysis_and_Visualization/Reports/full_report.html#food-price-comparison-by-region-and-year",
    "title": "Full Analysis of Philippine Food prices from 2007 - 2025",
    "section": "Food Price Comparison by Region and Year",
    "text": "Food Price Comparison by Region and Year\nFor comparing average prices across regions for the same food item and year, the closing price is generally the best price to use. Here’s why:\n\nConsistency: The closing price is considered the most representative of the market’s consensus for that period. It accounts for the entire trading session and reflects both supply and demand dynamics over time.\nStandard Usage: The closing price is the most widely used price in financial markets, meaning data and analysis are typically focused around this price.\nSimplicity: It eliminates the noise created by intra-day fluctuations, focusing on the price at the end of the trading session, which is more relevant for long-term comparisons.\n\n\n\nCode\n# Filter the dataframe to keep only rows where 'food_item' starts with 'c_'\ndf_filtered = df[df['Food_Items'].str.startswith('c_')]\n\n# remove the 'c_' from the 'food_item' column\ndf_filtered.loc[:, 'Food_Items'] = df_filtered['Food_Items'].str.replace('c_', '', regex=True)\ndf_filtered\n\n\n\n\n    \n      \n      Region\n      Province\n      Food_Items\n      year\n      mean\n      median\n      Mode\n      Variance\n      Standard Deviation\n      IQR\n    \n  \n\n\n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\nLoading ITables v2.2.4 from the init_notebook_mode cell...\n(need help?)\n\n\n\n\n\n\n\nCode\n# Create figure\nfig = go.Figure()\n\n# Add traces for each food item and stat\nfood_items = df_filtered['Food_Items'].unique()\nstats = ['mean', 'median']\n\nfor food in food_items:\n    for stat in stats:\n        df_food = df_filtered[df_filtered['Food_Items'] == food]\n        for region in df_food['Region'].unique():\n            df_region = df_food[df_food['Region'] == region]\n            fig.add_trace(go.Scatter(\n                x=df_region['year'],\n                y=df_region[stat],\n                mode='lines+markers',\n                name=f\"{food} - {region} ({stat})\",\n                visible=False\n            ))\n\n# Set initial visible traces (first food item, 'mean' stat)\ninitial_food = food_items[0]\ninitial_stat = 'mean'\nfor trace in fig.data:\n    if initial_food in trace.name and initial_stat in trace.name:\n        trace.visible = True\n\n# Create separate dropdown buttons for food items and statistics\nfood_buttons = []\nstat_buttons = []\n\nfor food in food_items:\n    visibility = [food in trace.name and initial_stat in trace.name for trace in fig.data]\n    food_buttons.append({\n        'label': food,\n        'method': 'update',\n        'args': [{'visible': visibility},\n                 {'title': f\"{initial_stat.capitalize()} for {food} by Region and Year\"}]\n    })\n\nfor stat in stats:\n    visibility = [initial_food in trace.name and stat in trace.name for trace in fig.data]\n    stat_buttons.append({\n        'label': stat,\n        'method': 'update',\n        'args': [{'visible': visibility},\n                 {'title': f\"{stat.capitalize()} for {initial_food} by Region and Year\"}]\n    })\n\n# Update layout with separate dropdown menus\nfig.update_layout(\n    title=f\"{initial_stat.capitalize()} for {initial_food} by Region and Year\",\n    xaxis_title=\"Year\",\n    yaxis_title=\"Price\",\n    template=\"plotly_white\",\n    updatemenus=[\n        {\n            'buttons': food_buttons,\n            'direction': 'down',\n            'showactive': True,\n            'x': 0,\n            'xanchor': 'left',\n            'y': 1.12,\n            'yanchor': 'top',\n        },\n        {\n            'buttons': stat_buttons,\n            'direction': 'down',\n            'showactive': True,\n            'x': 0.28,\n            'xanchor': 'left',\n            'y': 1.12,\n            'yanchor': 'top',\n        }\n    ]\n)\n\n# Show figure\nfig.show()\n\n\n\n\n                                                \n\n\nFigure 1: A line chart showing the mean and median price of each food item by region and year\n\n\n\n\n\nKey Observation\nThe graph shows the mean (average) price and/or median price of different food items over time for different regions in the Philippines.\n\nTrend - Generally, the price of all food items has been increasing over the years across most regions. There are some fluctuations and periods of stability for some items, but the overall trend is upward.\nRegional Differences - There is significant variation in price of different food items across regions. Some regions consistently have higher prices than others. Price fluctuations also varies between regions. Some regions experience more volatile prices than others.\n\n\n\nKey Reasons\nFactors like weather patterns, government policies, agriculture changes, food transportation and global market trends can influence these prices."
  },
  {
    "objectID": "Philippine_food_price_Analysis_and_Visualization/Reports/full_report.html#price-difference-over-the-years",
    "href": "Philippine_food_price_Analysis_and_Visualization/Reports/full_report.html#price-difference-over-the-years",
    "title": "Full Analysis of Philippine Food prices from 2007 - 2025",
    "section": "Price Difference over the Years",
    "text": "Price Difference over the Years\n\n\nCode\nfile_path = \"../Data/Interim/cleaned_food_prices.csv\"\ndf_range = pd.read_csv(file_path)\n\n#dropping columns related to food price index\ndf_nofpi_range = df_range.drop(columns=['o_food_price_index', 'h_food_price_index', 'l_food_price_index', 'c_food_price_index', 'inflation_food_price_index', 'trust_food_price_index'])\n\n# Convert 'Date' column to datetime format\ndf_nofpi_range['Date'] = pd.to_datetime(df_nofpi_range['Date'])\n\n#dropping columns related to inflation\ndf_noinf_range = df_nofpi_range.drop(columns=['inflation_beans','inflation_cabbage', 'inflation_carrots', 'inflation_eggs', 'inflation_garlic', 'inflation_meat_beef_chops', 'inflation_meat_chicken_whole', 'inflation_meat_pork', 'inflation_onions', 'inflation_potatoes', 'inflation_rice', 'inflation_tomatoes'])\n\n#dropping columns related to trust scores\ndf_cleaned_range = df_noinf_range.drop(columns=['trust_beans','trust_cabbage', 'trust_carrots', 'trust_eggs', 'trust_garlic', 'trust_meat_beef_chops', 'trust_meat_chicken_whole', 'trust_meat_pork', 'trust_onions', 'trust_potatoes', 'trust_rice', 'trust_tomatoes'])\n\n#dropping uneeded columns\ndf_unneeded_range = df_cleaned_range.drop(columns=['country', 'City', 'lat', 'lon', 'Province', 'year', 'month'])\n\n# Reshaping from wide to long format (including year and month as part of the identifier)\ndf_range = df_unneeded_range.melt(id_vars=['Region', 'Date'], var_name='Food_Items', value_name='Price')\n\ndf_range_filtered = df_range[df_range['Food_Items'].str.startswith('c_')]\n\ndf_range_filtered.loc[:, 'Food_Items'] = df_range_filtered['Food_Items'].str.replace('c_', '', regex=True)\n\nprice_stats = df_range_filtered.groupby(['Date', 'Food_Items'])['Price'].agg(['min', 'max', 'mean']).reset_index()\nprice_stats\n\n\n\n\n    \n      \n      Date\n      Food_Items\n      min\n      max\n      mean\n    \n  \n\n\n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\nLoading ITables v2.2.4 from the init_notebook_mode cell...\n(need help?)\n\n\n\n\n\n\n\nCode\ndef range_chart(price_stats):\n    # Convert Date to datetime if it isn't already\n    price_stats['Date'] = pd.to_datetime(price_stats['Date'])\n    \n    # Get unique food items for our dropdown\n    food_items = sorted(price_stats['Food_Items'].unique())\n    \n    # Initialize our figure\n    fig = go.Figure()\n    \n    # Create a list to store our dropdown menu options\n    dropdown_buttons = []\n    \n    # For each food item, we'll create a filled range plot\n    for i, food_item in enumerate(food_items):\n        # Filter data for this specific food item\n        item_data = price_stats[price_stats['Food_Items'] == food_item]\n        \n        # Create a filled range plot\n        fig.add_trace(\n            go.Scatter(\n                x=item_data['Date'],\n                y=item_data['max'],\n                name='Price Range',\n                mode='lines',\n                line=dict(width=0),\n                showlegend=False,\n                visible=(i == 0)  # Only first item visible initially\n            )\n        )\n        \n        fig.add_trace(\n            go.Scatter(\n                x=item_data['Date'],\n                y=item_data['min'],\n                name=f'{food_item} Price Range',\n                fill='tonexty',  # Fill area between traces\n                mode='lines',\n                line=dict(width=0),\n                fillcolor='rgba(68, 138, 255, 0.4)',  # Semi-transparent blue\n                visible=(i == 0)  # Only first item visible initially\n            )\n        )\n        \n        # Add a line for the mean price\n        fig.add_trace(\n            go.Scatter(\n                x=item_data['Date'],\n                y=item_data['mean'],\n                name='Average Price',\n                mode='lines',\n                line=dict(\n                    color='rgb(31, 119, 180)',\n                    width=2\n                ),\n                visible=(i == 0)  # Only first item visible initially\n            )\n        )\n        \n        # Create visibility list for this food item's traces\n        # Each food item has 3 traces (upper bound, lower bound, and mean)\n        visible_list = [False] * (len(food_items) * 3)\n        visible_list[i*3:(i*3)+3] = [True, True, True]\n        \n        # Add button for this food item to dropdown menu\n        dropdown_buttons.append(\n            dict(\n                args=[{\"visible\": visible_list},\n                      {\"title\": f\"Price Range for {food_item} Over Time\"}],\n                label=food_item,\n                method=\"update\"\n            )\n        )\n    \n    # Update layout with dropdown menu and other customizations\n    fig.update_layout(\n        updatemenus=[\n            dict(\n                buttons=dropdown_buttons,\n                direction=\"down\",\n                showactive=True,\n                x=0.05,\n                y=1.15,\n                xanchor=\"left\",\n                yanchor=\"top\"\n            )\n        ],\n        # Add title and axis labels\n        title=f\"Price Range for {food_items[0]} Over Time\",\n        xaxis_title=\"Date\",\n        yaxis_title=\"Price\",\n        hovermode='x unified',\n        # Improve layout appearance\n        template=\"plotly_white\",\n        margin=dict(t=110),  # Add top margin for dropdown\n        # Improve legend layout\n        legend=dict(\n            orientation=\"h\",\n            yanchor=\"bottom\",\n            y=1.02,\n            xanchor=\"right\",\n            x=1\n        )\n    )\n    \n    # Customize hover template to show min, max, and mean prices\n    for trace in fig.data:\n        trace.hovertemplate = '%{y:.2f}&lt;extra&gt;&lt;/extra&gt;'\n    \n    return fig\n\n# Example usage:\nfig = range_chart(price_stats)\nfig.show()\n\n\n\n\n                                                \n\n\nFigure 2: A line chart showing the upper bound, mean, and lower bound price ranges for each food item by date. The area shaded in light blue between the upper and lower bounds is the price range.\n\n\n\n\n\n\nCode\nprice_stats['price_spread'] = price_stats['max'] - price_stats['min']\n\ndef spread_chart(price_stats):\n    \n    # Get unique food items for dropdown\n    food_items = sorted(price_stats['Food_Items'].unique())\n    \n    # Initialize figure\n    figrange = go.Figure()\n    \n    # Create a list to store dropdown menu options\n    dropdown_buttons = []\n    \n    for i, food_item in enumerate(food_items):\n        # Filter data for this food item\n        item_data = price_stats[price_stats['Food_Items'] == food_item]\n        \n        # Create the main line plot for price spread\n        figrange.add_trace(\n            go.Scatter(\n                x=item_data['Date'],\n                y=item_data['price_spread'],\n                name='Price Spread',\n                mode='lines+markers',\n                line=dict(color='blue', width=2),\n                marker=dict(size=6),\n                visible=(i == 0),\n                customdata=np.stack((\n                    item_data['min'],\n                    item_data['max'],\n                    item_data['mean']\n                ), axis=-1),\n                hovertemplate=(\n                    '&lt;b&gt;Date&lt;/b&gt;: %{x|%B %Y}&lt;br&gt;' +\n                    '&lt;b&gt;Price Spread&lt;/b&gt;: ₱%{y:.2f}&lt;br&gt;' +\n                    '&lt;b&gt;Minimum Price&lt;/b&gt;: ₱%{customdata[0]:.2f}&lt;br&gt;' +\n                    '&lt;b&gt;Maximum Price&lt;/b&gt;: ₱%{customdata[1]:.2f}&lt;br&gt;' +\n                    '&lt;b&gt;Average Price&lt;/b&gt;: ₱%{customdata[2]:.2f}&lt;br&gt;' +\n                    '&lt;extra&gt;&lt;/extra&gt;'\n                )\n            )\n        )\n        \n        # Calculate statistics for annotations\n        avg_spread = item_data['price_spread'].mean()\n        max_spread = item_data['price_spread'].max()\n        max_spread_date = item_data.loc[item_data['price_spread'].idxmax(), 'Date']\n        \n        # Add a dashed line for average spread\n        figrange.add_trace(\n            go.Scatter(\n                x=[item_data['Date'].min(), item_data['Date'].max()],\n                y=[avg_spread, avg_spread],\n                name='Average Spread',\n                mode='lines',\n                line=dict(color='red', width=2, dash='dash'),\n                visible=(i == 0)\n            )\n        )\n        \n        # Create visibility list for this food item's traces\n        visible_list = [False] * (len(food_items) * 2)\n        visible_list[i*2:(i*2)+2] = [True, True]\n        \n        # Add button for this food item to dropdown menu\n        dropdown_buttons.append(\n            dict(\n                args=[\n                    {\"visible\": visible_list},\n                    {\n                        \"title\": f\"Price Spread Analysis for {food_item}&lt;br&gt;\"\n                    }\n                ],\n                label=food_item,\n                method=\"update\"\n            )\n        )\n    \n    # Update layout\n    figrange.update_layout(\n        updatemenus=[\n            dict(\n                buttons=dropdown_buttons,\n                direction=\"down\",\n                showactive=True,\n                x=0.1,\n                y=1.15,\n                xanchor=\"left\",\n                yanchor=\"top\"\n            )\n        ],\n        title=f\"Price Spread Analysis for {food_items[0]}\",\n        xaxis_title=\"Date\",\n        yaxis_title=\"Price Spread in ₱\",\n        template=\"plotly_white\",\n        margin=dict(t=120, b=50),\n        legend=dict(\n            orientation=\"h\",\n            yanchor=\"bottom\",\n            y=1.02,\n            xanchor=\"right\",\n            x=1\n        ),\n        # Add annotation\n        annotations=[\n            dict(\n                text=\"Price Spread = Maximum Price - Minimum Price\",\n                xref=\"paper\",\n                yref=\"paper\",\n                x=0,\n                y=-0.15,\n                showarrow=False,\n                font=dict(size=10)\n            )\n        ]\n    )\n    \n    return figrange\n\nfigrange = spread_chart(price_stats)\nfigrange.show()\n\n\n\n\n                                                \n\n\nFigure 3: a line chart showing the price spread for each food item by date, represented by a blue line. The red line represents the average price spread.\n\n\n\n\n\nKey Observations:\n\nOverall Trend - Both the minimum and maximum prices show a general upward trend over the years, indicating an overall increase in the price of every food items. Some even recorded highest price increase on 2020, likely due to the COVID-19 pandemic and its impact on supply chains.\nPrice Range - The gap between the minimum and maximum prices for most items widens significantly in 2020 and 2021. This suggests that there were greater variations in prices across regions during these years.\n\n\n\nPosssible causes:\n\nCOVID-19 Pandemic - The pandemic disrupted supply chains and increased demand for certain food items, which could have led to price volatility.\nRegional Differences - Differences in the impact of the pandemic on regional economies and agricultural production could have contributed to price variations."
  },
  {
    "objectID": "Philippine_food_price_Analysis_and_Visualization/Reports/full_report.html#regional-price-difference",
    "href": "Philippine_food_price_Analysis_and_Visualization/Reports/full_report.html#regional-price-difference",
    "title": "Full Analysis of Philippine Food prices from 2007 - 2025",
    "section": "Regional Price difference",
    "text": "Regional Price difference\nTo truly know if the regions really have significant difference in prices over the years, hypothesis testing must be done. Please refer to .._testing.ipynb to know why Kruskall-Wallis was used here.\n\nView the first few rows of the dataset\n\n\nCode\n#open the csv file that was already analyzed with kruskall wallis test.\nhypothesis_results = \"../Data/Processed/hypothesis_testing_result.csv\"\nhyp_df = pd.read_csv(hypothesis_results)\nhyp_df.head()\n\n\n\n\n    \n      \n      Year\n      Food_Item\n      H-statistic\n      p-value\n      Result\n    \n  \n\n\n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\nLoading ITables v2.2.4 from the init_notebook_mode cell...\n(need help?)\n\n\n\n\n\n\n\nFilter the dataframe to keep only rows where ‘food_items’ starts with ‘c_’ and remove prefix ’_c’\n\n\nCode\n# Filter the dataframe to keep only rows where 'food_item' starts with 'c_'\nhyp_df_filtered = hyp_df[hyp_df['Food_Item'].str.startswith('c_')]\n# removing prefix _c in the food items\nhyp_df_filtered.loc[:, 'Food_Item'] = hyp_df_filtered['Food_Item'].str.replace('c_', '', regex=True)\nhyp_df_filtered.head()\n\n\n\n\n    \n      \n      Year\n      Food_Item\n      H-statistic\n      p-value\n      Result\n    \n  \n\n\n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\nLoading ITables v2.2.4 from the init_notebook_mode cell...\n(need help?)\n\n\n\n\n\n\n\ncheck the the results via using table or check unique results\n\n\nCode\nyear_dropdown = widgets.Dropdown(\n    options=hyp_df_filtered[\"Year\"].unique(),\n    value=hyp_df_filtered[\"Year\"].min(),\n    description=\"Select Year:\",\n    style={'description_width': 'initial'}\n)\n\n# Output widget to display the table\noutput = widgets.Output()\n\ndef update_table(change):\n    with output:\n        output.clear_output()\n        display(hyp_df_filtered[hyp_df_filtered[\"Year\"] == year_dropdown.value])\n\n# Trigger update on change\nyear_dropdown.observe(update_table, names=\"value\")\n\n# Display widgets\ndisplay(year_dropdown, output)\n\n# Initial Table Display\nupdate_table(None)\n\n\n\n\n\n\n\n\n\n\nCode\n# or you can just count the number of unique Results\nhyp_df_filtered[\"Result\"].value_counts()\n\n\n\n\n    \n      \n      count\n    \n    \n      Result\n      \n    \n  \n\n\n    \n        \n        \n        \n        \n        \n        \n        \n        \n    \n    \n   \n    \n      \n  \n        \n    \n    \n  \n        \n    \n    \n  \n        \n    \n      \n  \n        \n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n\n            \n                \n                \n            \n        \n    \n\n\nLoading ITables v2.2.4 from the init_notebook_mode cell...\n(need help?)\n\n\n\n\n\nThis means all the items for all the regions over the year have different prices. But which regions have different prices?\n\n\nCode\ndf_d = df_cleaned_range.drop(columns=['country', 'City', 'lat', 'lon', 'Province', 'Date', 'month'])\n\ndf_dt = df_d.melt(id_vars=['Region', 'year'], var_name='Food_Items', value_name='Price')\ndf_dt = df_dt[df_dt['Food_Items'].str.startswith('c_')]\ndf_dt.loc[:, 'Food_Items'] = df_dt['Food_Items'].str.replace('c_', '', regex=True)\n\n\n\n\nPerform Dunn’s Test and saved as csv file\n\n\nCode\n\n# Perform Dunn's Test for all food items and years\ndt_results = []\nfor item in df_dt['Food_Items'].unique():\n    for year in df_dt['year'].unique():\n        filter_dfdt = df_dt[(df_dt['Food_Items'] == item) & (df_dt['year'] == year)]\n        if not filter_dfdt.empty:\n            dunn_result = sp.posthoc_dunn(filter_dfdt, val_col='Price', group_col='Region')\n            dunn_result['Food_Items'] = item\n            dunn_result['year'] = year\n            dt_results.append(dunn_result)\n\n# Combine results into a single DataFrame and save to CSV\nif dt_results:\n    final_results = pd.concat(dt_results)\n    final_results.to_csv(\"dunns_test_results.csv\", index=True)\n    print(\"Dunn's test results saved to dunns_test_results.csv\")\nelse:\n    print(\"No valid comparisons found.\")\n\n\nDunn's test results saved to dunns_test_results.csv\n\n\n\n\nCode\n# Read the CSV file\ndf = pd.read_csv('dunns_test_results.csv', index_col=0)\n\nfood_items = sorted(df['Food_Items'].dropna().unique())\nyears = sorted(df['year'].unique())\n\n# Create initial heatmap data\ndef get_heatmap_data(food_item, year):\n    \"\"\"Filters the dataset and returns heatmap data.\"\"\"\n    filtered_data = df[(df['Food_Items'] == food_item) & (df['year'] == year)]\n    \n    if filtered_data.empty:\n        return None, None, None  # No data available case\n\n    heatmap_data = filtered_data.drop(columns=['Food_Items', 'year'])\n    return heatmap_data.values, heatmap_data.columns, heatmap_data.index\n\n# Initialize first heatmap\ninitial_food = food_items[0]\ninitial_year = years[0]\nz_values, x_labels, y_labels = get_heatmap_data(initial_food, initial_year)\n\n# Create figure\nfig = go.Figure()\n\n# Add initial heatmap\nfig.add_trace(go.Heatmap(\n    z=z_values,\n    x=x_labels,\n    y=y_labels,\n    colorscale='rdylgn',\n    colorbar=dict(title='p-value',\n                  x=1.2,\n                  titleside='top',\n                  len=0.5\n                 ),\n    hoverongaps=False\n))\n\n# Update layout\nfig.update_layout(\n    title=dict(text=f\"Dunn's Test Results: {food} ({initial_year})\", \n                          font=dict(size=20),\n                          y=0.98,\n                          x=0.5,\n                          ),\n    height=620,\n    width=800,\n    margin=dict(l=10, r=10, t=25, b=1),\n    xaxis=dict(tickangle=45, title='Region', constrain='domain'),\n    yaxis=dict(title='Region', constrain='domain', scaleanchor='x', scaleratio=1)\n)\n\n# Add dropdowns for interactivity\ndropdown_food = [\n    {\n        \"label\": food,\n        \"method\": \"update\",\n        \"args\": [\n            {\"z\": [get_heatmap_data(food, initial_year)[0]]},  # Update heatmap\n            {\"title\":dict(text=f\"Dunn's Test Results: {food} ({initial_year})\", \n                          font=dict(size=20),\n                          y=0.98,\n                          x=0.5,\n                          )} \n        ]\n    }\n    for food in food_items\n]\n\ndropdown_year = [\n    {\n        \"label\": str(year),\n        \"method\": \"update\",\n        \"args\": [\n            {\"z\": [get_heatmap_data(initial_food, year)[0]]},  # Update heatmap\n            {\"title\":dict(text=f\"Dunn's Test Results: {food} ({initial_year})\", \n                          font=dict(size=20),\n                          y=0.98,\n                          x=0.5,\n                          )} \n        ]\n    }\n    for year in years\n]\n\nfig.update_layout(\n    updatemenus=[\n        {\n            \"buttons\": dropdown_food,\n            \"direction\": \"down\",\n            \"showactive\": True,\n            \"x\": -1,\n            \"xanchor\": \"left\",\n            \"y\": 0.99,\n            \"yanchor\": \"top\",\n            \"active\": 0,\n            \"pad\": {\"r\": 0.5, \"t\": 0.5},\n            \"name\": \"Food Item\",\n        },\n        {\n            \"buttons\": dropdown_year,\n            \"direction\": \"down\",\n            \"showactive\": True,\n            \"x\": -0.47,\n            \"xanchor\": \"left\",\n            \"y\": 0.99,\n            \"yanchor\": \"top\",\n            \"active\": 0,\n            \"pad\": {\"r\": 0.5, \"t\": 0.5},\n            \"name\": \"Year\",\n        }\n    ]\n)\n\nfig.show()\n\n\n\n\n                                                \n\n\nFigure 4: A heatmap showing Dunn’s test results for each food item and year. The color scale represents the p-value, with redder colors representing more significant differences.\n\n\n\n\nThe color scale indicates the following:       Red (Close to 0): Indicates a statistically significant difference in food prices between two regions.       Light Green to Yellow (Around 0.3 to 0.7): Suggests a possible difference, but not statistically significant based on the chosen significance level (p=0.05).       Dark Green (Close to 1): Indicates statistically no significant difference in bean prices between the two regions.\n\n\nKey Observations\n\nSignificant Differences Exist: The presence of so many red cells indicates that there are statistically significant differences in food prices in almost all regions at any given years.\nNo Significant Differences: patches of green indicate pairs of regions where the Dunn’s test did not find a statistically significant difference in food prices, but there are only few of them.\nMarket Average Comparison: The “Market Average” row/column allows you to see how each region’s prices compare to the overall average. Dark red cells in this row/column would indicate regions with prices significantly different from the market average."
  },
  {
    "objectID": "Philippine_food_price_Analysis_and_Visualization/Reports/full_report.html#food-price-prediction-3-years-into-the-future",
    "href": "Philippine_food_price_Analysis_and_Visualization/Reports/full_report.html#food-price-prediction-3-years-into-the-future",
    "title": "Full Analysis of Philippine Food prices from 2007 - 2025",
    "section": "Food price Prediction 3 years into the future",
    "text": "Food price Prediction 3 years into the future\n\n\nCode\nforecasts_df = pd.read_csv('forecasts.csv')\n\ndef create_interactive_forecast_plot(forecasts_df):\n    \"\"\"Create an interactive forecast plot using Plotly.\"\"\"\n    \n    # Get unique regions and items\n    regions = sorted(forecasts_df['region'].unique())\n    items = sorted(forecasts_df['item'].unique())\n\n    # Create figure with secondary y-axis\n    fig = make_subplots(specs=[[{\"secondary_y\": True}]])\n\n    # Add traces for all combinations\n    for region in regions:\n        for item in items:\n            forecast = forecasts_df[\n                (forecasts_df['region'] == region) & \n                (forecasts_df['item'] == item)\n            ].iloc[0]\n            \n            # Parse JSON strings\n            historical_dates = json.loads(forecast['historical_dates'])\n            historical_values = json.loads(forecast['historical_values'])\n            forecast_dates = json.loads(forecast['forecast_dates'])\n            forecast_values = json.loads(forecast['forecast_values'])\n            \n            # Historical data trace\n            fig.add_trace(\n                go.Scatter(\n                    x=historical_dates,\n                    y=historical_values,\n                    name=\"Historical\",\n                    line=dict(color='blue'),\n                    visible=(region == regions[0] and item == items[0])\n                ),\n                secondary_y=False\n            )\n\n            # Forecast data trace\n            fig.add_trace(\n                go.Scatter(\n                    x=forecast_dates,\n                    y=forecast_values,\n                    name=\"Forecast\",\n                    line=dict(color='red', dash='dash'),\n                    visible=(region == regions[0] and item == items[0])\n                ),\n                secondary_y=False\n            )\n\n    # Create dropdown buttons\n    def create_visibility_array(selected_region, selected_item):\n        return [\n            (r == selected_region and i == selected_item)\n            for r in regions\n            for i in items\n            for _ in range(2)  # Two traces per combination\n        ]\n\n    def get_arima_text(region, item):\n        forecast = forecasts_df[\n            (forecasts_df['region'] == region) & \n            (forecasts_df['item'] == item)\n        ].iloc[0]\n        return (f\"ARIMA({forecast['p']},{forecast['d']},{forecast['q']})\"\n                f\"({forecast['P']},{forecast['D']},{forecast['Q']},12)\")\n\n    # Region Dropdown\n    region_buttons = [\n        dict(\n            args=[\n                {'visible': create_visibility_array(region, items[0])},\n                {'annotations': [\n                    dict(text=\"Region:\", x=0, y=1.1, yref=\"paper\", xref=\"paper\", showarrow=False),\n                    dict(text=\"Food Item:\", x=0.46, y=1.1, yref=\"paper\", xref=\"paper\", showarrow=False),\n                    dict(\n                        text=f\"Note: ARIMA parameters used: {get_arima_text(region, items[0])}\",\n                        x=-0.09, y=-0.24, xref=\"paper\", yref=\"paper\",\n                        showarrow=False, font=dict(size=12, color=\"gray\")\n                    )\n                ]}\n            ],\n            label=region,\n            method='update'\n        ) for region in regions\n    ]\n\n    # Item Dropdown\n    item_buttons = [\n        dict(\n            args=[\n                {'visible': create_visibility_array(regions[0], item)},\n                {'annotations': [\n                    dict(text=\"Region:\", \n                         x=0, y=1.1, \n                         yref=\"paper\", \n                         xref=\"paper\", \n                         showarrow=False),\n                    dict(text=\"Food Item:\", \n                         x=0.46, \n                         y=1.1, \n                         yref=\"paper\",\n                        xref=\"paper\", \n                         showarrow=False),\n                    dict(\n                        text=f\"Note: ARIMA parameters used: {get_arima_text(regions[0], item)}\",\n                        x=-0.09, \n                        y=-0.24, \n                        xref=\"paper\", \n                        yref=\"paper\",\n                        showarrow=False, \n                        font=dict(size=12, color=\"gray\")\n                    )\n                ]}\n            ],\n            label=item,\n            method='update'\n        ) for item in items\n    ]\n\n    updatemenus = [\n        # Region Dropdown\n        dict(\n            buttons=region_buttons,\n            direction='down',\n            showactive=True,\n            x=0.06,\n            xanchor='left',\n            y=1.115,\n            yanchor='top'\n        ),\n        # Item Dropdown\n        dict(\n            buttons=item_buttons,\n            direction='down',\n            showactive=True,\n            x=0.501,\n            xanchor='left',\n            y=1.115,\n            yanchor='top'\n        )\n    ]\n\n    # Initial ARIMA text\n    initial_arima_text = get_arima_text(regions[0], items[0])\n\n    # Update x-axis to show all years\n    fig.update_xaxes(\n        dtick=\"M12\",  # Show tick mark for every 12 months\n        tickformat=\"%Y\",  # Show only the year\n        tickangle=45,  # Angle the labels for better readability\n        showgrid=True,\n        gridwidth=1,\n        gridcolor='lightgray'\n    )\n\n    # Update layout with fixed dimensions and consistent annotations\n    fig.update_layout(\n        title='Price Forecast by Region and Food Item',\n        xaxis_title='Date',\n        yaxis_title='Price',\n        updatemenus=updatemenus,\n        annotations=[\n            dict(text=\"Region:\", x=0, y=1.1, yref=\"paper\", xref=\"paper\", showarrow=False),\n            dict(text=\"Food Item:\", x=0.46, y=1.1, yref=\"paper\", xref=\"paper\", showarrow=False),\n            dict(text=f\"Note: most optimized ARIMA parameters: {initial_arima_text}\",\n                 x=-0.09, \n                 y=-0.24, \n                 xref=\"paper\", \n                 yref=\"paper\",\n                showarrow=False, \n                font=dict(size=12, \n                          color=\"gray\")\n            )\n        ],\n        height=563,  # Fixed height\n        width=1000,  # Fixed width\n        showlegend=True,\n        legend=dict(\n            yanchor=\"top\",\n            y=0.99,\n            xanchor=\"left\",\n            x=0.95\n        ),\n        margin=dict(t=95, b=95)  # Add margin to accommodate dropdown and annotation\n    )\n\n    return fig\n\n# Create and display the interactive plot\nfig = create_interactive_forecast_plot(forecasts_df)\nfig.show()\n\n\n\n\n                                                \n\n\nFigure 5: Forecasting the future price of each food item in each region. The blue line represents the historical data, and the red linerepresents the forecasted data. The red line is dashed to distinguish it from the historical data. The ARIMA parameters noted at the bottom left of the chart are the optimal parameters for the model.\n\n\n\n\n\nKey Observations\n\nHistorical Price Volatility: The blue line representing historical prices shows significant fluctuations, especially noticeable spikes around 2008 and smaller ones in other years. This indicates that most food prices have been subject to considerable volatility over the past two decades.\nRecent Price Increase: There’s a clear upward trend in food prices in the period leading up to the forecast (roughly from 2020 to 2024). This suggests recent factors have been pushing prices higher.\nRelatively Stable Forecast: The red dashed line, representing the forecast for the next 36 months, shows a relatively stable and slightly upward trend. The model predicts a continued but moderated increase compared to the recent past.\n\n\n\nKey Observations\n\nHistorical Volatility:\n\nWeather Patterns: adverse weather events in key agricultural regions can significantly impact supply and cause price volatility.\nChanges in Demand: Fluctuations in global demand, driven by population growth or economic factors, can also contribute to price swings.\n\nRecent Price Increase:\n\nInflation: General inflation in the economy could be pushing up agricultural commodity prices.\nSupply Chain Issues: Disruptions to global supply chains (e.g., due to pandemics, conflicts, or trade policies) can lead to shortages and price increases.\nIncreased Input Costs: Rising costs of fertilizers, fuel, and labor can increase the cost of food production, which could be passed on to consumers.\n\nRelatively Stable Forecast:\n\nModel Assumption: ARIMA models assume that, to some extent, future trends will resemble past patterns. The stable forecast suggests the model has not picked up any strong upward or downward pressures for the next 36 months beyond what is already captured in the recent trend."
  },
  {
    "objectID": "Philippine_food_price_Analysis_and_Visualization/Reports/full_report.html#conclusion",
    "href": "Philippine_food_price_Analysis_and_Visualization/Reports/full_report.html#conclusion",
    "title": "Full Analysis of Philippine Food prices from 2007 - 2025",
    "section": "Conclusion",
    "text": "Conclusion\n      In summary, the analysis revealed upward trend in food price while having significant regional differences, influenced by factors such as supply chain efficiency, economic conditions, and agricultural productivity. Historical trends showed patterns of price fluctuations, reflecting periods of stability, inflation, or deflation driven by external influences like climate events, policy changes, global market shifts and increassed input cost. Statistical analysis of regional price variations indicates that some regions exhibit significantly different price behaviors compared to others. Additionally, predictive modeling suggests that food prices will continue to rise at a moderate pace over the next few years, following a more stable trajectory compared to the sharp increases observed between 2020 and 2023. This forecast indicates a potential stabilization of recent price surges, reflecting a shift toward a more gradual upward trend rather than extreme volatility."
  }
]